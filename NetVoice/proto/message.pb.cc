// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace voice {

namespace {

const ::google::protobuf::Descriptor* Handshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdjustPlayerAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdjustPlayerAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACK_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Handshake_descriptor_ = file->message_type(0);
  static const int Handshake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, productkey_),
  };
  Handshake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Handshake_descriptor_,
      Handshake::default_instance_,
      Handshake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _has_bits_[0]),
      -1,
      -1,
      sizeof(Handshake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _internal_metadata_),
      -1);
  HandshakeAck_descriptor_ = file->message_type(1);
  static const int HandshakeAck_offsets_[1] = {
  };
  HandshakeAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HandshakeAck_descriptor_,
      HandshakeAck::default_instance_,
      HandshakeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(HandshakeAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _internal_metadata_),
      -1);
  CreateGroup_descriptor_ = file->message_type(2);
  static const int CreateGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, groupid_),
  };
  CreateGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateGroup_descriptor_,
      CreateGroup::default_instance_,
      CreateGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(CreateGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, _internal_metadata_),
      -1);
  AddPlayer_descriptor_ = file->message_type(3);
  static const int AddPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, canspeak_),
  };
  AddPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddPlayer_descriptor_,
      AddPlayer::default_instance_,
      AddPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, _internal_metadata_),
      -1);
  AddPlayerAck_descriptor_ = file->message_type(4);
  static const int AddPlayerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, playerindex_),
  };
  AddPlayerAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddPlayerAck_descriptor_,
      AddPlayerAck::default_instance_,
      AddPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddPlayerAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, _internal_metadata_),
      -1);
  RemovePlayer_descriptor_ = file->message_type(5);
  static const int RemovePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, playerid_),
  };
  RemovePlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemovePlayer_descriptor_,
      RemovePlayer::default_instance_,
      RemovePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(RemovePlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, _internal_metadata_),
      -1);
  DestroyGroup_descriptor_ = file->message_type(6);
  static const int DestroyGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, groupid_),
  };
  DestroyGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DestroyGroup_descriptor_,
      DestroyGroup::default_instance_,
      DestroyGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(DestroyGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, _internal_metadata_),
      -1);
  AdjustPlayerAttr_descriptor_ = file->message_type(7);
  static const int AdjustPlayerAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, canspeak_),
  };
  AdjustPlayerAttr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdjustPlayerAttr_descriptor_,
      AdjustPlayerAttr::default_instance_,
      AdjustPlayerAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, _has_bits_[0]),
      -1,
      -1,
      sizeof(AdjustPlayerAttr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, _internal_metadata_),
      -1);
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, creategroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, addplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, removeplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, destroygropu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, adjustplayerattr_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(9);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, handshakeack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, addplayerack_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(10);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, messagelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  MSG_descriptor_ = file->enum_type(0);
  ACK_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Handshake_descriptor_, &Handshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HandshakeAck_descriptor_, &HandshakeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateGroup_descriptor_, &CreateGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddPlayer_descriptor_, &AddPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddPlayerAck_descriptor_, &AddPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemovePlayer_descriptor_, &RemovePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DestroyGroup_descriptor_, &DestroyGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdjustPlayerAttr_descriptor_, &AdjustPlayerAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Handshake::default_instance_;
  delete Handshake_reflection_;
  delete HandshakeAck::default_instance_;
  delete HandshakeAck_reflection_;
  delete CreateGroup::default_instance_;
  delete CreateGroup_reflection_;
  delete AddPlayer::default_instance_;
  delete AddPlayer_reflection_;
  delete AddPlayerAck::default_instance_;
  delete AddPlayerAck_reflection_;
  delete RemovePlayer::default_instance_;
  delete RemovePlayer_reflection_;
  delete DestroyGroup::default_instance_;
  delete DestroyGroup_reflection_;
  delete AdjustPlayerAttr::default_instance_;
  delete AdjustPlayerAttr_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\005voice\"\037\n\tHandshake\022\022\n\nP"
    "roductKey\030\001 \001(\t\"\016\n\014HandshakeAck\"\036\n\013Creat"
    "eGroup\022\017\n\007groupId\030\001 \001(\004\"@\n\tAddPlayer\022\017\n\007"
    "groupId\030\001 \001(\004\022\020\n\010playerId\030\002 \001(\004\022\020\n\010canSp"
    "eak\030\003 \001(\r\"F\n\014AddPlayerAck\022\017\n\007groupId\030\001 \001"
    "(\004\022\020\n\010playerId\030\002 \001(\004\022\023\n\013playerIndex\030\003 \001("
    "\r\"1\n\014RemovePlayer\022\017\n\007groupId\030\001 \001(\004\022\020\n\010pl"
    "ayerId\030\002 \001(\004\"\037\n\014DestroyGroup\022\017\n\007groupId\030"
    "\001 \001(\004\"6\n\020AdjustPlayerAttr\022\020\n\010playerId\030\001 "
    "\001(\004\022\020\n\010canSpeak\030\002 \001(\r\"\205\002\n\007Request\022#\n\than"
    "dshake\030\001 \001(\0132\020.voice.Handshake\022\'\n\013create"
    "Group\030\002 \001(\0132\022.voice.CreateGroup\022#\n\taddPl"
    "ayer\030\003 \001(\0132\020.voice.AddPlayer\022)\n\014removePl"
    "ayer\030\004 \001(\0132\023.voice.RemovePlayer\022)\n\014destr"
    "oyGropu\030\005 \001(\0132\023.voice.DestroyGroup\0221\n\020ad"
    "justPlayerAttr\030\006 \001(\0132\027.voice.AdjustPlaye"
    "rAttr\"\212\001\n\010Response\022\030\n\004Code\030\001 \001(\0162\n.voice"
    ".ACK\022\016\n\006ErrMsg\030\002 \001(\t\022)\n\014handshakeAck\030\003 \001"
    "(\0132\023.voice.HandshakeAck\022)\n\014addPlayerAck\030"
    "\004 \001(\0132\023.voice.AddPlayerAck\"\200\001\n\007Message\022\035"
    "\n\tmessageId\030\001 \001(\0162\n.voice.MSG\022\022\n\nmessage"
    "Len\030\002 \001(\005\022\037\n\007request\030\003 \001(\0132\016.voice.Reque"
    "st\022!\n\010response\030\004 \001(\0132\017.voice.Response*\344\001"
    "\n\003MSG\022\014\n\010PKT_NONE\020\000\022\021\n\rPKT_HANDSHAKE\020\001\022\025"
    "\n\021PKT_HANDSHAKE_ACK\020\002\022\024\n\020PKT_CREATE_GROU"
    "P\020\003\022\022\n\016PKT_ADD_PLAYER\020\004\022\026\n\022PKT_ADD_PLAYE"
    "R_ACK\020\005\022\025\n\021PKT_REMOVE_PLAYER\020\006\022\025\n\021PKT_DE"
    "STROY_GROUP\020\007\022\032\n\026PKT_ADJUST_PLAYER_ATTR\020"
    "\010\022\031\n\025PKT_ADJUST_GROUP_ATTR\020\t*F\n\003ACK\022\n\n\006A"
    "CK_OK\020\000\022\030\n\024ACK_HANDSHAKE_FAILED\020\001\022\031\n\025ACK"
    "_ADD_PLAYER_FAILED\020\002", 1220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Handshake::default_instance_ = new Handshake();
  HandshakeAck::default_instance_ = new HandshakeAck();
  CreateGroup::default_instance_ = new CreateGroup();
  AddPlayer::default_instance_ = new AddPlayer();
  AddPlayerAck::default_instance_ = new AddPlayerAck();
  RemovePlayer::default_instance_ = new RemovePlayer();
  DestroyGroup::default_instance_ = new DestroyGroup();
  AdjustPlayerAttr::default_instance_ = new AdjustPlayerAttr();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Message::default_instance_ = new Message();
  Handshake::default_instance_->InitAsDefaultInstance();
  HandshakeAck::default_instance_->InitAsDefaultInstance();
  CreateGroup::default_instance_->InitAsDefaultInstance();
  AddPlayer::default_instance_->InitAsDefaultInstance();
  AddPlayerAck::default_instance_->InitAsDefaultInstance();
  RemovePlayer::default_instance_->InitAsDefaultInstance();
  DestroyGroup::default_instance_->InitAsDefaultInstance();
  AdjustPlayerAttr::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACK_descriptor_;
}
bool ACK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handshake::kProductKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handshake::Handshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.Handshake)
}

void Handshake::InitAsDefaultInstance() {
}

Handshake::Handshake(const Handshake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.Handshake)
}

void Handshake::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  productkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:voice.Handshake)
  SharedDtor();
}

void Handshake::SharedDtor() {
  productkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Handshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handshake_descriptor_;
}

const Handshake& Handshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Handshake* Handshake::default_instance_ = NULL;

Handshake* Handshake::New(::google::protobuf::Arena* arena) const {
  Handshake* n = new Handshake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Handshake::Clear() {
  if (has_productkey()) {
    productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.Handshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProductKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productkey().data(), this->productkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voice.Handshake.ProductKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.Handshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.Handshake)
  return false;
#undef DO_
}

void Handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.Handshake)
  // optional string ProductKey = 1;
  if (has_productkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productkey().data(), this->productkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice.Handshake.ProductKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.Handshake)
}

::google::protobuf::uint8* Handshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.Handshake)
  // optional string ProductKey = 1;
  if (has_productkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productkey().data(), this->productkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice.Handshake.ProductKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.Handshake)
  return target;
}

int Handshake::ByteSize() const {
  int total_size = 0;

  // optional string ProductKey = 1;
  if (has_productkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productkey());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handshake::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Handshake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Handshake>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productkey()) {
      set_has_productkey();
      productkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productkey_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Handshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {

  return true;
}

void Handshake::Swap(Handshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handshake::InternalSwap(Handshake* other) {
  productkey_.Swap(&other->productkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Handshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handshake_descriptor_;
  metadata.reflection = Handshake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Handshake

// optional string ProductKey = 1;
bool Handshake::has_productkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Handshake::set_has_productkey() {
  _has_bits_[0] |= 0x00000001u;
}
void Handshake::clear_has_productkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void Handshake::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productkey();
}
 const ::std::string& Handshake::productkey() const {
  // @@protoc_insertion_point(field_get:voice.Handshake.ProductKey)
  return productkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Handshake::set_productkey(const ::std::string& value) {
  set_has_productkey();
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:voice.Handshake.ProductKey)
}
 void Handshake::set_productkey(const char* value) {
  set_has_productkey();
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:voice.Handshake.ProductKey)
}
 void Handshake::set_productkey(const char* value, size_t size) {
  set_has_productkey();
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:voice.Handshake.ProductKey)
}
 ::std::string* Handshake::mutable_productkey() {
  set_has_productkey();
  // @@protoc_insertion_point(field_mutable:voice.Handshake.ProductKey)
  return productkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Handshake::release_productkey() {
  clear_has_productkey();
  return productkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Handshake::set_allocated_productkey(::std::string* productkey) {
  if (productkey != NULL) {
    set_has_productkey();
  } else {
    clear_has_productkey();
  }
  productkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:voice.Handshake.ProductKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandshakeAck::HandshakeAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.HandshakeAck)
}

void HandshakeAck::InitAsDefaultInstance() {
}

HandshakeAck::HandshakeAck(const HandshakeAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.HandshakeAck)
}

void HandshakeAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeAck::~HandshakeAck() {
  // @@protoc_insertion_point(destructor:voice.HandshakeAck)
  SharedDtor();
}

void HandshakeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeAck_descriptor_;
}

const HandshakeAck& HandshakeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

HandshakeAck* HandshakeAck::default_instance_ = NULL;

HandshakeAck* HandshakeAck::New(::google::protobuf::Arena* arena) const {
  HandshakeAck* n = new HandshakeAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandshakeAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HandshakeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.HandshakeAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:voice.HandshakeAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.HandshakeAck)
  return false;
#undef DO_
}

void HandshakeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.HandshakeAck)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.HandshakeAck)
}

::google::protobuf::uint8* HandshakeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.HandshakeAck)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.HandshakeAck)
  return target;
}

int HandshakeAck::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HandshakeAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HandshakeAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeAck::MergeFrom(const HandshakeAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HandshakeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeAck::CopyFrom(const HandshakeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeAck::IsInitialized() const {

  return true;
}

void HandshakeAck::Swap(HandshakeAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandshakeAck::InternalSwap(HandshakeAck* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandshakeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeAck_descriptor_;
  metadata.reflection = HandshakeAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HandshakeAck

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroup::CreateGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.CreateGroup)
}

void CreateGroup::InitAsDefaultInstance() {
}

CreateGroup::CreateGroup(const CreateGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.CreateGroup)
}

void CreateGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroup::~CreateGroup() {
  // @@protoc_insertion_point(destructor:voice.CreateGroup)
  SharedDtor();
}

void CreateGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroup_descriptor_;
}

const CreateGroup& CreateGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CreateGroup* CreateGroup::default_instance_ = NULL;

CreateGroup* CreateGroup::New(::google::protobuf::Arena* arena) const {
  CreateGroup* n = new CreateGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGroup::Clear() {
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreateGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.CreateGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.CreateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.CreateGroup)
  return false;
#undef DO_
}

void CreateGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.CreateGroup)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.CreateGroup)
}

::google::protobuf::uint8* CreateGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.CreateGroup)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.CreateGroup)
  return target;
}

int CreateGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (has_groupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroup::MergeFrom(const CreateGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CreateGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroup::CopyFrom(const CreateGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroup::IsInitialized() const {

  return true;
}

void CreateGroup::Swap(CreateGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroup::InternalSwap(CreateGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroup_descriptor_;
  metadata.reflection = CreateGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroup

// optional uint64 groupId = 1;
bool CreateGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::uint64 CreateGroup::groupid() const {
  // @@protoc_insertion_point(field_get:voice.CreateGroup.groupId)
  return groupid_;
}
 void CreateGroup::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.CreateGroup.groupId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPlayer::kGroupIdFieldNumber;
const int AddPlayer::kPlayerIdFieldNumber;
const int AddPlayer::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPlayer::AddPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.AddPlayer)
}

void AddPlayer::InitAsDefaultInstance() {
}

AddPlayer::AddPlayer(const AddPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.AddPlayer)
}

void AddPlayer::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPlayer::~AddPlayer() {
  // @@protoc_insertion_point(destructor:voice.AddPlayer)
  SharedDtor();
}

void AddPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPlayer_descriptor_;
}

const AddPlayer& AddPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AddPlayer* AddPlayer::default_instance_ = NULL;

AddPlayer* AddPlayer::New(::google::protobuf::Arena* arena) const {
  AddPlayer* n = new AddPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPlayer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddPlayer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.AddPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 3;
      case 3: {
        if (tag == 24) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));
          set_has_canspeak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.AddPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.AddPlayer)
  return false;
#undef DO_
}

void AddPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.AddPlayer)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 canSpeak = 3;
  if (has_canspeak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->canspeak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.AddPlayer)
}

::google::protobuf::uint8* AddPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.AddPlayer)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 canSpeak = 3;
  if (has_canspeak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->canspeak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.AddPlayer)
  return target;
}

int AddPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 canSpeak = 3;
    if (has_canspeak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canspeak());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddPlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPlayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPlayer::MergeFrom(const AddPlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_canspeak()) {
      set_canspeak(from.canspeak());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayer::CopyFrom(const AddPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayer::IsInitialized() const {

  return true;
}

void AddPlayer::Swap(AddPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPlayer::InternalSwap(AddPlayer* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPlayer_descriptor_;
  metadata.reflection = AddPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddPlayer

// optional uint64 groupId = 1;
bool AddPlayer::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddPlayer::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddPlayer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddPlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::uint64 AddPlayer::groupid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayer.groupId)
  return groupid_;
}
 void AddPlayer::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayer.groupId)
}

// optional uint64 playerId = 2;
bool AddPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void AddPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
 ::google::protobuf::uint64 AddPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayer.playerId)
  return playerid_;
}
 void AddPlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayer.playerId)
}

// optional uint32 canSpeak = 3;
bool AddPlayer::has_canspeak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddPlayer::set_has_canspeak() {
  _has_bits_[0] |= 0x00000004u;
}
void AddPlayer::clear_has_canspeak() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddPlayer::clear_canspeak() {
  canspeak_ = 0u;
  clear_has_canspeak();
}
 ::google::protobuf::uint32 AddPlayer::canspeak() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayer.canSpeak)
  return canspeak_;
}
 void AddPlayer::set_canspeak(::google::protobuf::uint32 value) {
  set_has_canspeak();
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayer.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPlayerAck::kGroupIdFieldNumber;
const int AddPlayerAck::kPlayerIdFieldNumber;
const int AddPlayerAck::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPlayerAck::AddPlayerAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.AddPlayerAck)
}

void AddPlayerAck::InitAsDefaultInstance() {
}

AddPlayerAck::AddPlayerAck(const AddPlayerAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.AddPlayerAck)
}

void AddPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  playerindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPlayerAck::~AddPlayerAck() {
  // @@protoc_insertion_point(destructor:voice.AddPlayerAck)
  SharedDtor();
}

void AddPlayerAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPlayerAck_descriptor_;
}

const AddPlayerAck& AddPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AddPlayerAck* AddPlayerAck::default_instance_ = NULL;

AddPlayerAck* AddPlayerAck::New(::google::protobuf::Arena* arena) const {
  AddPlayerAck* n = new AddPlayerAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPlayerAck::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddPlayerAck*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.AddPlayerAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerIndex;
        break;
      }

      // optional uint32 playerIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_playerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.AddPlayerAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.AddPlayerAck)
  return false;
#undef DO_
}

void AddPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.AddPlayerAck)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 playerIndex = 3;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.AddPlayerAck)
}

::google::protobuf::uint8* AddPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.AddPlayerAck)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 playerIndex = 3;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.AddPlayerAck)
  return target;
}

int AddPlayerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 playerIndex = 3;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerindex());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddPlayerAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPlayerAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPlayerAck::MergeFrom(const AddPlayerAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerAck::CopyFrom(const AddPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerAck::IsInitialized() const {

  return true;
}

void AddPlayerAck::Swap(AddPlayerAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPlayerAck::InternalSwap(AddPlayerAck* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(playerindex_, other->playerindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPlayerAck_descriptor_;
  metadata.reflection = AddPlayerAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddPlayerAck

// optional uint64 groupId = 1;
bool AddPlayerAck::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddPlayerAck::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddPlayerAck::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddPlayerAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::uint64 AddPlayerAck::groupid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayerAck.groupId)
  return groupid_;
}
 void AddPlayerAck::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayerAck.groupId)
}

// optional uint64 playerId = 2;
bool AddPlayerAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddPlayerAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void AddPlayerAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddPlayerAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
 ::google::protobuf::uint64 AddPlayerAck::playerid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayerAck.playerId)
  return playerid_;
}
 void AddPlayerAck::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayerAck.playerId)
}

// optional uint32 playerIndex = 3;
bool AddPlayerAck::has_playerindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddPlayerAck::set_has_playerindex() {
  _has_bits_[0] |= 0x00000004u;
}
void AddPlayerAck::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddPlayerAck::clear_playerindex() {
  playerindex_ = 0u;
  clear_has_playerindex();
}
 ::google::protobuf::uint32 AddPlayerAck::playerindex() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayerAck.playerIndex)
  return playerindex_;
}
 void AddPlayerAck::set_playerindex(::google::protobuf::uint32 value) {
  set_has_playerindex();
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayerAck.playerIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePlayer::kGroupIdFieldNumber;
const int RemovePlayer::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePlayer::RemovePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.RemovePlayer)
}

void RemovePlayer::InitAsDefaultInstance() {
}

RemovePlayer::RemovePlayer(const RemovePlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.RemovePlayer)
}

void RemovePlayer::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovePlayer::~RemovePlayer() {
  // @@protoc_insertion_point(destructor:voice.RemovePlayer)
  SharedDtor();
}

void RemovePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemovePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePlayer_descriptor_;
}

const RemovePlayer& RemovePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RemovePlayer* RemovePlayer::default_instance_ = NULL;

RemovePlayer* RemovePlayer::New(::google::protobuf::Arena* arena) const {
  RemovePlayer* n = new RemovePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovePlayer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RemovePlayer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RemovePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.RemovePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.RemovePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.RemovePlayer)
  return false;
#undef DO_
}

void RemovePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.RemovePlayer)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.RemovePlayer)
}

::google::protobuf::uint8* RemovePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.RemovePlayer)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.RemovePlayer)
  return target;
}

int RemovePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RemovePlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePlayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovePlayer::MergeFrom(const RemovePlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RemovePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayer::CopyFrom(const RemovePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayer::IsInitialized() const {

  return true;
}

void RemovePlayer::Swap(RemovePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePlayer::InternalSwap(RemovePlayer* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemovePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePlayer_descriptor_;
  metadata.reflection = RemovePlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovePlayer

// optional uint64 groupId = 1;
bool RemovePlayer::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemovePlayer::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void RemovePlayer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemovePlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::uint64 RemovePlayer::groupid() const {
  // @@protoc_insertion_point(field_get:voice.RemovePlayer.groupId)
  return groupid_;
}
 void RemovePlayer::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.RemovePlayer.groupId)
}

// optional uint64 playerId = 2;
bool RemovePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemovePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void RemovePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemovePlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
 ::google::protobuf::uint64 RemovePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:voice.RemovePlayer.playerId)
  return playerid_;
}
 void RemovePlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.RemovePlayer.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyGroup::DestroyGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.DestroyGroup)
}

void DestroyGroup::InitAsDefaultInstance() {
}

DestroyGroup::DestroyGroup(const DestroyGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.DestroyGroup)
}

void DestroyGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyGroup::~DestroyGroup() {
  // @@protoc_insertion_point(destructor:voice.DestroyGroup)
  SharedDtor();
}

void DestroyGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyGroup_descriptor_;
}

const DestroyGroup& DestroyGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

DestroyGroup* DestroyGroup::default_instance_ = NULL;

DestroyGroup* DestroyGroup::New(::google::protobuf::Arena* arena) const {
  DestroyGroup* n = new DestroyGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyGroup::Clear() {
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DestroyGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.DestroyGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.DestroyGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.DestroyGroup)
  return false;
#undef DO_
}

void DestroyGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.DestroyGroup)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.DestroyGroup)
}

::google::protobuf::uint8* DestroyGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.DestroyGroup)
  // optional uint64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.DestroyGroup)
  return target;
}

int DestroyGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (has_groupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DestroyGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyGroup::MergeFrom(const DestroyGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DestroyGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyGroup::CopyFrom(const DestroyGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyGroup::IsInitialized() const {

  return true;
}

void DestroyGroup::Swap(DestroyGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyGroup::InternalSwap(DestroyGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyGroup_descriptor_;
  metadata.reflection = DestroyGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyGroup

// optional uint64 groupId = 1;
bool DestroyGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestroyGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void DestroyGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestroyGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::uint64 DestroyGroup::groupid() const {
  // @@protoc_insertion_point(field_get:voice.DestroyGroup.groupId)
  return groupid_;
}
 void DestroyGroup::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.DestroyGroup.groupId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdjustPlayerAttr::kPlayerIdFieldNumber;
const int AdjustPlayerAttr::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdjustPlayerAttr::AdjustPlayerAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.AdjustPlayerAttr)
}

void AdjustPlayerAttr::InitAsDefaultInstance() {
}

AdjustPlayerAttr::AdjustPlayerAttr(const AdjustPlayerAttr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.AdjustPlayerAttr)
}

void AdjustPlayerAttr::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdjustPlayerAttr::~AdjustPlayerAttr() {
  // @@protoc_insertion_point(destructor:voice.AdjustPlayerAttr)
  SharedDtor();
}

void AdjustPlayerAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdjustPlayerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdjustPlayerAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdjustPlayerAttr_descriptor_;
}

const AdjustPlayerAttr& AdjustPlayerAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AdjustPlayerAttr* AdjustPlayerAttr::default_instance_ = NULL;

AdjustPlayerAttr* AdjustPlayerAttr::New(::google::protobuf::Arena* arena) const {
  AdjustPlayerAttr* n = new AdjustPlayerAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdjustPlayerAttr::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdjustPlayerAttr*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdjustPlayerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.AdjustPlayerAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 2;
      case 2: {
        if (tag == 16) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));
          set_has_canspeak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.AdjustPlayerAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.AdjustPlayerAttr)
  return false;
#undef DO_
}

void AdjustPlayerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.AdjustPlayerAttr)
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint32 canSpeak = 2;
  if (has_canspeak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->canspeak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.AdjustPlayerAttr)
}

::google::protobuf::uint8* AdjustPlayerAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.AdjustPlayerAttr)
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint32 canSpeak = 2;
  if (has_canspeak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->canspeak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.AdjustPlayerAttr)
  return target;
}

int AdjustPlayerAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 canSpeak = 2;
    if (has_canspeak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canspeak());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdjustPlayerAttr::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdjustPlayerAttr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdjustPlayerAttr>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdjustPlayerAttr::MergeFrom(const AdjustPlayerAttr& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_canspeak()) {
      set_canspeak(from.canspeak());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AdjustPlayerAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustPlayerAttr::CopyFrom(const AdjustPlayerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustPlayerAttr::IsInitialized() const {

  return true;
}

void AdjustPlayerAttr::Swap(AdjustPlayerAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdjustPlayerAttr::InternalSwap(AdjustPlayerAttr* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdjustPlayerAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdjustPlayerAttr_descriptor_;
  metadata.reflection = AdjustPlayerAttr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdjustPlayerAttr

// optional uint64 playerId = 1;
bool AdjustPlayerAttr::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdjustPlayerAttr::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void AdjustPlayerAttr::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdjustPlayerAttr::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
 ::google::protobuf::uint64 AdjustPlayerAttr::playerid() const {
  // @@protoc_insertion_point(field_get:voice.AdjustPlayerAttr.playerId)
  return playerid_;
}
 void AdjustPlayerAttr::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.AdjustPlayerAttr.playerId)
}

// optional uint32 canSpeak = 2;
bool AdjustPlayerAttr::has_canspeak() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdjustPlayerAttr::set_has_canspeak() {
  _has_bits_[0] |= 0x00000002u;
}
void AdjustPlayerAttr::clear_has_canspeak() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdjustPlayerAttr::clear_canspeak() {
  canspeak_ = 0u;
  clear_has_canspeak();
}
 ::google::protobuf::uint32 AdjustPlayerAttr::canspeak() const {
  // @@protoc_insertion_point(field_get:voice.AdjustPlayerAttr.canSpeak)
  return canspeak_;
}
 void AdjustPlayerAttr::set_canspeak(::google::protobuf::uint32 value) {
  set_has_canspeak();
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:voice.AdjustPlayerAttr.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kHandshakeFieldNumber;
const int Request::kCreateGroupFieldNumber;
const int Request::kAddPlayerFieldNumber;
const int Request::kRemovePlayerFieldNumber;
const int Request::kDestroyGropuFieldNumber;
const int Request::kAdjustPlayerAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.Request)
}

void Request::InitAsDefaultInstance() {
  handshake_ = const_cast< ::voice::Handshake*>(&::voice::Handshake::default_instance());
  creategroup_ = const_cast< ::voice::CreateGroup*>(&::voice::CreateGroup::default_instance());
  addplayer_ = const_cast< ::voice::AddPlayer*>(&::voice::AddPlayer::default_instance());
  removeplayer_ = const_cast< ::voice::RemovePlayer*>(&::voice::RemovePlayer::default_instance());
  destroygropu_ = const_cast< ::voice::DestroyGroup*>(&::voice::DestroyGroup::default_instance());
  adjustplayerattr_ = const_cast< ::voice::AdjustPlayerAttr*>(&::voice::AdjustPlayerAttr::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  handshake_ = NULL;
  creategroup_ = NULL;
  addplayer_ = NULL;
  removeplayer_ = NULL;
  destroygropu_ = NULL;
  adjustplayerattr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:voice.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete handshake_;
    delete creategroup_;
    delete addplayer_;
    delete removeplayer_;
    delete destroygropu_;
    delete adjustplayerattr_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 63u) {
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::voice::Handshake::Clear();
    }
    if (has_creategroup()) {
      if (creategroup_ != NULL) creategroup_->::voice::CreateGroup::Clear();
    }
    if (has_addplayer()) {
      if (addplayer_ != NULL) addplayer_->::voice::AddPlayer::Clear();
    }
    if (has_removeplayer()) {
      if (removeplayer_ != NULL) removeplayer_->::voice::RemovePlayer::Clear();
    }
    if (has_destroygropu()) {
      if (destroygropu_ != NULL) destroygropu_->::voice::DestroyGroup::Clear();
    }
    if (has_adjustplayerattr()) {
      if (adjustplayerattr_ != NULL) adjustplayerattr_->::voice::AdjustPlayerAttr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .voice.Handshake handshake = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createGroup;
        break;
      }

      // optional .voice.CreateGroup createGroup = 2;
      case 2: {
        if (tag == 18) {
         parse_createGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creategroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_addPlayer;
        break;
      }

      // optional .voice.AddPlayer addPlayer = 3;
      case 3: {
        if (tag == 26) {
         parse_addPlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_removePlayer;
        break;
      }

      // optional .voice.RemovePlayer removePlayer = 4;
      case 4: {
        if (tag == 34) {
         parse_removePlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_removeplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destroyGropu;
        break;
      }

      // optional .voice.DestroyGroup destroyGropu = 5;
      case 5: {
        if (tag == 42) {
         parse_destroyGropu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroygropu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adjustPlayerAttr;
        break;
      }

      // optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
      case 6: {
        if (tag == 50) {
         parse_adjustPlayerAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjustplayerattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.Request)
  // optional .voice.Handshake handshake = 1;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->handshake_, output);
  }

  // optional .voice.CreateGroup createGroup = 2;
  if (has_creategroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creategroup_, output);
  }

  // optional .voice.AddPlayer addPlayer = 3;
  if (has_addplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->addplayer_, output);
  }

  // optional .voice.RemovePlayer removePlayer = 4;
  if (has_removeplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->removeplayer_, output);
  }

  // optional .voice.DestroyGroup destroyGropu = 5;
  if (has_destroygropu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->destroygropu_, output);
  }

  // optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
  if (has_adjustplayerattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->adjustplayerattr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.Request)
  // optional .voice.Handshake handshake = 1;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->handshake_, target);
  }

  // optional .voice.CreateGroup createGroup = 2;
  if (has_creategroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->creategroup_, target);
  }

  // optional .voice.AddPlayer addPlayer = 3;
  if (has_addplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->addplayer_, target);
  }

  // optional .voice.RemovePlayer removePlayer = 4;
  if (has_removeplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->removeplayer_, target);
  }

  // optional .voice.DestroyGroup destroyGropu = 5;
  if (has_destroygropu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->destroygropu_, target);
  }

  // optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
  if (has_adjustplayerattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->adjustplayerattr_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .voice.Handshake handshake = 1;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->handshake_);
    }

    // optional .voice.CreateGroup createGroup = 2;
    if (has_creategroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creategroup_);
    }

    // optional .voice.AddPlayer addPlayer = 3;
    if (has_addplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->addplayer_);
    }

    // optional .voice.RemovePlayer removePlayer = 4;
    if (has_removeplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->removeplayer_);
    }

    // optional .voice.DestroyGroup destroyGropu = 5;
    if (has_destroygropu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destroygropu_);
    }

    // optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
    if (has_adjustplayerattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adjustplayerattr_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handshake()) {
      mutable_handshake()->::voice::Handshake::MergeFrom(from.handshake());
    }
    if (from.has_creategroup()) {
      mutable_creategroup()->::voice::CreateGroup::MergeFrom(from.creategroup());
    }
    if (from.has_addplayer()) {
      mutable_addplayer()->::voice::AddPlayer::MergeFrom(from.addplayer());
    }
    if (from.has_removeplayer()) {
      mutable_removeplayer()->::voice::RemovePlayer::MergeFrom(from.removeplayer());
    }
    if (from.has_destroygropu()) {
      mutable_destroygropu()->::voice::DestroyGroup::MergeFrom(from.destroygropu());
    }
    if (from.has_adjustplayerattr()) {
      mutable_adjustplayerattr()->::voice::AdjustPlayerAttr::MergeFrom(from.adjustplayerattr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(handshake_, other->handshake_);
  std::swap(creategroup_, other->creategroup_);
  std::swap(addplayer_, other->addplayer_);
  std::swap(removeplayer_, other->removeplayer_);
  std::swap(destroygropu_, other->destroygropu_);
  std::swap(adjustplayerattr_, other->adjustplayerattr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .voice.Handshake handshake = 1;
bool Request::has_handshake() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_handshake() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_handshake() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_handshake() {
  if (handshake_ != NULL) handshake_->::voice::Handshake::Clear();
  clear_has_handshake();
}
const ::voice::Handshake& Request::handshake() const {
  // @@protoc_insertion_point(field_get:voice.Request.handshake)
  return handshake_ != NULL ? *handshake_ : *default_instance_->handshake_;
}
::voice::Handshake* Request::mutable_handshake() {
  set_has_handshake();
  if (handshake_ == NULL) {
    handshake_ = new ::voice::Handshake;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.handshake)
  return handshake_;
}
::voice::Handshake* Request::release_handshake() {
  clear_has_handshake();
  ::voice::Handshake* temp = handshake_;
  handshake_ = NULL;
  return temp;
}
void Request::set_allocated_handshake(::voice::Handshake* handshake) {
  delete handshake_;
  handshake_ = handshake;
  if (handshake) {
    set_has_handshake();
  } else {
    clear_has_handshake();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.handshake)
}

// optional .voice.CreateGroup createGroup = 2;
bool Request::has_creategroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_creategroup() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_creategroup() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_creategroup() {
  if (creategroup_ != NULL) creategroup_->::voice::CreateGroup::Clear();
  clear_has_creategroup();
}
const ::voice::CreateGroup& Request::creategroup() const {
  // @@protoc_insertion_point(field_get:voice.Request.createGroup)
  return creategroup_ != NULL ? *creategroup_ : *default_instance_->creategroup_;
}
::voice::CreateGroup* Request::mutable_creategroup() {
  set_has_creategroup();
  if (creategroup_ == NULL) {
    creategroup_ = new ::voice::CreateGroup;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.createGroup)
  return creategroup_;
}
::voice::CreateGroup* Request::release_creategroup() {
  clear_has_creategroup();
  ::voice::CreateGroup* temp = creategroup_;
  creategroup_ = NULL;
  return temp;
}
void Request::set_allocated_creategroup(::voice::CreateGroup* creategroup) {
  delete creategroup_;
  creategroup_ = creategroup;
  if (creategroup) {
    set_has_creategroup();
  } else {
    clear_has_creategroup();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.createGroup)
}

// optional .voice.AddPlayer addPlayer = 3;
bool Request::has_addplayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_addplayer() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_addplayer() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_addplayer() {
  if (addplayer_ != NULL) addplayer_->::voice::AddPlayer::Clear();
  clear_has_addplayer();
}
const ::voice::AddPlayer& Request::addplayer() const {
  // @@protoc_insertion_point(field_get:voice.Request.addPlayer)
  return addplayer_ != NULL ? *addplayer_ : *default_instance_->addplayer_;
}
::voice::AddPlayer* Request::mutable_addplayer() {
  set_has_addplayer();
  if (addplayer_ == NULL) {
    addplayer_ = new ::voice::AddPlayer;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.addPlayer)
  return addplayer_;
}
::voice::AddPlayer* Request::release_addplayer() {
  clear_has_addplayer();
  ::voice::AddPlayer* temp = addplayer_;
  addplayer_ = NULL;
  return temp;
}
void Request::set_allocated_addplayer(::voice::AddPlayer* addplayer) {
  delete addplayer_;
  addplayer_ = addplayer;
  if (addplayer) {
    set_has_addplayer();
  } else {
    clear_has_addplayer();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.addPlayer)
}

// optional .voice.RemovePlayer removePlayer = 4;
bool Request::has_removeplayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_removeplayer() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_removeplayer() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_removeplayer() {
  if (removeplayer_ != NULL) removeplayer_->::voice::RemovePlayer::Clear();
  clear_has_removeplayer();
}
const ::voice::RemovePlayer& Request::removeplayer() const {
  // @@protoc_insertion_point(field_get:voice.Request.removePlayer)
  return removeplayer_ != NULL ? *removeplayer_ : *default_instance_->removeplayer_;
}
::voice::RemovePlayer* Request::mutable_removeplayer() {
  set_has_removeplayer();
  if (removeplayer_ == NULL) {
    removeplayer_ = new ::voice::RemovePlayer;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.removePlayer)
  return removeplayer_;
}
::voice::RemovePlayer* Request::release_removeplayer() {
  clear_has_removeplayer();
  ::voice::RemovePlayer* temp = removeplayer_;
  removeplayer_ = NULL;
  return temp;
}
void Request::set_allocated_removeplayer(::voice::RemovePlayer* removeplayer) {
  delete removeplayer_;
  removeplayer_ = removeplayer;
  if (removeplayer) {
    set_has_removeplayer();
  } else {
    clear_has_removeplayer();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.removePlayer)
}

// optional .voice.DestroyGroup destroyGropu = 5;
bool Request::has_destroygropu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_destroygropu() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_destroygropu() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_destroygropu() {
  if (destroygropu_ != NULL) destroygropu_->::voice::DestroyGroup::Clear();
  clear_has_destroygropu();
}
const ::voice::DestroyGroup& Request::destroygropu() const {
  // @@protoc_insertion_point(field_get:voice.Request.destroyGropu)
  return destroygropu_ != NULL ? *destroygropu_ : *default_instance_->destroygropu_;
}
::voice::DestroyGroup* Request::mutable_destroygropu() {
  set_has_destroygropu();
  if (destroygropu_ == NULL) {
    destroygropu_ = new ::voice::DestroyGroup;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.destroyGropu)
  return destroygropu_;
}
::voice::DestroyGroup* Request::release_destroygropu() {
  clear_has_destroygropu();
  ::voice::DestroyGroup* temp = destroygropu_;
  destroygropu_ = NULL;
  return temp;
}
void Request::set_allocated_destroygropu(::voice::DestroyGroup* destroygropu) {
  delete destroygropu_;
  destroygropu_ = destroygropu;
  if (destroygropu) {
    set_has_destroygropu();
  } else {
    clear_has_destroygropu();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.destroyGropu)
}

// optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
bool Request::has_adjustplayerattr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_adjustplayerattr() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_adjustplayerattr() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_adjustplayerattr() {
  if (adjustplayerattr_ != NULL) adjustplayerattr_->::voice::AdjustPlayerAttr::Clear();
  clear_has_adjustplayerattr();
}
const ::voice::AdjustPlayerAttr& Request::adjustplayerattr() const {
  // @@protoc_insertion_point(field_get:voice.Request.adjustPlayerAttr)
  return adjustplayerattr_ != NULL ? *adjustplayerattr_ : *default_instance_->adjustplayerattr_;
}
::voice::AdjustPlayerAttr* Request::mutable_adjustplayerattr() {
  set_has_adjustplayerattr();
  if (adjustplayerattr_ == NULL) {
    adjustplayerattr_ = new ::voice::AdjustPlayerAttr;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.adjustPlayerAttr)
  return adjustplayerattr_;
}
::voice::AdjustPlayerAttr* Request::release_adjustplayerattr() {
  clear_has_adjustplayerattr();
  ::voice::AdjustPlayerAttr* temp = adjustplayerattr_;
  adjustplayerattr_ = NULL;
  return temp;
}
void Request::set_allocated_adjustplayerattr(::voice::AdjustPlayerAttr* adjustplayerattr) {
  delete adjustplayerattr_;
  adjustplayerattr_ = adjustplayerattr;
  if (adjustplayerattr) {
    set_has_adjustplayerattr();
  } else {
    clear_has_adjustplayerattr();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.adjustPlayerAttr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCodeFieldNumber;
const int Response::kErrMsgFieldNumber;
const int Response::kHandshakeAckFieldNumber;
const int Response::kAddPlayerAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.Response)
}

void Response::InitAsDefaultInstance() {
  handshakeack_ = const_cast< ::voice::HandshakeAck*>(&::voice::HandshakeAck::default_instance());
  addplayerack_ = const_cast< ::voice::AddPlayerAck*>(&::voice::AddPlayerAck::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handshakeack_ = NULL;
  addplayerack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:voice.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete handshakeack_;
    delete addplayerack_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    code_ = 0;
    if (has_errmsg()) {
      errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_handshakeack()) {
      if (handshakeack_ != NULL) handshakeack_->::voice::HandshakeAck::Clear();
    }
    if (has_addplayerack()) {
      if (addplayerack_ != NULL) addplayerack_->::voice::AddPlayerAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .voice.ACK Code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::voice::ACK_IsValid(value)) {
            set_code(static_cast< ::voice::ACK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ErrMsg;
        break;
      }

      // optional string ErrMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_ErrMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voice.Response.ErrMsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_handshakeAck;
        break;
      }

      // optional .voice.HandshakeAck handshakeAck = 3;
      case 3: {
        if (tag == 26) {
         parse_handshakeAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshakeack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addPlayerAck;
        break;
      }

      // optional .voice.AddPlayerAck addPlayerAck = 4;
      case 4: {
        if (tag == 34) {
         parse_addPlayerAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addplayerack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.Response)
  // optional .voice.ACK Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string ErrMsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice.Response.ErrMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional .voice.HandshakeAck handshakeAck = 3;
  if (has_handshakeack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->handshakeack_, output);
  }

  // optional .voice.AddPlayerAck addPlayerAck = 4;
  if (has_addplayerack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->addplayerack_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.Response)
  // optional .voice.ACK Code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string ErrMsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice.Response.ErrMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional .voice.HandshakeAck handshakeAck = 3;
  if (has_handshakeack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->handshakeack_, target);
  }

  // optional .voice.AddPlayerAck addPlayerAck = 4;
  if (has_addplayerack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->addplayerack_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .voice.ACK Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string ErrMsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional .voice.HandshakeAck handshakeAck = 3;
    if (has_handshakeack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->handshakeack_);
    }

    // optional .voice.AddPlayerAck addPlayerAck = 4;
    if (has_addplayerack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->addplayerack_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_errmsg()) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (from.has_handshakeack()) {
      mutable_handshakeack()->::voice::HandshakeAck::MergeFrom(from.handshakeack());
    }
    if (from.has_addplayerack()) {
      mutable_addplayerack()->::voice::AddPlayerAck::MergeFrom(from.addplayerack());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(code_, other->code_);
  errmsg_.Swap(&other->errmsg_);
  std::swap(handshakeack_, other->handshakeack_);
  std::swap(addplayerack_, other->addplayerack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .voice.ACK Code = 1;
bool Response::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::voice::ACK Response::code() const {
  // @@protoc_insertion_point(field_get:voice.Response.Code)
  return static_cast< ::voice::ACK >(code_);
}
 void Response::set_code(::voice::ACK value) {
  assert(::voice::ACK_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:voice.Response.Code)
}

// optional string ErrMsg = 2;
bool Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
 const ::std::string& Response::errmsg() const {
  // @@protoc_insertion_point(field_get:voice.Response.ErrMsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:voice.Response.ErrMsg)
}
 void Response::set_errmsg(const char* value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:voice.Response.ErrMsg)
}
 void Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:voice.Response.ErrMsg)
}
 ::std::string* Response::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:voice.Response.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_errmsg() {
  clear_has_errmsg();
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:voice.Response.ErrMsg)
}

// optional .voice.HandshakeAck handshakeAck = 3;
bool Response::has_handshakeack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_handshakeack() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_handshakeack() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_handshakeack() {
  if (handshakeack_ != NULL) handshakeack_->::voice::HandshakeAck::Clear();
  clear_has_handshakeack();
}
const ::voice::HandshakeAck& Response::handshakeack() const {
  // @@protoc_insertion_point(field_get:voice.Response.handshakeAck)
  return handshakeack_ != NULL ? *handshakeack_ : *default_instance_->handshakeack_;
}
::voice::HandshakeAck* Response::mutable_handshakeack() {
  set_has_handshakeack();
  if (handshakeack_ == NULL) {
    handshakeack_ = new ::voice::HandshakeAck;
  }
  // @@protoc_insertion_point(field_mutable:voice.Response.handshakeAck)
  return handshakeack_;
}
::voice::HandshakeAck* Response::release_handshakeack() {
  clear_has_handshakeack();
  ::voice::HandshakeAck* temp = handshakeack_;
  handshakeack_ = NULL;
  return temp;
}
void Response::set_allocated_handshakeack(::voice::HandshakeAck* handshakeack) {
  delete handshakeack_;
  handshakeack_ = handshakeack;
  if (handshakeack) {
    set_has_handshakeack();
  } else {
    clear_has_handshakeack();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Response.handshakeAck)
}

// optional .voice.AddPlayerAck addPlayerAck = 4;
bool Response::has_addplayerack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_addplayerack() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_addplayerack() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_addplayerack() {
  if (addplayerack_ != NULL) addplayerack_->::voice::AddPlayerAck::Clear();
  clear_has_addplayerack();
}
const ::voice::AddPlayerAck& Response::addplayerack() const {
  // @@protoc_insertion_point(field_get:voice.Response.addPlayerAck)
  return addplayerack_ != NULL ? *addplayerack_ : *default_instance_->addplayerack_;
}
::voice::AddPlayerAck* Response::mutable_addplayerack() {
  set_has_addplayerack();
  if (addplayerack_ == NULL) {
    addplayerack_ = new ::voice::AddPlayerAck;
  }
  // @@protoc_insertion_point(field_mutable:voice.Response.addPlayerAck)
  return addplayerack_;
}
::voice::AddPlayerAck* Response::release_addplayerack() {
  clear_has_addplayerack();
  ::voice::AddPlayerAck* temp = addplayerack_;
  addplayerack_ = NULL;
  return temp;
}
void Response::set_allocated_addplayerack(::voice::AddPlayerAck* addplayerack) {
  delete addplayerack_;
  addplayerack_ = addplayerack;
  if (addplayerack) {
    set_has_addplayerack();
  } else {
    clear_has_addplayerack();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Response.addPlayerAck)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMessageIdFieldNumber;
const int Message::kMessageLenFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:voice.Message)
}

void Message::InitAsDefaultInstance() {
  request_ = const_cast< ::voice::Request*>(&::voice::Request::default_instance());
  response_ = const_cast< ::voice::Response*>(&::voice::Response::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:voice.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = 0;
  messagelen_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:voice.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Message*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(messageid_, messagelen_);
    if (has_request()) {
      if (request_ != NULL) request_->::voice::Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::voice::Response::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voice.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .voice.MSG messageId = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::voice::MSG_IsValid(value)) {
            set_messageid(static_cast< ::voice::MSG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_messageLen;
        break;
      }

      // optional int32 messageLen = 2;
      case 2: {
        if (tag == 16) {
         parse_messageLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagelen_)));
          set_has_messagelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .voice.Request request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response;
        break;
      }

      // optional .voice.Response response = 4;
      case 4: {
        if (tag == 34) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voice.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voice.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voice.Message)
  // optional .voice.MSG messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messageid(), output);
  }

  // optional int32 messageLen = 2;
  if (has_messagelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messagelen(), output);
  }

  // optional .voice.Request request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_, output);
  }

  // optional .voice.Response response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voice.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:voice.Message)
  // optional .voice.MSG messageId = 1;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messageid(), target);
  }

  // optional int32 messageLen = 2;
  if (has_messagelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messagelen(), target);
  }

  // optional .voice.Request request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->request_, target);
  }

  // optional .voice.Response response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->response_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voice.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .voice.MSG messageId = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messageid());
    }

    // optional int32 messageLen = 2;
    if (has_messagelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagelen());
    }

    // optional .voice.Request request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .voice.Response response = 4;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_messagelen()) {
      set_messagelen(from.messagelen());
    }
    if (from.has_request()) {
      mutable_request()->::voice::Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::voice::Response::MergeFrom(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(messageid_, other->messageid_);
  std::swap(messagelen_, other->messagelen_);
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .voice.MSG messageId = 1;
bool Message::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
 ::voice::MSG Message::messageid() const {
  // @@protoc_insertion_point(field_get:voice.Message.messageId)
  return static_cast< ::voice::MSG >(messageid_);
}
 void Message::set_messageid(::voice::MSG value) {
  assert(::voice::MSG_IsValid(value));
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:voice.Message.messageId)
}

// optional int32 messageLen = 2;
bool Message::has_messagelen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_messagelen() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_messagelen() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_messagelen() {
  messagelen_ = 0;
  clear_has_messagelen();
}
 ::google::protobuf::int32 Message::messagelen() const {
  // @@protoc_insertion_point(field_get:voice.Message.messageLen)
  return messagelen_;
}
 void Message::set_messagelen(::google::protobuf::int32 value) {
  set_has_messagelen();
  messagelen_ = value;
  // @@protoc_insertion_point(field_set:voice.Message.messageLen)
}

// optional .voice.Request request = 3;
bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_request() {
  if (request_ != NULL) request_->::voice::Request::Clear();
  clear_has_request();
}
const ::voice::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:voice.Message.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::voice::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::voice::Request;
  }
  // @@protoc_insertion_point(field_mutable:voice.Message.request)
  return request_;
}
::voice::Request* Message::release_request() {
  clear_has_request();
  ::voice::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void Message::set_allocated_request(::voice::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Message.request)
}

// optional .voice.Response response = 4;
bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_response() {
  if (response_ != NULL) response_->::voice::Response::Clear();
  clear_has_response();
}
const ::voice::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:voice.Message.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::voice::Response* Message::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::voice::Response;
  }
  // @@protoc_insertion_point(field_mutable:voice.Message.response)
  return response_;
}
::voice::Response* Message::release_response() {
  clear_has_response();
  ::voice::Response* temp = response_;
  response_ = NULL;
  return temp;
}
void Message::set_allocated_response(::voice::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Message.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace voice

// @@protoc_insertion_point(global_scope)
