// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace voice {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class AddPlayer;
class AddPlayerAck;
class AdjustPlayerAttr;
class CreateGroup;
class DestroyGroup;
class Handshake;
class HandshakeAck;
class Message;
class RemovePlayer;
class Request;
class Response;

enum MSG {
  PKT_NONE = 0,
  PKT_HANDSHAKE = 1,
  PKT_HANDSHAKE_ACK = 2,
  PKT_CREATE_GROUP = 3,
  PKT_ADD_PLAYER = 4,
  PKT_ADD_PLAYER_ACK = 5,
  PKT_REMOVE_PLAYER = 6,
  PKT_DESTROY_GROUP = 7,
  PKT_ADJUST_PLAYER_ATTR = 8,
  PKT_ADJUST_GROUP_ATTR = 9
};
bool MSG_IsValid(int value);
const MSG MSG_MIN = PKT_NONE;
const MSG MSG_MAX = PKT_ADJUST_GROUP_ATTR;
const int MSG_ARRAYSIZE = MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_descriptor();
inline const ::std::string& MSG_Name(MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_descriptor(), value);
}
inline bool MSG_Parse(
    const ::std::string& name, MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG>(
    MSG_descriptor(), name, value);
}
enum ACK {
  ACK_OK = 0,
  ACK_HANDSHAKE_FAILED = 1,
  ACK_ADD_PLAYER_FAILED = 2
};
bool ACK_IsValid(int value);
const ACK ACK_MIN = ACK_OK;
const ACK ACK_MAX = ACK_ADD_PLAYER_FAILED;
const int ACK_ARRAYSIZE = ACK_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACK_descriptor();
inline const ::std::string& ACK_Name(ACK value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACK_descriptor(), value);
}
inline bool ACK_Parse(
    const ::std::string& name, ACK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACK>(
    ACK_descriptor(), name, value);
}
// ===================================================================

class Handshake : public ::google::protobuf::Message {
 public:
  Handshake();
  virtual ~Handshake();

  Handshake(const Handshake& from);

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handshake& default_instance();

  void Swap(Handshake* other);

  // implements Message ----------------------------------------------

  inline Handshake* New() const { return New(NULL); }

  Handshake* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Handshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ProductKey = 1;
  bool has_productkey() const;
  void clear_productkey();
  static const int kProductKeyFieldNumber = 1;
  const ::std::string& productkey() const;
  void set_productkey(const ::std::string& value);
  void set_productkey(const char* value);
  void set_productkey(const char* value, size_t size);
  ::std::string* mutable_productkey();
  ::std::string* release_productkey();
  void set_allocated_productkey(::std::string* productkey);

  // @@protoc_insertion_point(class_scope:voice.Handshake)
 private:
  inline void set_has_productkey();
  inline void clear_has_productkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr productkey_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Handshake* default_instance_;
};
// -------------------------------------------------------------------

class HandshakeAck : public ::google::protobuf::Message {
 public:
  HandshakeAck();
  virtual ~HandshakeAck();

  HandshakeAck(const HandshakeAck& from);

  inline HandshakeAck& operator=(const HandshakeAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandshakeAck& default_instance();

  void Swap(HandshakeAck* other);

  // implements Message ----------------------------------------------

  inline HandshakeAck* New() const { return New(NULL); }

  HandshakeAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandshakeAck& from);
  void MergeFrom(const HandshakeAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandshakeAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:voice.HandshakeAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static HandshakeAck* default_instance_;
};
// -------------------------------------------------------------------

class CreateGroup : public ::google::protobuf::Message {
 public:
  CreateGroup();
  virtual ~CreateGroup();

  CreateGroup(const CreateGroup& from);

  inline CreateGroup& operator=(const CreateGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroup& default_instance();

  void Swap(CreateGroup* other);

  // implements Message ----------------------------------------------

  inline CreateGroup* New() const { return New(NULL); }

  CreateGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGroup& from);
  void MergeFrom(const CreateGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:voice.CreateGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 groupid_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CreateGroup* default_instance_;
};
// -------------------------------------------------------------------

class AddPlayer : public ::google::protobuf::Message {
 public:
  AddPlayer();
  virtual ~AddPlayer();

  AddPlayer(const AddPlayer& from);

  inline AddPlayer& operator=(const AddPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPlayer& default_instance();

  void Swap(AddPlayer* other);

  // implements Message ----------------------------------------------

  inline AddPlayer* New() const { return New(NULL); }

  AddPlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPlayer& from);
  void MergeFrom(const AddPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // optional uint64 playerId = 2;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 canSpeak = 3;
  bool has_canspeak() const;
  void clear_canspeak();
  static const int kCanSpeakFieldNumber = 3;
  ::google::protobuf::uint32 canspeak() const;
  void set_canspeak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:voice.AddPlayer)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_canspeak();
  inline void clear_has_canspeak();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 canspeak_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AddPlayer* default_instance_;
};
// -------------------------------------------------------------------

class AddPlayerAck : public ::google::protobuf::Message {
 public:
  AddPlayerAck();
  virtual ~AddPlayerAck();

  AddPlayerAck(const AddPlayerAck& from);

  inline AddPlayerAck& operator=(const AddPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPlayerAck& default_instance();

  void Swap(AddPlayerAck* other);

  // implements Message ----------------------------------------------

  inline AddPlayerAck* New() const { return New(NULL); }

  AddPlayerAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPlayerAck& from);
  void MergeFrom(const AddPlayerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddPlayerAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // optional uint64 playerId = 2;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 playerIndex = 3;
  bool has_playerindex() const;
  void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 3;
  ::google::protobuf::uint32 playerindex() const;
  void set_playerindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:voice.AddPlayerAck)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerindex();
  inline void clear_has_playerindex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 playerindex_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AddPlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class RemovePlayer : public ::google::protobuf::Message {
 public:
  RemovePlayer();
  virtual ~RemovePlayer();

  RemovePlayer(const RemovePlayer& from);

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePlayer& default_instance();

  void Swap(RemovePlayer* other);

  // implements Message ----------------------------------------------

  inline RemovePlayer* New() const { return New(NULL); }

  RemovePlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePlayer& from);
  void MergeFrom(const RemovePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemovePlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // optional uint64 playerId = 2;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:voice.RemovePlayer)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 playerid_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RemovePlayer* default_instance_;
};
// -------------------------------------------------------------------

class DestroyGroup : public ::google::protobuf::Message {
 public:
  DestroyGroup();
  virtual ~DestroyGroup();

  DestroyGroup(const DestroyGroup& from);

  inline DestroyGroup& operator=(const DestroyGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyGroup& default_instance();

  void Swap(DestroyGroup* other);

  // implements Message ----------------------------------------------

  inline DestroyGroup* New() const { return New(NULL); }

  DestroyGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DestroyGroup& from);
  void MergeFrom(const DestroyGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DestroyGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:voice.DestroyGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 groupid_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static DestroyGroup* default_instance_;
};
// -------------------------------------------------------------------

class AdjustPlayerAttr : public ::google::protobuf::Message {
 public:
  AdjustPlayerAttr();
  virtual ~AdjustPlayerAttr();

  AdjustPlayerAttr(const AdjustPlayerAttr& from);

  inline AdjustPlayerAttr& operator=(const AdjustPlayerAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdjustPlayerAttr& default_instance();

  void Swap(AdjustPlayerAttr* other);

  // implements Message ----------------------------------------------

  inline AdjustPlayerAttr* New() const { return New(NULL); }

  AdjustPlayerAttr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdjustPlayerAttr& from);
  void MergeFrom(const AdjustPlayerAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdjustPlayerAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerId = 1;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 canSpeak = 2;
  bool has_canspeak() const;
  void clear_canspeak();
  static const int kCanSpeakFieldNumber = 2;
  ::google::protobuf::uint32 canspeak() const;
  void set_canspeak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:voice.AdjustPlayerAttr)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_canspeak();
  inline void clear_has_canspeak();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 canspeak_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AdjustPlayerAttr* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .voice.Handshake handshake = 1;
  bool has_handshake() const;
  void clear_handshake();
  static const int kHandshakeFieldNumber = 1;
  const ::voice::Handshake& handshake() const;
  ::voice::Handshake* mutable_handshake();
  ::voice::Handshake* release_handshake();
  void set_allocated_handshake(::voice::Handshake* handshake);

  // optional .voice.CreateGroup createGroup = 2;
  bool has_creategroup() const;
  void clear_creategroup();
  static const int kCreateGroupFieldNumber = 2;
  const ::voice::CreateGroup& creategroup() const;
  ::voice::CreateGroup* mutable_creategroup();
  ::voice::CreateGroup* release_creategroup();
  void set_allocated_creategroup(::voice::CreateGroup* creategroup);

  // optional .voice.AddPlayer addPlayer = 3;
  bool has_addplayer() const;
  void clear_addplayer();
  static const int kAddPlayerFieldNumber = 3;
  const ::voice::AddPlayer& addplayer() const;
  ::voice::AddPlayer* mutable_addplayer();
  ::voice::AddPlayer* release_addplayer();
  void set_allocated_addplayer(::voice::AddPlayer* addplayer);

  // optional .voice.RemovePlayer removePlayer = 4;
  bool has_removeplayer() const;
  void clear_removeplayer();
  static const int kRemovePlayerFieldNumber = 4;
  const ::voice::RemovePlayer& removeplayer() const;
  ::voice::RemovePlayer* mutable_removeplayer();
  ::voice::RemovePlayer* release_removeplayer();
  void set_allocated_removeplayer(::voice::RemovePlayer* removeplayer);

  // optional .voice.DestroyGroup destroyGropu = 5;
  bool has_destroygropu() const;
  void clear_destroygropu();
  static const int kDestroyGropuFieldNumber = 5;
  const ::voice::DestroyGroup& destroygropu() const;
  ::voice::DestroyGroup* mutable_destroygropu();
  ::voice::DestroyGroup* release_destroygropu();
  void set_allocated_destroygropu(::voice::DestroyGroup* destroygropu);

  // optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
  bool has_adjustplayerattr() const;
  void clear_adjustplayerattr();
  static const int kAdjustPlayerAttrFieldNumber = 6;
  const ::voice::AdjustPlayerAttr& adjustplayerattr() const;
  ::voice::AdjustPlayerAttr* mutable_adjustplayerattr();
  ::voice::AdjustPlayerAttr* release_adjustplayerattr();
  void set_allocated_adjustplayerattr(::voice::AdjustPlayerAttr* adjustplayerattr);

  // @@protoc_insertion_point(class_scope:voice.Request)
 private:
  inline void set_has_handshake();
  inline void clear_has_handshake();
  inline void set_has_creategroup();
  inline void clear_has_creategroup();
  inline void set_has_addplayer();
  inline void clear_has_addplayer();
  inline void set_has_removeplayer();
  inline void clear_has_removeplayer();
  inline void set_has_destroygropu();
  inline void clear_has_destroygropu();
  inline void set_has_adjustplayerattr();
  inline void clear_has_adjustplayerattr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::voice::Handshake* handshake_;
  ::voice::CreateGroup* creategroup_;
  ::voice::AddPlayer* addplayer_;
  ::voice::RemovePlayer* removeplayer_;
  ::voice::DestroyGroup* destroygropu_;
  ::voice::AdjustPlayerAttr* adjustplayerattr_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .voice.ACK Code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::voice::ACK code() const;
  void set_code(::voice::ACK value);

  // optional string ErrMsg = 2;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // optional .voice.HandshakeAck handshakeAck = 3;
  bool has_handshakeack() const;
  void clear_handshakeack();
  static const int kHandshakeAckFieldNumber = 3;
  const ::voice::HandshakeAck& handshakeack() const;
  ::voice::HandshakeAck* mutable_handshakeack();
  ::voice::HandshakeAck* release_handshakeack();
  void set_allocated_handshakeack(::voice::HandshakeAck* handshakeack);

  // optional .voice.AddPlayerAck addPlayerAck = 4;
  bool has_addplayerack() const;
  void clear_addplayerack();
  static const int kAddPlayerAckFieldNumber = 4;
  const ::voice::AddPlayerAck& addplayerack() const;
  ::voice::AddPlayerAck* mutable_addplayerack();
  ::voice::AddPlayerAck* release_addplayerack();
  void set_allocated_addplayerack(::voice::AddPlayerAck* addplayerack);

  // @@protoc_insertion_point(class_scope:voice.Response)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_handshakeack();
  inline void clear_has_handshakeack();
  inline void set_has_addplayerack();
  inline void clear_has_addplayerack();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::voice::HandshakeAck* handshakeack_;
  ::voice::AddPlayerAck* addplayerack_;
  int code_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .voice.MSG messageId = 1;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  ::voice::MSG messageid() const;
  void set_messageid(::voice::MSG value);

  // optional int32 messageLen = 2;
  bool has_messagelen() const;
  void clear_messagelen();
  static const int kMessageLenFieldNumber = 2;
  ::google::protobuf::int32 messagelen() const;
  void set_messagelen(::google::protobuf::int32 value);

  // optional .voice.Request request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  const ::voice::Request& request() const;
  ::voice::Request* mutable_request();
  ::voice::Request* release_request();
  void set_allocated_request(::voice::Request* request);

  // optional .voice.Response response = 4;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 4;
  const ::voice::Response& response() const;
  ::voice::Response* mutable_response();
  ::voice::Response* release_response();
  void set_allocated_response(::voice::Response* response);

  // @@protoc_insertion_point(class_scope:voice.Message)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_messagelen();
  inline void clear_has_messagelen();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int messageid_;
  ::google::protobuf::int32 messagelen_;
  ::voice::Request* request_;
  ::voice::Response* response_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Handshake

// optional string ProductKey = 1;
inline bool Handshake::has_productkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Handshake::set_has_productkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Handshake::clear_has_productkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Handshake::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productkey();
}
inline const ::std::string& Handshake::productkey() const {
  // @@protoc_insertion_point(field_get:voice.Handshake.ProductKey)
  return productkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_productkey(const ::std::string& value) {
  set_has_productkey();
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:voice.Handshake.ProductKey)
}
inline void Handshake::set_productkey(const char* value) {
  set_has_productkey();
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:voice.Handshake.ProductKey)
}
inline void Handshake::set_productkey(const char* value, size_t size) {
  set_has_productkey();
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:voice.Handshake.ProductKey)
}
inline ::std::string* Handshake::mutable_productkey() {
  set_has_productkey();
  // @@protoc_insertion_point(field_mutable:voice.Handshake.ProductKey)
  return productkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handshake::release_productkey() {
  clear_has_productkey();
  return productkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_allocated_productkey(::std::string* productkey) {
  if (productkey != NULL) {
    set_has_productkey();
  } else {
    clear_has_productkey();
  }
  productkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:voice.Handshake.ProductKey)
}

// -------------------------------------------------------------------

// HandshakeAck

// -------------------------------------------------------------------

// CreateGroup

// optional uint64 groupId = 1;
inline bool CreateGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CreateGroup::groupid() const {
  // @@protoc_insertion_point(field_get:voice.CreateGroup.groupId)
  return groupid_;
}
inline void CreateGroup::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.CreateGroup.groupId)
}

// -------------------------------------------------------------------

// AddPlayer

// optional uint64 groupId = 1;
inline bool AddPlayer::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddPlayer::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddPlayer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddPlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 AddPlayer::groupid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayer.groupId)
  return groupid_;
}
inline void AddPlayer::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayer.groupId)
}

// optional uint64 playerId = 2;
inline bool AddPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 AddPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayer.playerId)
  return playerid_;
}
inline void AddPlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayer.playerId)
}

// optional uint32 canSpeak = 3;
inline bool AddPlayer::has_canspeak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddPlayer::set_has_canspeak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddPlayer::clear_has_canspeak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddPlayer::clear_canspeak() {
  canspeak_ = 0u;
  clear_has_canspeak();
}
inline ::google::protobuf::uint32 AddPlayer::canspeak() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayer.canSpeak)
  return canspeak_;
}
inline void AddPlayer::set_canspeak(::google::protobuf::uint32 value) {
  set_has_canspeak();
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayer.canSpeak)
}

// -------------------------------------------------------------------

// AddPlayerAck

// optional uint64 groupId = 1;
inline bool AddPlayerAck::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddPlayerAck::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddPlayerAck::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddPlayerAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 AddPlayerAck::groupid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayerAck.groupId)
  return groupid_;
}
inline void AddPlayerAck::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayerAck.groupId)
}

// optional uint64 playerId = 2;
inline bool AddPlayerAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddPlayerAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddPlayerAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddPlayerAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 AddPlayerAck::playerid() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayerAck.playerId)
  return playerid_;
}
inline void AddPlayerAck::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayerAck.playerId)
}

// optional uint32 playerIndex = 3;
inline bool AddPlayerAck::has_playerindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddPlayerAck::set_has_playerindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddPlayerAck::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddPlayerAck::clear_playerindex() {
  playerindex_ = 0u;
  clear_has_playerindex();
}
inline ::google::protobuf::uint32 AddPlayerAck::playerindex() const {
  // @@protoc_insertion_point(field_get:voice.AddPlayerAck.playerIndex)
  return playerindex_;
}
inline void AddPlayerAck::set_playerindex(::google::protobuf::uint32 value) {
  set_has_playerindex();
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:voice.AddPlayerAck.playerIndex)
}

// -------------------------------------------------------------------

// RemovePlayer

// optional uint64 groupId = 1;
inline bool RemovePlayer::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemovePlayer::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemovePlayer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemovePlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 RemovePlayer::groupid() const {
  // @@protoc_insertion_point(field_get:voice.RemovePlayer.groupId)
  return groupid_;
}
inline void RemovePlayer::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.RemovePlayer.groupId)
}

// optional uint64 playerId = 2;
inline bool RemovePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemovePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemovePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemovePlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 RemovePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:voice.RemovePlayer.playerId)
  return playerid_;
}
inline void RemovePlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.RemovePlayer.playerId)
}

// -------------------------------------------------------------------

// DestroyGroup

// optional uint64 groupId = 1;
inline bool DestroyGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DestroyGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DestroyGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DestroyGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 DestroyGroup::groupid() const {
  // @@protoc_insertion_point(field_get:voice.DestroyGroup.groupId)
  return groupid_;
}
inline void DestroyGroup::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:voice.DestroyGroup.groupId)
}

// -------------------------------------------------------------------

// AdjustPlayerAttr

// optional uint64 playerId = 1;
inline bool AdjustPlayerAttr::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdjustPlayerAttr::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdjustPlayerAttr::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdjustPlayerAttr::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 AdjustPlayerAttr::playerid() const {
  // @@protoc_insertion_point(field_get:voice.AdjustPlayerAttr.playerId)
  return playerid_;
}
inline void AdjustPlayerAttr::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:voice.AdjustPlayerAttr.playerId)
}

// optional uint32 canSpeak = 2;
inline bool AdjustPlayerAttr::has_canspeak() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdjustPlayerAttr::set_has_canspeak() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdjustPlayerAttr::clear_has_canspeak() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdjustPlayerAttr::clear_canspeak() {
  canspeak_ = 0u;
  clear_has_canspeak();
}
inline ::google::protobuf::uint32 AdjustPlayerAttr::canspeak() const {
  // @@protoc_insertion_point(field_get:voice.AdjustPlayerAttr.canSpeak)
  return canspeak_;
}
inline void AdjustPlayerAttr::set_canspeak(::google::protobuf::uint32 value) {
  set_has_canspeak();
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:voice.AdjustPlayerAttr.canSpeak)
}

// -------------------------------------------------------------------

// Request

// optional .voice.Handshake handshake = 1;
inline bool Request::has_handshake() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_handshake() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_handshake() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_handshake() {
  if (handshake_ != NULL) handshake_->::voice::Handshake::Clear();
  clear_has_handshake();
}
inline const ::voice::Handshake& Request::handshake() const {
  // @@protoc_insertion_point(field_get:voice.Request.handshake)
  return handshake_ != NULL ? *handshake_ : *default_instance_->handshake_;
}
inline ::voice::Handshake* Request::mutable_handshake() {
  set_has_handshake();
  if (handshake_ == NULL) {
    handshake_ = new ::voice::Handshake;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.handshake)
  return handshake_;
}
inline ::voice::Handshake* Request::release_handshake() {
  clear_has_handshake();
  ::voice::Handshake* temp = handshake_;
  handshake_ = NULL;
  return temp;
}
inline void Request::set_allocated_handshake(::voice::Handshake* handshake) {
  delete handshake_;
  handshake_ = handshake;
  if (handshake) {
    set_has_handshake();
  } else {
    clear_has_handshake();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.handshake)
}

// optional .voice.CreateGroup createGroup = 2;
inline bool Request::has_creategroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_creategroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_creategroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_creategroup() {
  if (creategroup_ != NULL) creategroup_->::voice::CreateGroup::Clear();
  clear_has_creategroup();
}
inline const ::voice::CreateGroup& Request::creategroup() const {
  // @@protoc_insertion_point(field_get:voice.Request.createGroup)
  return creategroup_ != NULL ? *creategroup_ : *default_instance_->creategroup_;
}
inline ::voice::CreateGroup* Request::mutable_creategroup() {
  set_has_creategroup();
  if (creategroup_ == NULL) {
    creategroup_ = new ::voice::CreateGroup;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.createGroup)
  return creategroup_;
}
inline ::voice::CreateGroup* Request::release_creategroup() {
  clear_has_creategroup();
  ::voice::CreateGroup* temp = creategroup_;
  creategroup_ = NULL;
  return temp;
}
inline void Request::set_allocated_creategroup(::voice::CreateGroup* creategroup) {
  delete creategroup_;
  creategroup_ = creategroup;
  if (creategroup) {
    set_has_creategroup();
  } else {
    clear_has_creategroup();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.createGroup)
}

// optional .voice.AddPlayer addPlayer = 3;
inline bool Request::has_addplayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_addplayer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_addplayer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_addplayer() {
  if (addplayer_ != NULL) addplayer_->::voice::AddPlayer::Clear();
  clear_has_addplayer();
}
inline const ::voice::AddPlayer& Request::addplayer() const {
  // @@protoc_insertion_point(field_get:voice.Request.addPlayer)
  return addplayer_ != NULL ? *addplayer_ : *default_instance_->addplayer_;
}
inline ::voice::AddPlayer* Request::mutable_addplayer() {
  set_has_addplayer();
  if (addplayer_ == NULL) {
    addplayer_ = new ::voice::AddPlayer;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.addPlayer)
  return addplayer_;
}
inline ::voice::AddPlayer* Request::release_addplayer() {
  clear_has_addplayer();
  ::voice::AddPlayer* temp = addplayer_;
  addplayer_ = NULL;
  return temp;
}
inline void Request::set_allocated_addplayer(::voice::AddPlayer* addplayer) {
  delete addplayer_;
  addplayer_ = addplayer;
  if (addplayer) {
    set_has_addplayer();
  } else {
    clear_has_addplayer();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.addPlayer)
}

// optional .voice.RemovePlayer removePlayer = 4;
inline bool Request::has_removeplayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_removeplayer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_removeplayer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_removeplayer() {
  if (removeplayer_ != NULL) removeplayer_->::voice::RemovePlayer::Clear();
  clear_has_removeplayer();
}
inline const ::voice::RemovePlayer& Request::removeplayer() const {
  // @@protoc_insertion_point(field_get:voice.Request.removePlayer)
  return removeplayer_ != NULL ? *removeplayer_ : *default_instance_->removeplayer_;
}
inline ::voice::RemovePlayer* Request::mutable_removeplayer() {
  set_has_removeplayer();
  if (removeplayer_ == NULL) {
    removeplayer_ = new ::voice::RemovePlayer;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.removePlayer)
  return removeplayer_;
}
inline ::voice::RemovePlayer* Request::release_removeplayer() {
  clear_has_removeplayer();
  ::voice::RemovePlayer* temp = removeplayer_;
  removeplayer_ = NULL;
  return temp;
}
inline void Request::set_allocated_removeplayer(::voice::RemovePlayer* removeplayer) {
  delete removeplayer_;
  removeplayer_ = removeplayer;
  if (removeplayer) {
    set_has_removeplayer();
  } else {
    clear_has_removeplayer();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.removePlayer)
}

// optional .voice.DestroyGroup destroyGropu = 5;
inline bool Request::has_destroygropu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_destroygropu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_destroygropu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_destroygropu() {
  if (destroygropu_ != NULL) destroygropu_->::voice::DestroyGroup::Clear();
  clear_has_destroygropu();
}
inline const ::voice::DestroyGroup& Request::destroygropu() const {
  // @@protoc_insertion_point(field_get:voice.Request.destroyGropu)
  return destroygropu_ != NULL ? *destroygropu_ : *default_instance_->destroygropu_;
}
inline ::voice::DestroyGroup* Request::mutable_destroygropu() {
  set_has_destroygropu();
  if (destroygropu_ == NULL) {
    destroygropu_ = new ::voice::DestroyGroup;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.destroyGropu)
  return destroygropu_;
}
inline ::voice::DestroyGroup* Request::release_destroygropu() {
  clear_has_destroygropu();
  ::voice::DestroyGroup* temp = destroygropu_;
  destroygropu_ = NULL;
  return temp;
}
inline void Request::set_allocated_destroygropu(::voice::DestroyGroup* destroygropu) {
  delete destroygropu_;
  destroygropu_ = destroygropu;
  if (destroygropu) {
    set_has_destroygropu();
  } else {
    clear_has_destroygropu();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.destroyGropu)
}

// optional .voice.AdjustPlayerAttr adjustPlayerAttr = 6;
inline bool Request::has_adjustplayerattr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_adjustplayerattr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_adjustplayerattr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_adjustplayerattr() {
  if (adjustplayerattr_ != NULL) adjustplayerattr_->::voice::AdjustPlayerAttr::Clear();
  clear_has_adjustplayerattr();
}
inline const ::voice::AdjustPlayerAttr& Request::adjustplayerattr() const {
  // @@protoc_insertion_point(field_get:voice.Request.adjustPlayerAttr)
  return adjustplayerattr_ != NULL ? *adjustplayerattr_ : *default_instance_->adjustplayerattr_;
}
inline ::voice::AdjustPlayerAttr* Request::mutable_adjustplayerattr() {
  set_has_adjustplayerattr();
  if (adjustplayerattr_ == NULL) {
    adjustplayerattr_ = new ::voice::AdjustPlayerAttr;
  }
  // @@protoc_insertion_point(field_mutable:voice.Request.adjustPlayerAttr)
  return adjustplayerattr_;
}
inline ::voice::AdjustPlayerAttr* Request::release_adjustplayerattr() {
  clear_has_adjustplayerattr();
  ::voice::AdjustPlayerAttr* temp = adjustplayerattr_;
  adjustplayerattr_ = NULL;
  return temp;
}
inline void Request::set_allocated_adjustplayerattr(::voice::AdjustPlayerAttr* adjustplayerattr) {
  delete adjustplayerattr_;
  adjustplayerattr_ = adjustplayerattr;
  if (adjustplayerattr) {
    set_has_adjustplayerattr();
  } else {
    clear_has_adjustplayerattr();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Request.adjustPlayerAttr)
}

// -------------------------------------------------------------------

// Response

// optional .voice.ACK Code = 1;
inline bool Response::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::voice::ACK Response::code() const {
  // @@protoc_insertion_point(field_get:voice.Response.Code)
  return static_cast< ::voice::ACK >(code_);
}
inline void Response::set_code(::voice::ACK value) {
  assert(::voice::ACK_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:voice.Response.Code)
}

// optional string ErrMsg = 2;
inline bool Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& Response::errmsg() const {
  // @@protoc_insertion_point(field_get:voice.Response.ErrMsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:voice.Response.ErrMsg)
}
inline void Response::set_errmsg(const char* value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:voice.Response.ErrMsg)
}
inline void Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:voice.Response.ErrMsg)
}
inline ::std::string* Response::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:voice.Response.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_errmsg() {
  clear_has_errmsg();
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:voice.Response.ErrMsg)
}

// optional .voice.HandshakeAck handshakeAck = 3;
inline bool Response::has_handshakeack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_handshakeack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_handshakeack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_handshakeack() {
  if (handshakeack_ != NULL) handshakeack_->::voice::HandshakeAck::Clear();
  clear_has_handshakeack();
}
inline const ::voice::HandshakeAck& Response::handshakeack() const {
  // @@protoc_insertion_point(field_get:voice.Response.handshakeAck)
  return handshakeack_ != NULL ? *handshakeack_ : *default_instance_->handshakeack_;
}
inline ::voice::HandshakeAck* Response::mutable_handshakeack() {
  set_has_handshakeack();
  if (handshakeack_ == NULL) {
    handshakeack_ = new ::voice::HandshakeAck;
  }
  // @@protoc_insertion_point(field_mutable:voice.Response.handshakeAck)
  return handshakeack_;
}
inline ::voice::HandshakeAck* Response::release_handshakeack() {
  clear_has_handshakeack();
  ::voice::HandshakeAck* temp = handshakeack_;
  handshakeack_ = NULL;
  return temp;
}
inline void Response::set_allocated_handshakeack(::voice::HandshakeAck* handshakeack) {
  delete handshakeack_;
  handshakeack_ = handshakeack;
  if (handshakeack) {
    set_has_handshakeack();
  } else {
    clear_has_handshakeack();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Response.handshakeAck)
}

// optional .voice.AddPlayerAck addPlayerAck = 4;
inline bool Response::has_addplayerack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_addplayerack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_addplayerack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_addplayerack() {
  if (addplayerack_ != NULL) addplayerack_->::voice::AddPlayerAck::Clear();
  clear_has_addplayerack();
}
inline const ::voice::AddPlayerAck& Response::addplayerack() const {
  // @@protoc_insertion_point(field_get:voice.Response.addPlayerAck)
  return addplayerack_ != NULL ? *addplayerack_ : *default_instance_->addplayerack_;
}
inline ::voice::AddPlayerAck* Response::mutable_addplayerack() {
  set_has_addplayerack();
  if (addplayerack_ == NULL) {
    addplayerack_ = new ::voice::AddPlayerAck;
  }
  // @@protoc_insertion_point(field_mutable:voice.Response.addPlayerAck)
  return addplayerack_;
}
inline ::voice::AddPlayerAck* Response::release_addplayerack() {
  clear_has_addplayerack();
  ::voice::AddPlayerAck* temp = addplayerack_;
  addplayerack_ = NULL;
  return temp;
}
inline void Response::set_allocated_addplayerack(::voice::AddPlayerAck* addplayerack) {
  delete addplayerack_;
  addplayerack_ = addplayerack;
  if (addplayerack) {
    set_has_addplayerack();
  } else {
    clear_has_addplayerack();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Response.addPlayerAck)
}

// -------------------------------------------------------------------

// Message

// optional .voice.MSG messageId = 1;
inline bool Message::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::voice::MSG Message::messageid() const {
  // @@protoc_insertion_point(field_get:voice.Message.messageId)
  return static_cast< ::voice::MSG >(messageid_);
}
inline void Message::set_messageid(::voice::MSG value) {
  assert(::voice::MSG_IsValid(value));
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:voice.Message.messageId)
}

// optional int32 messageLen = 2;
inline bool Message::has_messagelen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_messagelen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_messagelen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_messagelen() {
  messagelen_ = 0;
  clear_has_messagelen();
}
inline ::google::protobuf::int32 Message::messagelen() const {
  // @@protoc_insertion_point(field_get:voice.Message.messageLen)
  return messagelen_;
}
inline void Message::set_messagelen(::google::protobuf::int32 value) {
  set_has_messagelen();
  messagelen_ = value;
  // @@protoc_insertion_point(field_set:voice.Message.messageLen)
}

// optional .voice.Request request = 3;
inline bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_request() {
  if (request_ != NULL) request_->::voice::Request::Clear();
  clear_has_request();
}
inline const ::voice::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:voice.Message.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::voice::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::voice::Request;
  }
  // @@protoc_insertion_point(field_mutable:voice.Message.request)
  return request_;
}
inline ::voice::Request* Message::release_request() {
  clear_has_request();
  ::voice::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void Message::set_allocated_request(::voice::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Message.request)
}

// optional .voice.Response response = 4;
inline bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_response() {
  if (response_ != NULL) response_->::voice::Response::Clear();
  clear_has_response();
}
inline const ::voice::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:voice.Message.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::voice::Response* Message::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::voice::Response;
  }
  // @@protoc_insertion_point(field_mutable:voice.Message.response)
  return response_;
}
inline ::voice::Response* Message::release_response() {
  clear_has_response();
  ::voice::Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline void Message::set_allocated_response(::voice::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:voice.Message.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace voice

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::voice::MSG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::voice::MSG>() {
  return ::voice::MSG_descriptor();
}
template <> struct is_proto_enum< ::voice::ACK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::voice::ACK>() {
  return ::voice::ACK_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
