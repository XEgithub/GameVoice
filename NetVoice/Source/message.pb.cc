// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* Handshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGroupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyEnterGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyEnterGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLeaveGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLeaveGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdjustPlayerAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdjustPlayerAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Noitfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Noitfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRequestConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRequestConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRequestConnectAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRequestConnectAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceHeartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceHeartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_CONST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VOICE_MSG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VOICE_ACK_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Handshake_descriptor_ = file->message_type(0);
  static const int Handshake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, productkey_),
  };
  Handshake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Handshake_descriptor_,
      Handshake::default_instance_,
      Handshake_offsets_,
      -1,
      -1,
      -1,
      sizeof(Handshake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _is_default_instance_));
  HandshakeAck_descriptor_ = file->message_type(1);
  static const int HandshakeAck_offsets_[1] = {
  };
  HandshakeAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HandshakeAck_descriptor_,
      HandshakeAck::default_instance_,
      HandshakeAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HandshakeAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _is_default_instance_));
  EnterGroup_descriptor_ = file->message_type(2);
  static const int EnterGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroup, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroup, canspeak_),
  };
  EnterGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterGroup_descriptor_,
      EnterGroup::default_instance_,
      EnterGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnterGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroup, _is_default_instance_));
  EnterGroupAck_descriptor_ = file->message_type(3);
  static const int EnterGroupAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroupAck, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroupAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroupAck, playerindex_),
  };
  EnterGroupAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterGroupAck_descriptor_,
      EnterGroupAck::default_instance_,
      EnterGroupAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnterGroupAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroupAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGroupAck, _is_default_instance_));
  NotifyEnterGroup_descriptor_ = file->message_type(4);
  static const int NotifyEnterGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterGroup, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterGroup, canspeak_),
  };
  NotifyEnterGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyEnterGroup_descriptor_,
      NotifyEnterGroup::default_instance_,
      NotifyEnterGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(NotifyEnterGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterGroup, _is_default_instance_));
  NotifyLeaveGroup_descriptor_ = file->message_type(5);
  static const int NotifyLeaveGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLeaveGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLeaveGroup, playerid_),
  };
  NotifyLeaveGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyLeaveGroup_descriptor_,
      NotifyLeaveGroup::default_instance_,
      NotifyLeaveGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(NotifyLeaveGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLeaveGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLeaveGroup, _is_default_instance_));
  LeaveGroup_descriptor_ = file->message_type(6);
  static const int LeaveGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, playerid_),
  };
  LeaveGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaveGroup_descriptor_,
      LeaveGroup::default_instance_,
      LeaveGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(LeaveGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, _is_default_instance_));
  AdjustPlayerAttr_descriptor_ = file->message_type(7);
  static const int AdjustPlayerAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, canspeak_),
  };
  AdjustPlayerAttr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdjustPlayerAttr_descriptor_,
      AdjustPlayerAttr::default_instance_,
      AdjustPlayerAttr_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdjustPlayerAttr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, _is_default_instance_));
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, entergroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, leavegroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, adjustplayerattr_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(9);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, handshakeack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, entergroupack_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Noitfy_descriptor_ = file->message_type(10);
  static const int Noitfy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Noitfy, notifyentergroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Noitfy, notifyleavegroup_),
  };
  Noitfy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Noitfy_descriptor_,
      Noitfy::default_instance_,
      Noitfy_offsets_,
      -1,
      -1,
      -1,
      sizeof(Noitfy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Noitfy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Noitfy, _is_default_instance_));
  ControlMessage_descriptor_ = file->message_type(11);
  static const int ControlMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, notify_),
  };
  ControlMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlMessage_descriptor_,
      ControlMessage::default_instance_,
      ControlMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControlMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _is_default_instance_));
  PlayerRequestConnect_descriptor_ = file->message_type(12);
  static const int PlayerRequestConnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnect, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnect, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnect, groupid_),
  };
  PlayerRequestConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerRequestConnect_descriptor_,
      PlayerRequestConnect::default_instance_,
      PlayerRequestConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerRequestConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnect, _is_default_instance_));
  PlayerRequestConnectAck_descriptor_ = file->message_type(13);
  static const int PlayerRequestConnectAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnectAck, code_),
  };
  PlayerRequestConnectAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerRequestConnectAck_descriptor_,
      PlayerRequestConnectAck::default_instance_,
      PlayerRequestConnectAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerRequestConnectAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnectAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnectAck, _is_default_instance_));
  VoiceData_descriptor_ = file->message_type(14);
  static const int VoiceData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, frameindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, data_),
  };
  VoiceData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceData_descriptor_,
      VoiceData::default_instance_,
      VoiceData_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoiceData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, _is_default_instance_));
  VoiceHeartbeat_descriptor_ = file->message_type(15);
  static const int VoiceHeartbeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, playerid_),
  };
  VoiceHeartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceHeartbeat_descriptor_,
      VoiceHeartbeat::default_instance_,
      VoiceHeartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoiceHeartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, _is_default_instance_));
  VoiceMessage_descriptor_ = file->message_type(16);
  static const int VoiceMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, playerrequestconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, playerrequestconnectack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, voicedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, voiceheartbeat_),
  };
  VoiceMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceMessage_descriptor_,
      VoiceMessage::default_instance_,
      VoiceMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoiceMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, _is_default_instance_));
  MSG_CONST_descriptor_ = file->enum_type(0);
  MSG_descriptor_ = file->enum_type(1);
  ACK_descriptor_ = file->enum_type(2);
  VOICE_MSG_descriptor_ = file->enum_type(3);
  VOICE_ACK_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Handshake_descriptor_, &Handshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HandshakeAck_descriptor_, &HandshakeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterGroup_descriptor_, &EnterGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterGroupAck_descriptor_, &EnterGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyEnterGroup_descriptor_, &NotifyEnterGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyLeaveGroup_descriptor_, &NotifyLeaveGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaveGroup_descriptor_, &LeaveGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdjustPlayerAttr_descriptor_, &AdjustPlayerAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Noitfy_descriptor_, &Noitfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlMessage_descriptor_, &ControlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerRequestConnect_descriptor_, &PlayerRequestConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerRequestConnectAck_descriptor_, &PlayerRequestConnectAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceData_descriptor_, &VoiceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceHeartbeat_descriptor_, &VoiceHeartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceMessage_descriptor_, &VoiceMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Handshake::default_instance_;
  delete Handshake_reflection_;
  delete HandshakeAck::default_instance_;
  delete HandshakeAck_reflection_;
  delete EnterGroup::default_instance_;
  delete EnterGroup_reflection_;
  delete EnterGroupAck::default_instance_;
  delete EnterGroupAck_reflection_;
  delete NotifyEnterGroup::default_instance_;
  delete NotifyEnterGroup_reflection_;
  delete NotifyLeaveGroup::default_instance_;
  delete NotifyLeaveGroup_reflection_;
  delete LeaveGroup::default_instance_;
  delete LeaveGroup_reflection_;
  delete AdjustPlayerAttr::default_instance_;
  delete AdjustPlayerAttr_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Noitfy::default_instance_;
  delete Noitfy_reflection_;
  delete ControlMessage::default_instance_;
  delete ControlMessage_reflection_;
  delete PlayerRequestConnect::default_instance_;
  delete PlayerRequestConnect_reflection_;
  delete PlayerRequestConnectAck::default_instance_;
  delete PlayerRequestConnectAck_reflection_;
  delete VoiceData::default_instance_;
  delete VoiceData_reflection_;
  delete VoiceHeartbeat::default_instance_;
  delete VoiceHeartbeat_reflection_;
  delete VoiceMessage::default_instance_;
  delete VoiceMessage_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\007message\"\037\n\tHandshake\022\022\n"
    "\nProductKey\030\002 \001(\t\"\016\n\014HandshakeAck\"A\n\nEnt"
    "erGroup\022\017\n\007groupId\030\001 \001(\004\022\020\n\010playerId\030\002 \001"
    "(\004\022\020\n\010canSpeak\030\003 \001(\r\"G\n\rEnterGroupAck\022\017\n"
    "\007groupId\030\001 \001(\004\022\020\n\010playerId\030\002 \001(\004\022\023\n\013play"
    "erIndex\030\003 \001(\r\"G\n\020NotifyEnterGroup\022\017\n\007gro"
    "upId\030\001 \001(\004\022\020\n\010playerId\030\002 \001(\004\022\020\n\010canSpeak"
    "\030\003 \001(\r\"5\n\020NotifyLeaveGroup\022\017\n\007groupId\030\001 "
    "\001(\004\022\020\n\010playerId\030\002 \001(\004\"/\n\nLeaveGroup\022\017\n\007g"
    "roupId\030\001 \001(\004\022\020\n\010playerId\030\002 \001(\004\"G\n\020Adjust"
    "PlayerAttr\022\017\n\007groupId\030\001 \001(\004\022\020\n\010playerId\030"
    "\002 \001(\004\022\020\n\010canSpeak\030\003 \001(\r\"\267\001\n\007Request\022%\n\th"
    "andshake\030\001 \001(\0132\022.message.Handshake\022\'\n\nen"
    "terGroup\030\002 \001(\0132\023.message.EnterGroup\022\'\n\nl"
    "eaveGroup\030\003 \001(\0132\023.message.LeaveGroup\0223\n\020"
    "adjustPlayerAttr\030\004 \001(\0132\031.message.AdjustP"
    "layerAttr\"\202\001\n\010Response\022\032\n\004Code\030\001 \001(\0162\014.m"
    "essage.ACK\022+\n\014handshakeAck\030\003 \001(\0132\025.messa"
    "ge.HandshakeAck\022-\n\renterGroupAck\030\004 \001(\0132\026"
    ".message.EnterGroupAck\"r\n\006Noitfy\0223\n\020noti"
    "fyEnterGroup\030\001 \001(\0132\031.message.NotifyEnter"
    "Group\0223\n\020notifyLeaveGroup\030\002 \001(\0132\031.messag"
    "e.NotifyLeaveGroup\"p\n\016ControlMessage\022\035\n\003"
    "req\030\001 \001(\0132\020.message.Request\022\036\n\003res\030\002 \001(\013"
    "2\021.message.Response\022\037\n\006notify\030\003 \001(\0132\017.me"
    "ssage.Noitfy\"N\n\024PlayerRequestConnect\022\023\n\013"
    "PlayerIndex\030\001 \001(\r\022\020\n\010PlayerID\030\002 \001(\004\022\017\n\007G"
    "roupID\030\003 \001(\004\";\n\027PlayerRequestConnectAck\022"
    " \n\004Code\030\001 \001(\0162\022.message.VOICE_ACK\"T\n\tVoi"
    "ceData\022\023\n\013PlayerIndex\030\001 \001(\r\022\020\n\010PlayerID\030"
    "\002 \001(\004\022\022\n\nFrameIndex\030\003 \001(\r\022\014\n\004Data\030\004 \001(\014\""
    "7\n\016VoiceHeartbeat\022\023\n\013PlayerIndex\030\001 \001(\r\022\020"
    "\n\010PlayerID\030\002 \001(\004\"\346\001\n\014VoiceMessage\022;\n\024pla"
    "yerRequestConnect\030\001 \001(\0132\035.message.Player"
    "RequestConnect\022A\n\027playerRequestConnectAc"
    "k\030\002 \001(\0132 .message.PlayerRequestConnectAc"
    "k\022%\n\tvoiceData\030\003 \001(\0132\022.message.VoiceData"
    "\022/\n\016voiceHeartbeat\030\004 \001(\0132\027.message.Voice"
    "Heartbeat*R\n\tMSG_CONST\022\017\n\013CONST_VALUE\020\000\022"
    "\024\n\017MAX_PACKET_SIZE\020\200\010\022\032\n\025MAX_VOICE_PACKE"
    "T_SIZE\020\200\010\032\002\020\001*\307\001\n\003MSG\022\010\n\004NONE\020\000\022\r\n\tHANDS"
    "HAKE\020\001\022\021\n\rHANDSHAKE_ACK\020\002\022\017\n\013ENTER_GROUP"
    "\020\003\022\023\n\017ENTER_GROUP_ACK\020\004\022\026\n\022NOTIFY_ENTER_"
    "GROUP\020\005\022\026\n\022NOTIFY_LEAVE_GROUP\020\006\022\017\n\013LEAVE"
    "_GROUP\020\007\022\026\n\022ADJUST_PLAYER_ATTR\020\010\022\025\n\021ADJU"
    "ST_GROUP_ATTR\020\t*:\n\003ACK\022\006\n\002OK\020\000\022\024\n\020HANDSH"
    "AKE_FAILED\020\001\022\025\n\021ADD_PLAYER_FAILED\020\002*r\n\tV"
    "OICE_MSG\022\022\n\016VOICE_MSG_NONE\020\000\022\023\n\017REQEUST_"
    "CONNECT\020\001\022\027\n\023REQEUST_CONNECT_ACK\020\002\022\016\n\nVO"
    "ICE_DATA\020\003\022\023\n\017VOICE_HEARTBEAT\020\004*\031\n\tVOICE"
    "_ACK\022\014\n\010VOICE_OK\020\000b\006proto3", 2026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Handshake::default_instance_ = new Handshake();
  HandshakeAck::default_instance_ = new HandshakeAck();
  EnterGroup::default_instance_ = new EnterGroup();
  EnterGroupAck::default_instance_ = new EnterGroupAck();
  NotifyEnterGroup::default_instance_ = new NotifyEnterGroup();
  NotifyLeaveGroup::default_instance_ = new NotifyLeaveGroup();
  LeaveGroup::default_instance_ = new LeaveGroup();
  AdjustPlayerAttr::default_instance_ = new AdjustPlayerAttr();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Noitfy::default_instance_ = new Noitfy();
  ControlMessage::default_instance_ = new ControlMessage();
  PlayerRequestConnect::default_instance_ = new PlayerRequestConnect();
  PlayerRequestConnectAck::default_instance_ = new PlayerRequestConnectAck();
  VoiceData::default_instance_ = new VoiceData();
  VoiceHeartbeat::default_instance_ = new VoiceHeartbeat();
  VoiceMessage::default_instance_ = new VoiceMessage();
  Handshake::default_instance_->InitAsDefaultInstance();
  HandshakeAck::default_instance_->InitAsDefaultInstance();
  EnterGroup::default_instance_->InitAsDefaultInstance();
  EnterGroupAck::default_instance_->InitAsDefaultInstance();
  NotifyEnterGroup::default_instance_->InitAsDefaultInstance();
  NotifyLeaveGroup::default_instance_->InitAsDefaultInstance();
  LeaveGroup::default_instance_->InitAsDefaultInstance();
  AdjustPlayerAttr::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Noitfy::default_instance_->InitAsDefaultInstance();
  ControlMessage::default_instance_->InitAsDefaultInstance();
  PlayerRequestConnect::default_instance_->InitAsDefaultInstance();
  PlayerRequestConnectAck::default_instance_->InitAsDefaultInstance();
  VoiceData::default_instance_->InitAsDefaultInstance();
  VoiceHeartbeat::default_instance_->InitAsDefaultInstance();
  VoiceMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CONST_descriptor_;
}
bool MSG_CONST_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACK_descriptor_;
}
bool ACK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VOICE_MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VOICE_MSG_descriptor_;
}
bool VOICE_MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VOICE_ACK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VOICE_ACK_descriptor_;
}
bool VOICE_ACK_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handshake::kProductKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handshake::Handshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Handshake)
}

void Handshake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Handshake::Handshake(const Handshake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Handshake)
}

void Handshake::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  productkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:message.Handshake)
  SharedDtor();
}

void Handshake::SharedDtor() {
  productkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Handshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handshake_descriptor_;
}

const Handshake& Handshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Handshake* Handshake::default_instance_ = NULL;

Handshake* Handshake::New(::google::protobuf::Arena* arena) const {
  Handshake* n = new Handshake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Handshake::Clear() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Handshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProductKey = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productkey().data(), this->productkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.Handshake.ProductKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Handshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Handshake)
  return false;
#undef DO_
}

void Handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Handshake)
  // optional string ProductKey = 2;
  if (this->productkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productkey().data(), this->productkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Handshake.ProductKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.Handshake)
}

::google::protobuf::uint8* Handshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Handshake)
  // optional string ProductKey = 2;
  if (this->productkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productkey().data(), this->productkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Handshake.ProductKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Handshake)
  return target;
}

int Handshake::ByteSize() const {
  int total_size = 0;

  // optional string ProductKey = 2;
  if (this->productkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productkey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handshake::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Handshake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Handshake>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.productkey().size() > 0) {

    productkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productkey_);
  }
}

void Handshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {

  return true;
}

void Handshake::Swap(Handshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handshake::InternalSwap(Handshake* other) {
  productkey_.Swap(&other->productkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Handshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handshake_descriptor_;
  metadata.reflection = Handshake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Handshake

// optional string ProductKey = 2;
void Handshake::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Handshake::productkey() const {
  // @@protoc_insertion_point(field_get:message.Handshake.ProductKey)
  return productkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Handshake::set_productkey(const ::std::string& value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Handshake.ProductKey)
}
 void Handshake::set_productkey(const char* value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Handshake.ProductKey)
}
 void Handshake::set_productkey(const char* value, size_t size) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Handshake.ProductKey)
}
 ::std::string* Handshake::mutable_productkey() {
  
  // @@protoc_insertion_point(field_mutable:message.Handshake.ProductKey)
  return productkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Handshake::release_productkey() {
  
  return productkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Handshake::set_allocated_productkey(::std::string* productkey) {
  if (productkey != NULL) {
    
  } else {
    
  }
  productkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:message.Handshake.ProductKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandshakeAck::HandshakeAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.HandshakeAck)
}

void HandshakeAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HandshakeAck::HandshakeAck(const HandshakeAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.HandshakeAck)
}

void HandshakeAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

HandshakeAck::~HandshakeAck() {
  // @@protoc_insertion_point(destructor:message.HandshakeAck)
  SharedDtor();
}

void HandshakeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeAck_descriptor_;
}

const HandshakeAck& HandshakeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

HandshakeAck* HandshakeAck::default_instance_ = NULL;

HandshakeAck* HandshakeAck::New(::google::protobuf::Arena* arena) const {
  HandshakeAck* n = new HandshakeAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandshakeAck::Clear() {
}

bool HandshakeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.HandshakeAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:message.HandshakeAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.HandshakeAck)
  return false;
#undef DO_
}

void HandshakeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.HandshakeAck)
  // @@protoc_insertion_point(serialize_end:message.HandshakeAck)
}

::google::protobuf::uint8* HandshakeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.HandshakeAck)
  // @@protoc_insertion_point(serialize_to_array_end:message.HandshakeAck)
  return target;
}

int HandshakeAck::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HandshakeAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HandshakeAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeAck::MergeFrom(const HandshakeAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void HandshakeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeAck::CopyFrom(const HandshakeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeAck::IsInitialized() const {

  return true;
}

void HandshakeAck::Swap(HandshakeAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandshakeAck::InternalSwap(HandshakeAck* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandshakeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeAck_descriptor_;
  metadata.reflection = HandshakeAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HandshakeAck

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterGroup::kGroupIdFieldNumber;
const int EnterGroup::kPlayerIdFieldNumber;
const int EnterGroup::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterGroup::EnterGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.EnterGroup)
}

void EnterGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EnterGroup::EnterGroup(const EnterGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.EnterGroup)
}

void EnterGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
}

EnterGroup::~EnterGroup() {
  // @@protoc_insertion_point(destructor:message.EnterGroup)
  SharedDtor();
}

void EnterGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGroup_descriptor_;
}

const EnterGroup& EnterGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

EnterGroup* EnterGroup::default_instance_ = NULL;

EnterGroup* EnterGroup::New(::google::protobuf::Arena* arena) const {
  EnterGroup* n = new EnterGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterGroup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnterGroup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

}

bool EnterGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.EnterGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 3;
      case 3: {
        if (tag == 24) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.EnterGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.EnterGroup)
  return false;
#undef DO_
}

void EnterGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.EnterGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->canspeak(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.EnterGroup)
}

::google::protobuf::uint8* EnterGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.EnterGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->canspeak(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.EnterGroup)
  return target;
}

int EnterGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->canspeak());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGroup::MergeFrom(const EnterGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.canspeak() != 0) {
    set_canspeak(from.canspeak());
  }
}

void EnterGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGroup::CopyFrom(const EnterGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGroup::IsInitialized() const {

  return true;
}

void EnterGroup::Swap(EnterGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterGroup::InternalSwap(EnterGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGroup_descriptor_;
  metadata.reflection = EnterGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterGroup

// optional uint64 groupId = 1;
void EnterGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 EnterGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.EnterGroup.groupId)
  return groupid_;
}
 void EnterGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.EnterGroup.groupId)
}

// optional uint64 playerId = 2;
void EnterGroup::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 EnterGroup::playerid() const {
  // @@protoc_insertion_point(field_get:message.EnterGroup.playerId)
  return playerid_;
}
 void EnterGroup::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.EnterGroup.playerId)
}

// optional uint32 canSpeak = 3;
void EnterGroup::clear_canspeak() {
  canspeak_ = 0u;
}
 ::google::protobuf::uint32 EnterGroup::canspeak() const {
  // @@protoc_insertion_point(field_get:message.EnterGroup.canSpeak)
  return canspeak_;
}
 void EnterGroup::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.EnterGroup.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterGroupAck::kGroupIdFieldNumber;
const int EnterGroupAck::kPlayerIdFieldNumber;
const int EnterGroupAck::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterGroupAck::EnterGroupAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.EnterGroupAck)
}

void EnterGroupAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EnterGroupAck::EnterGroupAck(const EnterGroupAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.EnterGroupAck)
}

void EnterGroupAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  playerindex_ = 0u;
}

EnterGroupAck::~EnterGroupAck() {
  // @@protoc_insertion_point(destructor:message.EnterGroupAck)
  SharedDtor();
}

void EnterGroupAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGroupAck_descriptor_;
}

const EnterGroupAck& EnterGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

EnterGroupAck* EnterGroupAck::default_instance_ = NULL;

EnterGroupAck* EnterGroupAck::New(::google::protobuf::Arena* arena) const {
  EnterGroupAck* n = new EnterGroupAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterGroupAck::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnterGroupAck*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool EnterGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.EnterGroupAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerIndex;
        break;
      }

      // optional uint32 playerIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_playerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.EnterGroupAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.EnterGroupAck)
  return false;
#undef DO_
}

void EnterGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.EnterGroupAck)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 playerIndex = 3;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.EnterGroupAck)
}

::google::protobuf::uint8* EnterGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.EnterGroupAck)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 playerIndex = 3;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.EnterGroupAck)
  return target;
}

int EnterGroupAck::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 playerIndex = 3;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterGroupAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterGroupAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGroupAck::MergeFrom(const EnterGroupAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
}

void EnterGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGroupAck::CopyFrom(const EnterGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGroupAck::IsInitialized() const {

  return true;
}

void EnterGroupAck::Swap(EnterGroupAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterGroupAck::InternalSwap(EnterGroupAck* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(playerindex_, other->playerindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGroupAck_descriptor_;
  metadata.reflection = EnterGroupAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterGroupAck

// optional uint64 groupId = 1;
void EnterGroupAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 EnterGroupAck::groupid() const {
  // @@protoc_insertion_point(field_get:message.EnterGroupAck.groupId)
  return groupid_;
}
 void EnterGroupAck::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.EnterGroupAck.groupId)
}

// optional uint64 playerId = 2;
void EnterGroupAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 EnterGroupAck::playerid() const {
  // @@protoc_insertion_point(field_get:message.EnterGroupAck.playerId)
  return playerid_;
}
 void EnterGroupAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.EnterGroupAck.playerId)
}

// optional uint32 playerIndex = 3;
void EnterGroupAck::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 EnterGroupAck::playerindex() const {
  // @@protoc_insertion_point(field_get:message.EnterGroupAck.playerIndex)
  return playerindex_;
}
 void EnterGroupAck::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.EnterGroupAck.playerIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyEnterGroup::kGroupIdFieldNumber;
const int NotifyEnterGroup::kPlayerIdFieldNumber;
const int NotifyEnterGroup::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyEnterGroup::NotifyEnterGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.NotifyEnterGroup)
}

void NotifyEnterGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NotifyEnterGroup::NotifyEnterGroup(const NotifyEnterGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.NotifyEnterGroup)
}

void NotifyEnterGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
}

NotifyEnterGroup::~NotifyEnterGroup() {
  // @@protoc_insertion_point(destructor:message.NotifyEnterGroup)
  SharedDtor();
}

void NotifyEnterGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyEnterGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyEnterGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterGroup_descriptor_;
}

const NotifyEnterGroup& NotifyEnterGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NotifyEnterGroup* NotifyEnterGroup::default_instance_ = NULL;

NotifyEnterGroup* NotifyEnterGroup::New(::google::protobuf::Arena* arena) const {
  NotifyEnterGroup* n = new NotifyEnterGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyEnterGroup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NotifyEnterGroup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

}

bool NotifyEnterGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.NotifyEnterGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 3;
      case 3: {
        if (tag == 24) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.NotifyEnterGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.NotifyEnterGroup)
  return false;
#undef DO_
}

void NotifyEnterGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.NotifyEnterGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->canspeak(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.NotifyEnterGroup)
}

::google::protobuf::uint8* NotifyEnterGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.NotifyEnterGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->canspeak(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.NotifyEnterGroup)
  return target;
}

int NotifyEnterGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->canspeak());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyEnterGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotifyEnterGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyEnterGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyEnterGroup::MergeFrom(const NotifyEnterGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.canspeak() != 0) {
    set_canspeak(from.canspeak());
  }
}

void NotifyEnterGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyEnterGroup::CopyFrom(const NotifyEnterGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyEnterGroup::IsInitialized() const {

  return true;
}

void NotifyEnterGroup::Swap(NotifyEnterGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyEnterGroup::InternalSwap(NotifyEnterGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyEnterGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyEnterGroup_descriptor_;
  metadata.reflection = NotifyEnterGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyEnterGroup

// optional uint64 groupId = 1;
void NotifyEnterGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 NotifyEnterGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.NotifyEnterGroup.groupId)
  return groupid_;
}
 void NotifyEnterGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.NotifyEnterGroup.groupId)
}

// optional uint64 playerId = 2;
void NotifyEnterGroup::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 NotifyEnterGroup::playerid() const {
  // @@protoc_insertion_point(field_get:message.NotifyEnterGroup.playerId)
  return playerid_;
}
 void NotifyEnterGroup::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.NotifyEnterGroup.playerId)
}

// optional uint32 canSpeak = 3;
void NotifyEnterGroup::clear_canspeak() {
  canspeak_ = 0u;
}
 ::google::protobuf::uint32 NotifyEnterGroup::canspeak() const {
  // @@protoc_insertion_point(field_get:message.NotifyEnterGroup.canSpeak)
  return canspeak_;
}
 void NotifyEnterGroup::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.NotifyEnterGroup.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyLeaveGroup::kGroupIdFieldNumber;
const int NotifyLeaveGroup::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyLeaveGroup::NotifyLeaveGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.NotifyLeaveGroup)
}

void NotifyLeaveGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NotifyLeaveGroup::NotifyLeaveGroup(const NotifyLeaveGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.NotifyLeaveGroup)
}

void NotifyLeaveGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
}

NotifyLeaveGroup::~NotifyLeaveGroup() {
  // @@protoc_insertion_point(destructor:message.NotifyLeaveGroup)
  SharedDtor();
}

void NotifyLeaveGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLeaveGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLeaveGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLeaveGroup_descriptor_;
}

const NotifyLeaveGroup& NotifyLeaveGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NotifyLeaveGroup* NotifyLeaveGroup::default_instance_ = NULL;

NotifyLeaveGroup* NotifyLeaveGroup::New(::google::protobuf::Arena* arena) const {
  NotifyLeaveGroup* n = new NotifyLeaveGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyLeaveGroup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NotifyLeaveGroup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

}

bool NotifyLeaveGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.NotifyLeaveGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.NotifyLeaveGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.NotifyLeaveGroup)
  return false;
#undef DO_
}

void NotifyLeaveGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.NotifyLeaveGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.NotifyLeaveGroup)
}

::google::protobuf::uint8* NotifyLeaveGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.NotifyLeaveGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.NotifyLeaveGroup)
  return target;
}

int NotifyLeaveGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLeaveGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotifyLeaveGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyLeaveGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLeaveGroup::MergeFrom(const NotifyLeaveGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void NotifyLeaveGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLeaveGroup::CopyFrom(const NotifyLeaveGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLeaveGroup::IsInitialized() const {

  return true;
}

void NotifyLeaveGroup::Swap(NotifyLeaveGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyLeaveGroup::InternalSwap(NotifyLeaveGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyLeaveGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLeaveGroup_descriptor_;
  metadata.reflection = NotifyLeaveGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyLeaveGroup

// optional uint64 groupId = 1;
void NotifyLeaveGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 NotifyLeaveGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.NotifyLeaveGroup.groupId)
  return groupid_;
}
 void NotifyLeaveGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.NotifyLeaveGroup.groupId)
}

// optional uint64 playerId = 2;
void NotifyLeaveGroup::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 NotifyLeaveGroup::playerid() const {
  // @@protoc_insertion_point(field_get:message.NotifyLeaveGroup.playerId)
  return playerid_;
}
 void NotifyLeaveGroup::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.NotifyLeaveGroup.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveGroup::kGroupIdFieldNumber;
const int LeaveGroup::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveGroup::LeaveGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.LeaveGroup)
}

void LeaveGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LeaveGroup::LeaveGroup(const LeaveGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.LeaveGroup)
}

void LeaveGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
}

LeaveGroup::~LeaveGroup() {
  // @@protoc_insertion_point(destructor:message.LeaveGroup)
  SharedDtor();
}

void LeaveGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGroup_descriptor_;
}

const LeaveGroup& LeaveGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

LeaveGroup* LeaveGroup::default_instance_ = NULL;

LeaveGroup* LeaveGroup::New(::google::protobuf::Arena* arena) const {
  LeaveGroup* n = new LeaveGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveGroup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeaveGroup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

}

bool LeaveGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.LeaveGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.LeaveGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.LeaveGroup)
  return false;
#undef DO_
}

void LeaveGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.LeaveGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.LeaveGroup)
}

::google::protobuf::uint8* LeaveGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.LeaveGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.LeaveGroup)
  return target;
}

int LeaveGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeaveGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGroup::MergeFrom(const LeaveGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void LeaveGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroup::CopyFrom(const LeaveGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroup::IsInitialized() const {

  return true;
}

void LeaveGroup::Swap(LeaveGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveGroup::InternalSwap(LeaveGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGroup_descriptor_;
  metadata.reflection = LeaveGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveGroup

// optional uint64 groupId = 1;
void LeaveGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LeaveGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.LeaveGroup.groupId)
  return groupid_;
}
 void LeaveGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.LeaveGroup.groupId)
}

// optional uint64 playerId = 2;
void LeaveGroup::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LeaveGroup::playerid() const {
  // @@protoc_insertion_point(field_get:message.LeaveGroup.playerId)
  return playerid_;
}
 void LeaveGroup::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.LeaveGroup.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdjustPlayerAttr::kGroupIdFieldNumber;
const int AdjustPlayerAttr::kPlayerIdFieldNumber;
const int AdjustPlayerAttr::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdjustPlayerAttr::AdjustPlayerAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.AdjustPlayerAttr)
}

void AdjustPlayerAttr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdjustPlayerAttr::AdjustPlayerAttr(const AdjustPlayerAttr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.AdjustPlayerAttr)
}

void AdjustPlayerAttr::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
}

AdjustPlayerAttr::~AdjustPlayerAttr() {
  // @@protoc_insertion_point(destructor:message.AdjustPlayerAttr)
  SharedDtor();
}

void AdjustPlayerAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdjustPlayerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdjustPlayerAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdjustPlayerAttr_descriptor_;
}

const AdjustPlayerAttr& AdjustPlayerAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AdjustPlayerAttr* AdjustPlayerAttr::default_instance_ = NULL;

AdjustPlayerAttr* AdjustPlayerAttr::New(::google::protobuf::Arena* arena) const {
  AdjustPlayerAttr* n = new AdjustPlayerAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdjustPlayerAttr::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdjustPlayerAttr*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdjustPlayerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.AdjustPlayerAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 3;
      case 3: {
        if (tag == 24) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.AdjustPlayerAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.AdjustPlayerAttr)
  return false;
#undef DO_
}

void AdjustPlayerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.AdjustPlayerAttr)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->canspeak(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.AdjustPlayerAttr)
}

::google::protobuf::uint8* AdjustPlayerAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AdjustPlayerAttr)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->canspeak(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.AdjustPlayerAttr)
  return target;
}

int AdjustPlayerAttr::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->canspeak());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdjustPlayerAttr::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdjustPlayerAttr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdjustPlayerAttr>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdjustPlayerAttr::MergeFrom(const AdjustPlayerAttr& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.canspeak() != 0) {
    set_canspeak(from.canspeak());
  }
}

void AdjustPlayerAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustPlayerAttr::CopyFrom(const AdjustPlayerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustPlayerAttr::IsInitialized() const {

  return true;
}

void AdjustPlayerAttr::Swap(AdjustPlayerAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdjustPlayerAttr::InternalSwap(AdjustPlayerAttr* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdjustPlayerAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdjustPlayerAttr_descriptor_;
  metadata.reflection = AdjustPlayerAttr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdjustPlayerAttr

// optional uint64 groupId = 1;
void AdjustPlayerAttr::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AdjustPlayerAttr::groupid() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.groupId)
  return groupid_;
}
 void AdjustPlayerAttr::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.groupId)
}

// optional uint64 playerId = 2;
void AdjustPlayerAttr::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AdjustPlayerAttr::playerid() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.playerId)
  return playerid_;
}
 void AdjustPlayerAttr::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.playerId)
}

// optional uint32 canSpeak = 3;
void AdjustPlayerAttr::clear_canspeak() {
  canspeak_ = 0u;
}
 ::google::protobuf::uint32 AdjustPlayerAttr::canspeak() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.canSpeak)
  return canspeak_;
}
 void AdjustPlayerAttr::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kHandshakeFieldNumber;
const int Request::kEnterGroupFieldNumber;
const int Request::kLeaveGroupFieldNumber;
const int Request::kAdjustPlayerAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  handshake_ = const_cast< ::message::Handshake*>(&::message::Handshake::default_instance());
  entergroup_ = const_cast< ::message::EnterGroup*>(&::message::EnterGroup::default_instance());
  leavegroup_ = const_cast< ::message::LeaveGroup*>(&::message::LeaveGroup::default_instance());
  adjustplayerattr_ = const_cast< ::message::AdjustPlayerAttr*>(&::message::AdjustPlayerAttr::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  handshake_ = NULL;
  entergroup_ = NULL;
  leavegroup_ = NULL;
  adjustplayerattr_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:message.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete handshake_;
    delete entergroup_;
    delete leavegroup_;
    delete adjustplayerattr_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
  if (GetArenaNoVirtual() == NULL && handshake_ != NULL) delete handshake_;
  handshake_ = NULL;
  if (GetArenaNoVirtual() == NULL && entergroup_ != NULL) delete entergroup_;
  entergroup_ = NULL;
  if (GetArenaNoVirtual() == NULL && leavegroup_ != NULL) delete leavegroup_;
  leavegroup_ = NULL;
  if (GetArenaNoVirtual() == NULL && adjustplayerattr_ != NULL) delete adjustplayerattr_;
  adjustplayerattr_ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.Handshake handshake = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enterGroup;
        break;
      }

      // optional .message.EnterGroup enterGroup = 2;
      case 2: {
        if (tag == 18) {
         parse_enterGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entergroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leaveGroup;
        break;
      }

      // optional .message.LeaveGroup leaveGroup = 3;
      case 3: {
        if (tag == 26) {
         parse_leaveGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leavegroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adjustPlayerAttr;
        break;
      }

      // optional .message.AdjustPlayerAttr adjustPlayerAttr = 4;
      case 4: {
        if (tag == 34) {
         parse_adjustPlayerAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjustplayerattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Request)
  // optional .message.Handshake handshake = 1;
  if (this->has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->handshake_, output);
  }

  // optional .message.EnterGroup enterGroup = 2;
  if (this->has_entergroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->entergroup_, output);
  }

  // optional .message.LeaveGroup leaveGroup = 3;
  if (this->has_leavegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leavegroup_, output);
  }

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 4;
  if (this->has_adjustplayerattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->adjustplayerattr_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Request)
  // optional .message.Handshake handshake = 1;
  if (this->has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->handshake_, target);
  }

  // optional .message.EnterGroup enterGroup = 2;
  if (this->has_entergroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->entergroup_, target);
  }

  // optional .message.LeaveGroup leaveGroup = 3;
  if (this->has_leavegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->leavegroup_, target);
  }

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 4;
  if (this->has_adjustplayerattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->adjustplayerattr_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  // optional .message.Handshake handshake = 1;
  if (this->has_handshake()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->handshake_);
  }

  // optional .message.EnterGroup enterGroup = 2;
  if (this->has_entergroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entergroup_);
  }

  // optional .message.LeaveGroup leaveGroup = 3;
  if (this->has_leavegroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leavegroup_);
  }

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 4;
  if (this->has_adjustplayerattr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adjustplayerattr_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_handshake()) {
    mutable_handshake()->::message::Handshake::MergeFrom(from.handshake());
  }
  if (from.has_entergroup()) {
    mutable_entergroup()->::message::EnterGroup::MergeFrom(from.entergroup());
  }
  if (from.has_leavegroup()) {
    mutable_leavegroup()->::message::LeaveGroup::MergeFrom(from.leavegroup());
  }
  if (from.has_adjustplayerattr()) {
    mutable_adjustplayerattr()->::message::AdjustPlayerAttr::MergeFrom(from.adjustplayerattr());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(handshake_, other->handshake_);
  std::swap(entergroup_, other->entergroup_);
  std::swap(leavegroup_, other->leavegroup_);
  std::swap(adjustplayerattr_, other->adjustplayerattr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .message.Handshake handshake = 1;
bool Request::has_handshake() const {
  return !_is_default_instance_ && handshake_ != NULL;
}
void Request::clear_handshake() {
  if (GetArenaNoVirtual() == NULL && handshake_ != NULL) delete handshake_;
  handshake_ = NULL;
}
const ::message::Handshake& Request::handshake() const {
  // @@protoc_insertion_point(field_get:message.Request.handshake)
  return handshake_ != NULL ? *handshake_ : *default_instance_->handshake_;
}
::message::Handshake* Request::mutable_handshake() {
  
  if (handshake_ == NULL) {
    handshake_ = new ::message::Handshake;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.handshake)
  return handshake_;
}
::message::Handshake* Request::release_handshake() {
  
  ::message::Handshake* temp = handshake_;
  handshake_ = NULL;
  return temp;
}
void Request::set_allocated_handshake(::message::Handshake* handshake) {
  delete handshake_;
  handshake_ = handshake;
  if (handshake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.handshake)
}

// optional .message.EnterGroup enterGroup = 2;
bool Request::has_entergroup() const {
  return !_is_default_instance_ && entergroup_ != NULL;
}
void Request::clear_entergroup() {
  if (GetArenaNoVirtual() == NULL && entergroup_ != NULL) delete entergroup_;
  entergroup_ = NULL;
}
const ::message::EnterGroup& Request::entergroup() const {
  // @@protoc_insertion_point(field_get:message.Request.enterGroup)
  return entergroup_ != NULL ? *entergroup_ : *default_instance_->entergroup_;
}
::message::EnterGroup* Request::mutable_entergroup() {
  
  if (entergroup_ == NULL) {
    entergroup_ = new ::message::EnterGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.enterGroup)
  return entergroup_;
}
::message::EnterGroup* Request::release_entergroup() {
  
  ::message::EnterGroup* temp = entergroup_;
  entergroup_ = NULL;
  return temp;
}
void Request::set_allocated_entergroup(::message::EnterGroup* entergroup) {
  delete entergroup_;
  entergroup_ = entergroup;
  if (entergroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.enterGroup)
}

// optional .message.LeaveGroup leaveGroup = 3;
bool Request::has_leavegroup() const {
  return !_is_default_instance_ && leavegroup_ != NULL;
}
void Request::clear_leavegroup() {
  if (GetArenaNoVirtual() == NULL && leavegroup_ != NULL) delete leavegroup_;
  leavegroup_ = NULL;
}
const ::message::LeaveGroup& Request::leavegroup() const {
  // @@protoc_insertion_point(field_get:message.Request.leaveGroup)
  return leavegroup_ != NULL ? *leavegroup_ : *default_instance_->leavegroup_;
}
::message::LeaveGroup* Request::mutable_leavegroup() {
  
  if (leavegroup_ == NULL) {
    leavegroup_ = new ::message::LeaveGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.leaveGroup)
  return leavegroup_;
}
::message::LeaveGroup* Request::release_leavegroup() {
  
  ::message::LeaveGroup* temp = leavegroup_;
  leavegroup_ = NULL;
  return temp;
}
void Request::set_allocated_leavegroup(::message::LeaveGroup* leavegroup) {
  delete leavegroup_;
  leavegroup_ = leavegroup;
  if (leavegroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.leaveGroup)
}

// optional .message.AdjustPlayerAttr adjustPlayerAttr = 4;
bool Request::has_adjustplayerattr() const {
  return !_is_default_instance_ && adjustplayerattr_ != NULL;
}
void Request::clear_adjustplayerattr() {
  if (GetArenaNoVirtual() == NULL && adjustplayerattr_ != NULL) delete adjustplayerattr_;
  adjustplayerattr_ = NULL;
}
const ::message::AdjustPlayerAttr& Request::adjustplayerattr() const {
  // @@protoc_insertion_point(field_get:message.Request.adjustPlayerAttr)
  return adjustplayerattr_ != NULL ? *adjustplayerattr_ : *default_instance_->adjustplayerattr_;
}
::message::AdjustPlayerAttr* Request::mutable_adjustplayerattr() {
  
  if (adjustplayerattr_ == NULL) {
    adjustplayerattr_ = new ::message::AdjustPlayerAttr;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.adjustPlayerAttr)
  return adjustplayerattr_;
}
::message::AdjustPlayerAttr* Request::release_adjustplayerattr() {
  
  ::message::AdjustPlayerAttr* temp = adjustplayerattr_;
  adjustplayerattr_ = NULL;
  return temp;
}
void Request::set_allocated_adjustplayerattr(::message::AdjustPlayerAttr* adjustplayerattr) {
  delete adjustplayerattr_;
  adjustplayerattr_ = adjustplayerattr;
  if (adjustplayerattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.adjustPlayerAttr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCodeFieldNumber;
const int Response::kHandshakeAckFieldNumber;
const int Response::kEnterGroupAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  handshakeack_ = const_cast< ::message::HandshakeAck*>(&::message::HandshakeAck::default_instance());
  entergroupack_ = const_cast< ::message::EnterGroupAck*>(&::message::EnterGroupAck::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  code_ = 0;
  handshakeack_ = NULL;
  entergroupack_ = NULL;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:message.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete handshakeack_;
    delete entergroupack_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
  code_ = 0;
  if (GetArenaNoVirtual() == NULL && handshakeack_ != NULL) delete handshakeack_;
  handshakeack_ = NULL;
  if (GetArenaNoVirtual() == NULL && entergroupack_ != NULL) delete entergroupack_;
  entergroupack_ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.ACK Code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::message::ACK >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_handshakeAck;
        break;
      }

      // optional .message.HandshakeAck handshakeAck = 3;
      case 3: {
        if (tag == 26) {
         parse_handshakeAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshakeack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_enterGroupAck;
        break;
      }

      // optional .message.EnterGroupAck enterGroupAck = 4;
      case 4: {
        if (tag == 34) {
         parse_enterGroupAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entergroupack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Response)
  // optional .message.ACK Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional .message.HandshakeAck handshakeAck = 3;
  if (this->has_handshakeack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->handshakeack_, output);
  }

  // optional .message.EnterGroupAck enterGroupAck = 4;
  if (this->has_entergroupack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->entergroupack_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Response)
  // optional .message.ACK Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional .message.HandshakeAck handshakeAck = 3;
  if (this->has_handshakeack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->handshakeack_, target);
  }

  // optional .message.EnterGroupAck enterGroupAck = 4;
  if (this->has_entergroupack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->entergroupack_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // optional .message.ACK Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // optional .message.HandshakeAck handshakeAck = 3;
  if (this->has_handshakeack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->handshakeack_);
  }

  // optional .message.EnterGroupAck enterGroupAck = 4;
  if (this->has_entergroupack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entergroupack_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.has_handshakeack()) {
    mutable_handshakeack()->::message::HandshakeAck::MergeFrom(from.handshakeack());
  }
  if (from.has_entergroupack()) {
    mutable_entergroupack()->::message::EnterGroupAck::MergeFrom(from.entergroupack());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(code_, other->code_);
  std::swap(handshakeack_, other->handshakeack_);
  std::swap(entergroupack_, other->entergroupack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .message.ACK Code = 1;
void Response::clear_code() {
  code_ = 0;
}
 ::message::ACK Response::code() const {
  // @@protoc_insertion_point(field_get:message.Response.Code)
  return static_cast< ::message::ACK >(code_);
}
 void Response::set_code(::message::ACK value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:message.Response.Code)
}

// optional .message.HandshakeAck handshakeAck = 3;
bool Response::has_handshakeack() const {
  return !_is_default_instance_ && handshakeack_ != NULL;
}
void Response::clear_handshakeack() {
  if (GetArenaNoVirtual() == NULL && handshakeack_ != NULL) delete handshakeack_;
  handshakeack_ = NULL;
}
const ::message::HandshakeAck& Response::handshakeack() const {
  // @@protoc_insertion_point(field_get:message.Response.handshakeAck)
  return handshakeack_ != NULL ? *handshakeack_ : *default_instance_->handshakeack_;
}
::message::HandshakeAck* Response::mutable_handshakeack() {
  
  if (handshakeack_ == NULL) {
    handshakeack_ = new ::message::HandshakeAck;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.handshakeAck)
  return handshakeack_;
}
::message::HandshakeAck* Response::release_handshakeack() {
  
  ::message::HandshakeAck* temp = handshakeack_;
  handshakeack_ = NULL;
  return temp;
}
void Response::set_allocated_handshakeack(::message::HandshakeAck* handshakeack) {
  delete handshakeack_;
  handshakeack_ = handshakeack;
  if (handshakeack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.handshakeAck)
}

// optional .message.EnterGroupAck enterGroupAck = 4;
bool Response::has_entergroupack() const {
  return !_is_default_instance_ && entergroupack_ != NULL;
}
void Response::clear_entergroupack() {
  if (GetArenaNoVirtual() == NULL && entergroupack_ != NULL) delete entergroupack_;
  entergroupack_ = NULL;
}
const ::message::EnterGroupAck& Response::entergroupack() const {
  // @@protoc_insertion_point(field_get:message.Response.enterGroupAck)
  return entergroupack_ != NULL ? *entergroupack_ : *default_instance_->entergroupack_;
}
::message::EnterGroupAck* Response::mutable_entergroupack() {
  
  if (entergroupack_ == NULL) {
    entergroupack_ = new ::message::EnterGroupAck;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.enterGroupAck)
  return entergroupack_;
}
::message::EnterGroupAck* Response::release_entergroupack() {
  
  ::message::EnterGroupAck* temp = entergroupack_;
  entergroupack_ = NULL;
  return temp;
}
void Response::set_allocated_entergroupack(::message::EnterGroupAck* entergroupack) {
  delete entergroupack_;
  entergroupack_ = entergroupack;
  if (entergroupack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.enterGroupAck)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Noitfy::kNotifyEnterGroupFieldNumber;
const int Noitfy::kNotifyLeaveGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Noitfy::Noitfy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Noitfy)
}

void Noitfy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  notifyentergroup_ = const_cast< ::message::NotifyEnterGroup*>(&::message::NotifyEnterGroup::default_instance());
  notifyleavegroup_ = const_cast< ::message::NotifyLeaveGroup*>(&::message::NotifyLeaveGroup::default_instance());
}

Noitfy::Noitfy(const Noitfy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Noitfy)
}

void Noitfy::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  notifyentergroup_ = NULL;
  notifyleavegroup_ = NULL;
}

Noitfy::~Noitfy() {
  // @@protoc_insertion_point(destructor:message.Noitfy)
  SharedDtor();
}

void Noitfy::SharedDtor() {
  if (this != default_instance_) {
    delete notifyentergroup_;
    delete notifyleavegroup_;
  }
}

void Noitfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Noitfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Noitfy_descriptor_;
}

const Noitfy& Noitfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Noitfy* Noitfy::default_instance_ = NULL;

Noitfy* Noitfy::New(::google::protobuf::Arena* arena) const {
  Noitfy* n = new Noitfy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Noitfy::Clear() {
  if (GetArenaNoVirtual() == NULL && notifyentergroup_ != NULL) delete notifyentergroup_;
  notifyentergroup_ = NULL;
  if (GetArenaNoVirtual() == NULL && notifyleavegroup_ != NULL) delete notifyleavegroup_;
  notifyleavegroup_ = NULL;
}

bool Noitfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Noitfy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.NotifyEnterGroup notifyEnterGroup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifyentergroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notifyLeaveGroup;
        break;
      }

      // optional .message.NotifyLeaveGroup notifyLeaveGroup = 2;
      case 2: {
        if (tag == 18) {
         parse_notifyLeaveGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifyleavegroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Noitfy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Noitfy)
  return false;
#undef DO_
}

void Noitfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Noitfy)
  // optional .message.NotifyEnterGroup notifyEnterGroup = 1;
  if (this->has_notifyentergroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->notifyentergroup_, output);
  }

  // optional .message.NotifyLeaveGroup notifyLeaveGroup = 2;
  if (this->has_notifyleavegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->notifyleavegroup_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.Noitfy)
}

::google::protobuf::uint8* Noitfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Noitfy)
  // optional .message.NotifyEnterGroup notifyEnterGroup = 1;
  if (this->has_notifyentergroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->notifyentergroup_, target);
  }

  // optional .message.NotifyLeaveGroup notifyLeaveGroup = 2;
  if (this->has_notifyleavegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->notifyleavegroup_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Noitfy)
  return target;
}

int Noitfy::ByteSize() const {
  int total_size = 0;

  // optional .message.NotifyEnterGroup notifyEnterGroup = 1;
  if (this->has_notifyentergroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifyentergroup_);
  }

  // optional .message.NotifyLeaveGroup notifyLeaveGroup = 2;
  if (this->has_notifyleavegroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifyleavegroup_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Noitfy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Noitfy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Noitfy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Noitfy::MergeFrom(const Noitfy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_notifyentergroup()) {
    mutable_notifyentergroup()->::message::NotifyEnterGroup::MergeFrom(from.notifyentergroup());
  }
  if (from.has_notifyleavegroup()) {
    mutable_notifyleavegroup()->::message::NotifyLeaveGroup::MergeFrom(from.notifyleavegroup());
  }
}

void Noitfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Noitfy::CopyFrom(const Noitfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Noitfy::IsInitialized() const {

  return true;
}

void Noitfy::Swap(Noitfy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Noitfy::InternalSwap(Noitfy* other) {
  std::swap(notifyentergroup_, other->notifyentergroup_);
  std::swap(notifyleavegroup_, other->notifyleavegroup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Noitfy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Noitfy_descriptor_;
  metadata.reflection = Noitfy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Noitfy

// optional .message.NotifyEnterGroup notifyEnterGroup = 1;
bool Noitfy::has_notifyentergroup() const {
  return !_is_default_instance_ && notifyentergroup_ != NULL;
}
void Noitfy::clear_notifyentergroup() {
  if (GetArenaNoVirtual() == NULL && notifyentergroup_ != NULL) delete notifyentergroup_;
  notifyentergroup_ = NULL;
}
const ::message::NotifyEnterGroup& Noitfy::notifyentergroup() const {
  // @@protoc_insertion_point(field_get:message.Noitfy.notifyEnterGroup)
  return notifyentergroup_ != NULL ? *notifyentergroup_ : *default_instance_->notifyentergroup_;
}
::message::NotifyEnterGroup* Noitfy::mutable_notifyentergroup() {
  
  if (notifyentergroup_ == NULL) {
    notifyentergroup_ = new ::message::NotifyEnterGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Noitfy.notifyEnterGroup)
  return notifyentergroup_;
}
::message::NotifyEnterGroup* Noitfy::release_notifyentergroup() {
  
  ::message::NotifyEnterGroup* temp = notifyentergroup_;
  notifyentergroup_ = NULL;
  return temp;
}
void Noitfy::set_allocated_notifyentergroup(::message::NotifyEnterGroup* notifyentergroup) {
  delete notifyentergroup_;
  notifyentergroup_ = notifyentergroup;
  if (notifyentergroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Noitfy.notifyEnterGroup)
}

// optional .message.NotifyLeaveGroup notifyLeaveGroup = 2;
bool Noitfy::has_notifyleavegroup() const {
  return !_is_default_instance_ && notifyleavegroup_ != NULL;
}
void Noitfy::clear_notifyleavegroup() {
  if (GetArenaNoVirtual() == NULL && notifyleavegroup_ != NULL) delete notifyleavegroup_;
  notifyleavegroup_ = NULL;
}
const ::message::NotifyLeaveGroup& Noitfy::notifyleavegroup() const {
  // @@protoc_insertion_point(field_get:message.Noitfy.notifyLeaveGroup)
  return notifyleavegroup_ != NULL ? *notifyleavegroup_ : *default_instance_->notifyleavegroup_;
}
::message::NotifyLeaveGroup* Noitfy::mutable_notifyleavegroup() {
  
  if (notifyleavegroup_ == NULL) {
    notifyleavegroup_ = new ::message::NotifyLeaveGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Noitfy.notifyLeaveGroup)
  return notifyleavegroup_;
}
::message::NotifyLeaveGroup* Noitfy::release_notifyleavegroup() {
  
  ::message::NotifyLeaveGroup* temp = notifyleavegroup_;
  notifyleavegroup_ = NULL;
  return temp;
}
void Noitfy::set_allocated_notifyleavegroup(::message::NotifyLeaveGroup* notifyleavegroup) {
  delete notifyleavegroup_;
  notifyleavegroup_ = notifyleavegroup;
  if (notifyleavegroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Noitfy.notifyLeaveGroup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlMessage::kReqFieldNumber;
const int ControlMessage::kResFieldNumber;
const int ControlMessage::kNotifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlMessage::ControlMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.ControlMessage)
}

void ControlMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  req_ = const_cast< ::message::Request*>(&::message::Request::default_instance());
  res_ = const_cast< ::message::Response*>(&::message::Response::default_instance());
  notify_ = const_cast< ::message::Noitfy*>(&::message::Noitfy::default_instance());
}

ControlMessage::ControlMessage(const ControlMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.ControlMessage)
}

void ControlMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  req_ = NULL;
  res_ = NULL;
  notify_ = NULL;
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:message.ControlMessage)
  SharedDtor();
}

void ControlMessage::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
    delete res_;
    delete notify_;
  }
}

void ControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlMessage_descriptor_;
}

const ControlMessage& ControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ControlMessage* ControlMessage::default_instance_ = NULL;

ControlMessage* ControlMessage::New(::google::protobuf::Arena* arena) const {
  ControlMessage* n = new ControlMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
  if (GetArenaNoVirtual() == NULL && res_ != NULL) delete res_;
  res_ = NULL;
  if (GetArenaNoVirtual() == NULL && notify_ != NULL) delete notify_;
  notify_ = NULL;
}

bool ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.ControlMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.Request req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional .message.Response res = 2;
      case 2: {
        if (tag == 18) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notify;
        break;
      }

      // optional .message.Noitfy notify = 3;
      case 3: {
        if (tag == 26) {
         parse_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.ControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.ControlMessage)
  return false;
#undef DO_
}

void ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.ControlMessage)
  // optional .message.Request req = 1;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->req_, output);
  }

  // optional .message.Response res = 2;
  if (this->has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  // optional .message.Noitfy notify = 3;
  if (this->has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->notify_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.ControlMessage)
}

::google::protobuf::uint8* ControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ControlMessage)
  // optional .message.Request req = 1;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->req_, target);
  }

  // optional .message.Response res = 2;
  if (this->has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->res_, target);
  }

  // optional .message.Noitfy notify = 3;
  if (this->has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->notify_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.ControlMessage)
  return target;
}

int ControlMessage::ByteSize() const {
  int total_size = 0;

  // optional .message.Request req = 1;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  // optional .message.Response res = 2;
  if (this->has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  // optional .message.Noitfy notify = 3;
  if (this->has_notify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notify_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControlMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlMessage::MergeFrom(const ControlMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_req()) {
    mutable_req()->::message::Request::MergeFrom(from.req());
  }
  if (from.has_res()) {
    mutable_res()->::message::Response::MergeFrom(from.res());
  }
  if (from.has_notify()) {
    mutable_notify()->::message::Noitfy::MergeFrom(from.notify());
  }
}

void ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {

  return true;
}

void ControlMessage::Swap(ControlMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlMessage::InternalSwap(ControlMessage* other) {
  std::swap(req_, other->req_);
  std::swap(res_, other->res_);
  std::swap(notify_, other->notify_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlMessage_descriptor_;
  metadata.reflection = ControlMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlMessage

// optional .message.Request req = 1;
bool ControlMessage::has_req() const {
  return !_is_default_instance_ && req_ != NULL;
}
void ControlMessage::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::message::Request& ControlMessage::req() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.req)
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
::message::Request* ControlMessage::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::message::Request;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.req)
  return req_;
}
::message::Request* ControlMessage::release_req() {
  
  ::message::Request* temp = req_;
  req_ = NULL;
  return temp;
}
void ControlMessage::set_allocated_req(::message::Request* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.req)
}

// optional .message.Response res = 2;
bool ControlMessage::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
void ControlMessage::clear_res() {
  if (GetArenaNoVirtual() == NULL && res_ != NULL) delete res_;
  res_ = NULL;
}
const ::message::Response& ControlMessage::res() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
::message::Response* ControlMessage::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::message::Response;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.res)
  return res_;
}
::message::Response* ControlMessage::release_res() {
  
  ::message::Response* temp = res_;
  res_ = NULL;
  return temp;
}
void ControlMessage::set_allocated_res(::message::Response* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.res)
}

// optional .message.Noitfy notify = 3;
bool ControlMessage::has_notify() const {
  return !_is_default_instance_ && notify_ != NULL;
}
void ControlMessage::clear_notify() {
  if (GetArenaNoVirtual() == NULL && notify_ != NULL) delete notify_;
  notify_ = NULL;
}
const ::message::Noitfy& ControlMessage::notify() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.notify)
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
}
::message::Noitfy* ControlMessage::mutable_notify() {
  
  if (notify_ == NULL) {
    notify_ = new ::message::Noitfy;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.notify)
  return notify_;
}
::message::Noitfy* ControlMessage::release_notify() {
  
  ::message::Noitfy* temp = notify_;
  notify_ = NULL;
  return temp;
}
void ControlMessage::set_allocated_notify(::message::Noitfy* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.notify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestConnect::kPlayerIndexFieldNumber;
const int PlayerRequestConnect::kPlayerIDFieldNumber;
const int PlayerRequestConnect::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestConnect::PlayerRequestConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.PlayerRequestConnect)
}

void PlayerRequestConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerRequestConnect::PlayerRequestConnect(const PlayerRequestConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.PlayerRequestConnect)
}

void PlayerRequestConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerindex_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
}

PlayerRequestConnect::~PlayerRequestConnect() {
  // @@protoc_insertion_point(destructor:message.PlayerRequestConnect)
  SharedDtor();
}

void PlayerRequestConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRequestConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRequestConnect_descriptor_;
}

const PlayerRequestConnect& PlayerRequestConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PlayerRequestConnect* PlayerRequestConnect::default_instance_ = NULL;

PlayerRequestConnect* PlayerRequestConnect::New(::google::protobuf::Arena* arena) const {
  PlayerRequestConnect* n = new PlayerRequestConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestConnect::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerRequestConnect*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerRequestConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.PlayerRequestConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerID;
        break;
      }

      // optional uint64 PlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // optional uint64 GroupID = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.PlayerRequestConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.PlayerRequestConnect)
  return false;
#undef DO_
}

void PlayerRequestConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.PlayerRequestConnect)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint64 GroupID = 3;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.PlayerRequestConnect)
}

::google::protobuf::uint8* PlayerRequestConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayerRequestConnect)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint64 GroupID = 3;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.PlayerRequestConnect)
  return target;
}

int PlayerRequestConnect::ByteSize() const {
  int total_size = 0;

  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint64 GroupID = 3;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestConnect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerRequestConnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestConnect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRequestConnect::MergeFrom(const PlayerRequestConnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void PlayerRequestConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestConnect::CopyFrom(const PlayerRequestConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestConnect::IsInitialized() const {

  return true;
}

void PlayerRequestConnect::Swap(PlayerRequestConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestConnect::InternalSwap(PlayerRequestConnect* other) {
  std::swap(playerindex_, other->playerindex_);
  std::swap(playerid_, other->playerid_);
  std::swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRequestConnect_descriptor_;
  metadata.reflection = PlayerRequestConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerRequestConnect

// optional uint32 PlayerIndex = 1;
void PlayerRequestConnect::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 PlayerRequestConnect::playerindex() const {
  // @@protoc_insertion_point(field_get:message.PlayerRequestConnect.PlayerIndex)
  return playerindex_;
}
 void PlayerRequestConnect::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerRequestConnect.PlayerIndex)
}

// optional uint64 PlayerID = 2;
void PlayerRequestConnect::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayerRequestConnect::playerid() const {
  // @@protoc_insertion_point(field_get:message.PlayerRequestConnect.PlayerID)
  return playerid_;
}
 void PlayerRequestConnect::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerRequestConnect.PlayerID)
}

// optional uint64 GroupID = 3;
void PlayerRequestConnect::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayerRequestConnect::groupid() const {
  // @@protoc_insertion_point(field_get:message.PlayerRequestConnect.GroupID)
  return groupid_;
}
 void PlayerRequestConnect::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerRequestConnect.GroupID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestConnectAck::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestConnectAck::PlayerRequestConnectAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.PlayerRequestConnectAck)
}

void PlayerRequestConnectAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerRequestConnectAck::PlayerRequestConnectAck(const PlayerRequestConnectAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.PlayerRequestConnectAck)
}

void PlayerRequestConnectAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  code_ = 0;
}

PlayerRequestConnectAck::~PlayerRequestConnectAck() {
  // @@protoc_insertion_point(destructor:message.PlayerRequestConnectAck)
  SharedDtor();
}

void PlayerRequestConnectAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRequestConnectAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestConnectAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRequestConnectAck_descriptor_;
}

const PlayerRequestConnectAck& PlayerRequestConnectAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PlayerRequestConnectAck* PlayerRequestConnectAck::default_instance_ = NULL;

PlayerRequestConnectAck* PlayerRequestConnectAck::New(::google::protobuf::Arena* arena) const {
  PlayerRequestConnectAck* n = new PlayerRequestConnectAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestConnectAck::Clear() {
  code_ = 0;
}

bool PlayerRequestConnectAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.PlayerRequestConnectAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.VOICE_ACK Code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::message::VOICE_ACK >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.PlayerRequestConnectAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.PlayerRequestConnectAck)
  return false;
#undef DO_
}

void PlayerRequestConnectAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.PlayerRequestConnectAck)
  // optional .message.VOICE_ACK Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.PlayerRequestConnectAck)
}

::google::protobuf::uint8* PlayerRequestConnectAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayerRequestConnectAck)
  // optional .message.VOICE_ACK Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.PlayerRequestConnectAck)
  return target;
}

int PlayerRequestConnectAck::ByteSize() const {
  int total_size = 0;

  // optional .message.VOICE_ACK Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestConnectAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerRequestConnectAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestConnectAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRequestConnectAck::MergeFrom(const PlayerRequestConnectAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void PlayerRequestConnectAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestConnectAck::CopyFrom(const PlayerRequestConnectAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestConnectAck::IsInitialized() const {

  return true;
}

void PlayerRequestConnectAck::Swap(PlayerRequestConnectAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestConnectAck::InternalSwap(PlayerRequestConnectAck* other) {
  std::swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestConnectAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRequestConnectAck_descriptor_;
  metadata.reflection = PlayerRequestConnectAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerRequestConnectAck

// optional .message.VOICE_ACK Code = 1;
void PlayerRequestConnectAck::clear_code() {
  code_ = 0;
}
 ::message::VOICE_ACK PlayerRequestConnectAck::code() const {
  // @@protoc_insertion_point(field_get:message.PlayerRequestConnectAck.Code)
  return static_cast< ::message::VOICE_ACK >(code_);
}
 void PlayerRequestConnectAck::set_code(::message::VOICE_ACK value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerRequestConnectAck.Code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceData::kPlayerIndexFieldNumber;
const int VoiceData::kPlayerIDFieldNumber;
const int VoiceData::kFrameIndexFieldNumber;
const int VoiceData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceData::VoiceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VoiceData)
}

void VoiceData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoiceData::VoiceData(const VoiceData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VoiceData)
}

void VoiceData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerindex_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  frameindex_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VoiceData::~VoiceData() {
  // @@protoc_insertion_point(destructor:message.VoiceData)
  SharedDtor();
}

void VoiceData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VoiceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceData_descriptor_;
}

const VoiceData& VoiceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

VoiceData* VoiceData::default_instance_ = NULL;

VoiceData* VoiceData::New(::google::protobuf::Arena* arena) const {
  VoiceData* n = new VoiceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoiceData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, frameindex_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VoiceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VoiceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerID;
        break;
      }

      // optional uint64 PlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FrameIndex;
        break;
      }

      // optional uint32 FrameIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_FrameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Data;
        break;
      }

      // optional bytes Data = 4;
      case 4: {
        if (tag == 34) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VoiceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VoiceData)
  return false;
#undef DO_
}

void VoiceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VoiceData)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 FrameIndex = 3;
  if (this->frameindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frameindex(), output);
  }

  // optional bytes Data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.VoiceData)
}

::google::protobuf::uint8* VoiceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VoiceData)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 FrameIndex = 3;
  if (this->frameindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frameindex(), target);
  }

  // optional bytes Data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.VoiceData)
  return target;
}

int VoiceData::ByteSize() const {
  int total_size = 0;

  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 FrameIndex = 3;
  if (this->frameindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frameindex());
  }

  // optional bytes Data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoiceData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceData::MergeFrom(const VoiceData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.frameindex() != 0) {
    set_frameindex(from.frameindex());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void VoiceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceData::CopyFrom(const VoiceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceData::IsInitialized() const {

  return true;
}

void VoiceData::Swap(VoiceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceData::InternalSwap(VoiceData* other) {
  std::swap(playerindex_, other->playerindex_);
  std::swap(playerid_, other->playerid_);
  std::swap(frameindex_, other->frameindex_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceData_descriptor_;
  metadata.reflection = VoiceData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceData

// optional uint32 PlayerIndex = 1;
void VoiceData::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 VoiceData::playerindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.PlayerIndex)
  return playerindex_;
}
 void VoiceData::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.PlayerIndex)
}

// optional uint64 PlayerID = 2;
void VoiceData::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 VoiceData::playerid() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.PlayerID)
  return playerid_;
}
 void VoiceData::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.PlayerID)
}

// optional uint32 FrameIndex = 3;
void VoiceData::clear_frameindex() {
  frameindex_ = 0u;
}
 ::google::protobuf::uint32 VoiceData::frameindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.FrameIndex)
  return frameindex_;
}
 void VoiceData::set_frameindex(::google::protobuf::uint32 value) {
  
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.FrameIndex)
}

// optional bytes Data = 4;
void VoiceData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VoiceData::data() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoiceData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VoiceData.Data)
}
 void VoiceData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VoiceData.Data)
}
 void VoiceData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VoiceData.Data)
}
 ::std::string* VoiceData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:message.VoiceData.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VoiceData::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoiceData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:message.VoiceData.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceHeartbeat::kPlayerIndexFieldNumber;
const int VoiceHeartbeat::kPlayerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceHeartbeat::VoiceHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VoiceHeartbeat)
}

void VoiceHeartbeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoiceHeartbeat::VoiceHeartbeat(const VoiceHeartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VoiceHeartbeat)
}

void VoiceHeartbeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerindex_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
}

VoiceHeartbeat::~VoiceHeartbeat() {
  // @@protoc_insertion_point(destructor:message.VoiceHeartbeat)
  SharedDtor();
}

void VoiceHeartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoiceHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceHeartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceHeartbeat_descriptor_;
}

const VoiceHeartbeat& VoiceHeartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

VoiceHeartbeat* VoiceHeartbeat::default_instance_ = NULL;

VoiceHeartbeat* VoiceHeartbeat::New(::google::protobuf::Arena* arena) const {
  VoiceHeartbeat* n = new VoiceHeartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceHeartbeat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoiceHeartbeat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool VoiceHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VoiceHeartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerID;
        break;
      }

      // optional uint64 PlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VoiceHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VoiceHeartbeat)
  return false;
#undef DO_
}

void VoiceHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VoiceHeartbeat)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.VoiceHeartbeat)
}

::google::protobuf::uint8* VoiceHeartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VoiceHeartbeat)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.VoiceHeartbeat)
  return target;
}

int VoiceHeartbeat::ByteSize() const {
  int total_size = 0;

  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoiceHeartbeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceHeartbeat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceHeartbeat::MergeFrom(const VoiceHeartbeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void VoiceHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceHeartbeat::CopyFrom(const VoiceHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceHeartbeat::IsInitialized() const {

  return true;
}

void VoiceHeartbeat::Swap(VoiceHeartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceHeartbeat::InternalSwap(VoiceHeartbeat* other) {
  std::swap(playerindex_, other->playerindex_);
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceHeartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceHeartbeat_descriptor_;
  metadata.reflection = VoiceHeartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceHeartbeat

// optional uint32 PlayerIndex = 1;
void VoiceHeartbeat::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 VoiceHeartbeat::playerindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceHeartbeat.PlayerIndex)
  return playerindex_;
}
 void VoiceHeartbeat::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceHeartbeat.PlayerIndex)
}

// optional uint64 PlayerID = 2;
void VoiceHeartbeat::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 VoiceHeartbeat::playerid() const {
  // @@protoc_insertion_point(field_get:message.VoiceHeartbeat.PlayerID)
  return playerid_;
}
 void VoiceHeartbeat::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceHeartbeat.PlayerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceMessage::kPlayerRequestConnectFieldNumber;
const int VoiceMessage::kPlayerRequestConnectAckFieldNumber;
const int VoiceMessage::kVoiceDataFieldNumber;
const int VoiceMessage::kVoiceHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceMessage::VoiceMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VoiceMessage)
}

void VoiceMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  playerrequestconnect_ = const_cast< ::message::PlayerRequestConnect*>(&::message::PlayerRequestConnect::default_instance());
  playerrequestconnectack_ = const_cast< ::message::PlayerRequestConnectAck*>(&::message::PlayerRequestConnectAck::default_instance());
  voicedata_ = const_cast< ::message::VoiceData*>(&::message::VoiceData::default_instance());
  voiceheartbeat_ = const_cast< ::message::VoiceHeartbeat*>(&::message::VoiceHeartbeat::default_instance());
}

VoiceMessage::VoiceMessage(const VoiceMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VoiceMessage)
}

void VoiceMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerrequestconnect_ = NULL;
  playerrequestconnectack_ = NULL;
  voicedata_ = NULL;
  voiceheartbeat_ = NULL;
}

VoiceMessage::~VoiceMessage() {
  // @@protoc_insertion_point(destructor:message.VoiceMessage)
  SharedDtor();
}

void VoiceMessage::SharedDtor() {
  if (this != default_instance_) {
    delete playerrequestconnect_;
    delete playerrequestconnectack_;
    delete voicedata_;
    delete voiceheartbeat_;
  }
}

void VoiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceMessage_descriptor_;
}

const VoiceMessage& VoiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

VoiceMessage* VoiceMessage::default_instance_ = NULL;

VoiceMessage* VoiceMessage::New(::google::protobuf::Arena* arena) const {
  VoiceMessage* n = new VoiceMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnect_ != NULL) delete playerrequestconnect_;
  playerrequestconnect_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerrequestconnectack_ != NULL) delete playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
  if (GetArenaNoVirtual() == NULL && voicedata_ != NULL) delete voicedata_;
  voicedata_ = NULL;
  if (GetArenaNoVirtual() == NULL && voiceheartbeat_ != NULL) delete voiceheartbeat_;
  voiceheartbeat_ = NULL;
}

bool VoiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VoiceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.PlayerRequestConnect playerRequestConnect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrequestconnect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerRequestConnectAck;
        break;
      }

      // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
      case 2: {
        if (tag == 18) {
         parse_playerRequestConnectAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrequestconnectack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voiceData;
        break;
      }

      // optional .message.VoiceData voiceData = 3;
      case 3: {
        if (tag == 26) {
         parse_voiceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voicedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_voiceHeartbeat;
        break;
      }

      // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
      case 4: {
        if (tag == 34) {
         parse_voiceHeartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voiceheartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VoiceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VoiceMessage)
  return false;
#undef DO_
}

void VoiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VoiceMessage)
  // optional .message.PlayerRequestConnect playerRequestConnect = 1;
  if (this->has_playerrequestconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playerrequestconnect_, output);
  }

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  if (this->has_playerrequestconnectack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerrequestconnectack_, output);
  }

  // optional .message.VoiceData voiceData = 3;
  if (this->has_voicedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->voicedata_, output);
  }

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  if (this->has_voiceheartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->voiceheartbeat_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.VoiceMessage)
}

::google::protobuf::uint8* VoiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VoiceMessage)
  // optional .message.PlayerRequestConnect playerRequestConnect = 1;
  if (this->has_playerrequestconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->playerrequestconnect_, target);
  }

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  if (this->has_playerrequestconnectack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->playerrequestconnectack_, target);
  }

  // optional .message.VoiceData voiceData = 3;
  if (this->has_voicedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->voicedata_, target);
  }

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  if (this->has_voiceheartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->voiceheartbeat_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.VoiceMessage)
  return target;
}

int VoiceMessage::ByteSize() const {
  int total_size = 0;

  // optional .message.PlayerRequestConnect playerRequestConnect = 1;
  if (this->has_playerrequestconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerrequestconnect_);
  }

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  if (this->has_playerrequestconnectack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerrequestconnectack_);
  }

  // optional .message.VoiceData voiceData = 3;
  if (this->has_voicedata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voicedata_);
  }

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  if (this->has_voiceheartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voiceheartbeat_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoiceMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceMessage::MergeFrom(const VoiceMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_playerrequestconnect()) {
    mutable_playerrequestconnect()->::message::PlayerRequestConnect::MergeFrom(from.playerrequestconnect());
  }
  if (from.has_playerrequestconnectack()) {
    mutable_playerrequestconnectack()->::message::PlayerRequestConnectAck::MergeFrom(from.playerrequestconnectack());
  }
  if (from.has_voicedata()) {
    mutable_voicedata()->::message::VoiceData::MergeFrom(from.voicedata());
  }
  if (from.has_voiceheartbeat()) {
    mutable_voiceheartbeat()->::message::VoiceHeartbeat::MergeFrom(from.voiceheartbeat());
  }
}

void VoiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceMessage::CopyFrom(const VoiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceMessage::IsInitialized() const {

  return true;
}

void VoiceMessage::Swap(VoiceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceMessage::InternalSwap(VoiceMessage* other) {
  std::swap(playerrequestconnect_, other->playerrequestconnect_);
  std::swap(playerrequestconnectack_, other->playerrequestconnectack_);
  std::swap(voicedata_, other->voicedata_);
  std::swap(voiceheartbeat_, other->voiceheartbeat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceMessage_descriptor_;
  metadata.reflection = VoiceMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceMessage

// optional .message.PlayerRequestConnect playerRequestConnect = 1;
bool VoiceMessage::has_playerrequestconnect() const {
  return !_is_default_instance_ && playerrequestconnect_ != NULL;
}
void VoiceMessage::clear_playerrequestconnect() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnect_ != NULL) delete playerrequestconnect_;
  playerrequestconnect_ = NULL;
}
const ::message::PlayerRequestConnect& VoiceMessage::playerrequestconnect() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.playerRequestConnect)
  return playerrequestconnect_ != NULL ? *playerrequestconnect_ : *default_instance_->playerrequestconnect_;
}
::message::PlayerRequestConnect* VoiceMessage::mutable_playerrequestconnect() {
  
  if (playerrequestconnect_ == NULL) {
    playerrequestconnect_ = new ::message::PlayerRequestConnect;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.playerRequestConnect)
  return playerrequestconnect_;
}
::message::PlayerRequestConnect* VoiceMessage::release_playerrequestconnect() {
  
  ::message::PlayerRequestConnect* temp = playerrequestconnect_;
  playerrequestconnect_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_playerrequestconnect(::message::PlayerRequestConnect* playerrequestconnect) {
  delete playerrequestconnect_;
  playerrequestconnect_ = playerrequestconnect;
  if (playerrequestconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.playerRequestConnect)
}

// optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
bool VoiceMessage::has_playerrequestconnectack() const {
  return !_is_default_instance_ && playerrequestconnectack_ != NULL;
}
void VoiceMessage::clear_playerrequestconnectack() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnectack_ != NULL) delete playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
}
const ::message::PlayerRequestConnectAck& VoiceMessage::playerrequestconnectack() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.playerRequestConnectAck)
  return playerrequestconnectack_ != NULL ? *playerrequestconnectack_ : *default_instance_->playerrequestconnectack_;
}
::message::PlayerRequestConnectAck* VoiceMessage::mutable_playerrequestconnectack() {
  
  if (playerrequestconnectack_ == NULL) {
    playerrequestconnectack_ = new ::message::PlayerRequestConnectAck;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.playerRequestConnectAck)
  return playerrequestconnectack_;
}
::message::PlayerRequestConnectAck* VoiceMessage::release_playerrequestconnectack() {
  
  ::message::PlayerRequestConnectAck* temp = playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_playerrequestconnectack(::message::PlayerRequestConnectAck* playerrequestconnectack) {
  delete playerrequestconnectack_;
  playerrequestconnectack_ = playerrequestconnectack;
  if (playerrequestconnectack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.playerRequestConnectAck)
}

// optional .message.VoiceData voiceData = 3;
bool VoiceMessage::has_voicedata() const {
  return !_is_default_instance_ && voicedata_ != NULL;
}
void VoiceMessage::clear_voicedata() {
  if (GetArenaNoVirtual() == NULL && voicedata_ != NULL) delete voicedata_;
  voicedata_ = NULL;
}
const ::message::VoiceData& VoiceMessage::voicedata() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.voiceData)
  return voicedata_ != NULL ? *voicedata_ : *default_instance_->voicedata_;
}
::message::VoiceData* VoiceMessage::mutable_voicedata() {
  
  if (voicedata_ == NULL) {
    voicedata_ = new ::message::VoiceData;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.voiceData)
  return voicedata_;
}
::message::VoiceData* VoiceMessage::release_voicedata() {
  
  ::message::VoiceData* temp = voicedata_;
  voicedata_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_voicedata(::message::VoiceData* voicedata) {
  delete voicedata_;
  voicedata_ = voicedata;
  if (voicedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.voiceData)
}

// optional .message.VoiceHeartbeat voiceHeartbeat = 4;
bool VoiceMessage::has_voiceheartbeat() const {
  return !_is_default_instance_ && voiceheartbeat_ != NULL;
}
void VoiceMessage::clear_voiceheartbeat() {
  if (GetArenaNoVirtual() == NULL && voiceheartbeat_ != NULL) delete voiceheartbeat_;
  voiceheartbeat_ = NULL;
}
const ::message::VoiceHeartbeat& VoiceMessage::voiceheartbeat() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.voiceHeartbeat)
  return voiceheartbeat_ != NULL ? *voiceheartbeat_ : *default_instance_->voiceheartbeat_;
}
::message::VoiceHeartbeat* VoiceMessage::mutable_voiceheartbeat() {
  
  if (voiceheartbeat_ == NULL) {
    voiceheartbeat_ = new ::message::VoiceHeartbeat;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.voiceHeartbeat)
  return voiceheartbeat_;
}
::message::VoiceHeartbeat* VoiceMessage::release_voiceheartbeat() {
  
  ::message::VoiceHeartbeat* temp = voiceheartbeat_;
  voiceheartbeat_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_voiceheartbeat(::message::VoiceHeartbeat* voiceheartbeat) {
  delete voiceheartbeat_;
  voiceheartbeat_ = voiceheartbeat;
  if (voiceheartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.voiceHeartbeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
