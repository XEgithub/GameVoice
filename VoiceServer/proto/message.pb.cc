// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* Handshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdjustPlayerAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdjustPlayerAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayRequestConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayRequestConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRequestConnectAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRequestConnectAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceHeartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceHeartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CONST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VOICE_MSG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VOICE_ACK_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Handshake_descriptor_ = file->message_type(0);
  static const int Handshake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, productkey_),
  };
  Handshake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Handshake_descriptor_,
      Handshake::default_instance_,
      Handshake_offsets_,
      -1,
      -1,
      -1,
      sizeof(Handshake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _is_default_instance_));
  HandshakeAck_descriptor_ = file->message_type(1);
  static const int HandshakeAck_offsets_[1] = {
  };
  HandshakeAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HandshakeAck_descriptor_,
      HandshakeAck::default_instance_,
      HandshakeAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(HandshakeAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _is_default_instance_));
  CreateGroup_descriptor_ = file->message_type(2);
  static const int CreateGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, groupid_),
  };
  CreateGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateGroup_descriptor_,
      CreateGroup::default_instance_,
      CreateGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, _is_default_instance_));
  AddPlayer_descriptor_ = file->message_type(3);
  static const int AddPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, canspeak_),
  };
  AddPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddPlayer_descriptor_,
      AddPlayer::default_instance_,
      AddPlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayer, _is_default_instance_));
  AddPlayerAck_descriptor_ = file->message_type(4);
  static const int AddPlayerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, playerindex_),
  };
  AddPlayerAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddPlayerAck_descriptor_,
      AddPlayerAck::default_instance_,
      AddPlayerAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddPlayerAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerAck, _is_default_instance_));
  RemovePlayer_descriptor_ = file->message_type(5);
  static const int RemovePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, playerid_),
  };
  RemovePlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemovePlayer_descriptor_,
      RemovePlayer::default_instance_,
      RemovePlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(RemovePlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayer, _is_default_instance_));
  DestroyGroup_descriptor_ = file->message_type(6);
  static const int DestroyGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, groupid_),
  };
  DestroyGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DestroyGroup_descriptor_,
      DestroyGroup::default_instance_,
      DestroyGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(DestroyGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, _is_default_instance_));
  AdjustPlayerAttr_descriptor_ = file->message_type(7);
  static const int AdjustPlayerAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, canspeak_),
  };
  AdjustPlayerAttr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdjustPlayerAttr_descriptor_,
      AdjustPlayerAttr::default_instance_,
      AdjustPlayerAttr_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdjustPlayerAttr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPlayerAttr, _is_default_instance_));
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, creategroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, addplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, removeplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, destroygroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, adjustplayerattr_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(9);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, handshakeack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, addplayerack_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  ControlMessage_descriptor_ = file->message_type(10);
  static const int ControlMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, res_),
  };
  ControlMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlMessage_descriptor_,
      ControlMessage::default_instance_,
      ControlMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControlMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _is_default_instance_));
  PlayRequestConnect_descriptor_ = file->message_type(11);
  static const int PlayRequestConnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayRequestConnect, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayRequestConnect, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayRequestConnect, groupid_),
  };
  PlayRequestConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayRequestConnect_descriptor_,
      PlayRequestConnect::default_instance_,
      PlayRequestConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayRequestConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayRequestConnect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayRequestConnect, _is_default_instance_));
  PlayerRequestConnectAck_descriptor_ = file->message_type(12);
  static const int PlayerRequestConnectAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnectAck, code_),
  };
  PlayerRequestConnectAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerRequestConnectAck_descriptor_,
      PlayerRequestConnectAck::default_instance_,
      PlayerRequestConnectAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerRequestConnectAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnectAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequestConnectAck, _is_default_instance_));
  VoiceData_descriptor_ = file->message_type(13);
  static const int VoiceData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, frameindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, data_),
  };
  VoiceData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceData_descriptor_,
      VoiceData::default_instance_,
      VoiceData_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoiceData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceData, _is_default_instance_));
  VoiceHeartbeat_descriptor_ = file->message_type(14);
  static const int VoiceHeartbeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, playerid_),
  };
  VoiceHeartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceHeartbeat_descriptor_,
      VoiceHeartbeat::default_instance_,
      VoiceHeartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoiceHeartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceHeartbeat, _is_default_instance_));
  VoiceMessage_descriptor_ = file->message_type(15);
  static const int VoiceMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, playerrequestconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, playerrequestconnectack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, voicedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, voiceheartbeat_),
  };
  VoiceMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceMessage_descriptor_,
      VoiceMessage::default_instance_,
      VoiceMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoiceMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessage, _is_default_instance_));
  CONST_descriptor_ = file->enum_type(0);
  MSG_descriptor_ = file->enum_type(1);
  ACK_descriptor_ = file->enum_type(2);
  VOICE_MSG_descriptor_ = file->enum_type(3);
  VOICE_ACK_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Handshake_descriptor_, &Handshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HandshakeAck_descriptor_, &HandshakeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateGroup_descriptor_, &CreateGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddPlayer_descriptor_, &AddPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddPlayerAck_descriptor_, &AddPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemovePlayer_descriptor_, &RemovePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DestroyGroup_descriptor_, &DestroyGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdjustPlayerAttr_descriptor_, &AdjustPlayerAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlMessage_descriptor_, &ControlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayRequestConnect_descriptor_, &PlayRequestConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerRequestConnectAck_descriptor_, &PlayerRequestConnectAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceData_descriptor_, &VoiceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceHeartbeat_descriptor_, &VoiceHeartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceMessage_descriptor_, &VoiceMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Handshake::default_instance_;
  delete Handshake_reflection_;
  delete HandshakeAck::default_instance_;
  delete HandshakeAck_reflection_;
  delete CreateGroup::default_instance_;
  delete CreateGroup_reflection_;
  delete AddPlayer::default_instance_;
  delete AddPlayer_reflection_;
  delete AddPlayerAck::default_instance_;
  delete AddPlayerAck_reflection_;
  delete RemovePlayer::default_instance_;
  delete RemovePlayer_reflection_;
  delete DestroyGroup::default_instance_;
  delete DestroyGroup_reflection_;
  delete AdjustPlayerAttr::default_instance_;
  delete AdjustPlayerAttr_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete ControlMessage::default_instance_;
  delete ControlMessage_reflection_;
  delete PlayRequestConnect::default_instance_;
  delete PlayRequestConnect_reflection_;
  delete PlayerRequestConnectAck::default_instance_;
  delete PlayerRequestConnectAck_reflection_;
  delete VoiceData::default_instance_;
  delete VoiceData_reflection_;
  delete VoiceHeartbeat::default_instance_;
  delete VoiceHeartbeat_reflection_;
  delete VoiceMessage::default_instance_;
  delete VoiceMessage_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\007message\"\037\n\tHandshake\022\022\n"
    "\nProductKey\030\002 \001(\t\"\016\n\014HandshakeAck\"\036\n\013Cre"
    "ateGroup\022\017\n\007groupId\030\001 \001(\004\"@\n\tAddPlayer\022\017"
    "\n\007groupId\030\001 \001(\004\022\020\n\010playerId\030\002 \001(\004\022\020\n\010can"
    "Speak\030\003 \001(\r\"F\n\014AddPlayerAck\022\017\n\007groupId\030\001"
    " \001(\004\022\020\n\010playerId\030\002 \001(\004\022\023\n\013playerIndex\030\003 "
    "\001(\r\"1\n\014RemovePlayer\022\017\n\007groupId\030\001 \001(\004\022\020\n\010"
    "playerId\030\002 \001(\004\"\037\n\014DestroyGroup\022\017\n\007groupI"
    "d\030\001 \001(\004\"6\n\020AdjustPlayerAttr\022\020\n\010playerId\030"
    "\001 \001(\004\022\020\n\010canSpeak\030\002 \001(\r\"\221\002\n\007Request\022%\n\th"
    "andshake\030\001 \001(\0132\022.message.Handshake\022)\n\013cr"
    "eateGroup\030\002 \001(\0132\024.message.CreateGroup\022%\n"
    "\taddPlayer\030\003 \001(\0132\022.message.AddPlayer\022+\n\014"
    "removePlayer\030\004 \001(\0132\025.message.RemovePlaye"
    "r\022+\n\014destroyGroup\030\005 \001(\0132\025.message.Destro"
    "yGroup\0223\n\020adjustPlayerAttr\030\006 \001(\0132\031.messa"
    "ge.AdjustPlayerAttr\"\220\001\n\010Response\022\032\n\004Code"
    "\030\001 \001(\0162\014.message.ACK\022\016\n\006ErrMsg\030\002 \001(\t\022+\n\014"
    "handshakeAck\030\003 \001(\0132\025.message.HandshakeAc"
    "k\022+\n\014addPlayerAck\030\004 \001(\0132\025.message.AddPla"
    "yerAck\"O\n\016ControlMessage\022\035\n\003req\030\001 \001(\0132\020."
    "message.Request\022\036\n\003res\030\002 \001(\0132\021.message.R"
    "esponse\"L\n\022PlayRequestConnect\022\023\n\013PlayerI"
    "ndex\030\001 \001(\r\022\020\n\010PlayerID\030\002 \001(\004\022\017\n\007GroupID\030"
    "\003 \001(\004\";\n\027PlayerRequestConnectAck\022 \n\004Code"
    "\030\001 \001(\0162\022.message.VOICE_ACK\"T\n\tVoiceData\022"
    "\023\n\013PlayerIndex\030\001 \001(\r\022\020\n\010PlayerID\030\002 \001(\004\022\022"
    "\n\nFrameIndex\030\003 \001(\r\022\014\n\004Data\030\004 \001(\014\"7\n\016Voic"
    "eHeartbeat\022\023\n\013PlayerIndex\030\001 \001(\r\022\020\n\010Playe"
    "rID\030\002 \001(\004\"\344\001\n\014VoiceMessage\0229\n\024playerRequ"
    "estConnect\030\001 \001(\0132\033.message.PlayRequestCo"
    "nnect\022A\n\027playerRequestConnectAck\030\002 \001(\0132 "
    ".message.PlayerRequestConnectAck\022%\n\tvoic"
    "eData\030\003 \001(\0132\022.message.VoiceData\022/\n\016voice"
    "Heartbeat\030\004 \001(\0132\027.message.VoiceHeartbeat"
    "*N\n\005CONST\022\017\n\013CONST_VALUE\020\000\022\024\n\017MAX_PACKET"
    "_SIZE\020\200\010\022\032\n\025MAX_VOICE_PACKET_SIZE\020\200\010\032\002\020\001"
    "*\274\001\n\003MSG\022\010\n\004NONE\020\000\022\r\n\tHANDSHAKE\020\001\022\021\n\rHAN"
    "DSHAKE_ACK\020\002\022\020\n\014CREATE_GROUP\020\003\022\016\n\nADD_PL"
    "AYER\020\004\022\022\n\016ADD_PLAYER_ACK\020\005\022\021\n\rREMOVE_PLA"
    "YER\020\006\022\021\n\rDESTROY_GROUP\020\007\022\026\n\022ADJUST_PLAYE"
    "R_ATTR\020\010\022\025\n\021ADJUST_GROUP_ATTR\020\t*:\n\003ACK\022\006"
    "\n\002OK\020\000\022\024\n\020HANDSHAKE_FAILED\020\001\022\025\n\021ADD_PLAY"
    "ER_FAILED\020\002*r\n\tVOICE_MSG\022\022\n\016VOICE_MSG_NO"
    "NE\020\000\022\023\n\017REQEUST_CONNECT\020\001\022\027\n\023REQEUST_CON"
    "NECT_ACK\020\002\022\016\n\nVOICE_DATA\020\003\022\023\n\017VOICE_HEAR"
    "TBEAT\020\004*\031\n\tVOICE_ACK\022\014\n\010VOICE_OK\020\000b\006prot"
    "o3", 1882);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Handshake::default_instance_ = new Handshake();
  HandshakeAck::default_instance_ = new HandshakeAck();
  CreateGroup::default_instance_ = new CreateGroup();
  AddPlayer::default_instance_ = new AddPlayer();
  AddPlayerAck::default_instance_ = new AddPlayerAck();
  RemovePlayer::default_instance_ = new RemovePlayer();
  DestroyGroup::default_instance_ = new DestroyGroup();
  AdjustPlayerAttr::default_instance_ = new AdjustPlayerAttr();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  ControlMessage::default_instance_ = new ControlMessage();
  PlayRequestConnect::default_instance_ = new PlayRequestConnect();
  PlayerRequestConnectAck::default_instance_ = new PlayerRequestConnectAck();
  VoiceData::default_instance_ = new VoiceData();
  VoiceHeartbeat::default_instance_ = new VoiceHeartbeat();
  VoiceMessage::default_instance_ = new VoiceMessage();
  Handshake::default_instance_->InitAsDefaultInstance();
  HandshakeAck::default_instance_->InitAsDefaultInstance();
  CreateGroup::default_instance_->InitAsDefaultInstance();
  AddPlayer::default_instance_->InitAsDefaultInstance();
  AddPlayerAck::default_instance_->InitAsDefaultInstance();
  RemovePlayer::default_instance_->InitAsDefaultInstance();
  DestroyGroup::default_instance_->InitAsDefaultInstance();
  AdjustPlayerAttr::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ControlMessage::default_instance_->InitAsDefaultInstance();
  PlayRequestConnect::default_instance_->InitAsDefaultInstance();
  PlayerRequestConnectAck::default_instance_->InitAsDefaultInstance();
  VoiceData::default_instance_->InitAsDefaultInstance();
  VoiceHeartbeat::default_instance_->InitAsDefaultInstance();
  VoiceMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONST_descriptor_;
}
bool CONST_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACK_descriptor_;
}
bool ACK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VOICE_MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VOICE_MSG_descriptor_;
}
bool VOICE_MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VOICE_ACK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VOICE_ACK_descriptor_;
}
bool VOICE_ACK_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handshake::kProductKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handshake::Handshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Handshake)
}

void Handshake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Handshake::Handshake(const Handshake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Handshake)
}

void Handshake::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  productkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:message.Handshake)
  SharedDtor();
}

void Handshake::SharedDtor() {
  productkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Handshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handshake_descriptor_;
}

const Handshake& Handshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Handshake* Handshake::default_instance_ = NULL;

Handshake* Handshake::New(::google::protobuf::Arena* arena) const {
  Handshake* n = new Handshake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Handshake::Clear() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Handshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProductKey = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productkey().data(), this->productkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.Handshake.ProductKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Handshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Handshake)
  return false;
#undef DO_
}

void Handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Handshake)
  // optional string ProductKey = 2;
  if (this->productkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productkey().data(), this->productkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Handshake.ProductKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.Handshake)
}

::google::protobuf::uint8* Handshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Handshake)
  // optional string ProductKey = 2;
  if (this->productkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productkey().data(), this->productkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Handshake.ProductKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Handshake)
  return target;
}

int Handshake::ByteSize() const {
  int total_size = 0;

  // optional string ProductKey = 2;
  if (this->productkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productkey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handshake::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Handshake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Handshake>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.productkey().size() > 0) {

    productkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productkey_);
  }
}

void Handshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {

  return true;
}

void Handshake::Swap(Handshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handshake::InternalSwap(Handshake* other) {
  productkey_.Swap(&other->productkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Handshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handshake_descriptor_;
  metadata.reflection = Handshake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Handshake

// optional string ProductKey = 2;
void Handshake::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Handshake::productkey() const {
  // @@protoc_insertion_point(field_get:message.Handshake.ProductKey)
  return productkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Handshake::set_productkey(const ::std::string& value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Handshake.ProductKey)
}
 void Handshake::set_productkey(const char* value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Handshake.ProductKey)
}
 void Handshake::set_productkey(const char* value, size_t size) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Handshake.ProductKey)
}
 ::std::string* Handshake::mutable_productkey() {
  
  // @@protoc_insertion_point(field_mutable:message.Handshake.ProductKey)
  return productkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Handshake::release_productkey() {
  
  return productkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Handshake::set_allocated_productkey(::std::string* productkey) {
  if (productkey != NULL) {
    
  } else {
    
  }
  productkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:message.Handshake.ProductKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandshakeAck::HandshakeAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.HandshakeAck)
}

void HandshakeAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HandshakeAck::HandshakeAck(const HandshakeAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.HandshakeAck)
}

void HandshakeAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

HandshakeAck::~HandshakeAck() {
  // @@protoc_insertion_point(destructor:message.HandshakeAck)
  SharedDtor();
}

void HandshakeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeAck_descriptor_;
}

const HandshakeAck& HandshakeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

HandshakeAck* HandshakeAck::default_instance_ = NULL;

HandshakeAck* HandshakeAck::New(::google::protobuf::Arena* arena) const {
  HandshakeAck* n = new HandshakeAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandshakeAck::Clear() {
}

bool HandshakeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.HandshakeAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:message.HandshakeAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.HandshakeAck)
  return false;
#undef DO_
}

void HandshakeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.HandshakeAck)
  // @@protoc_insertion_point(serialize_end:message.HandshakeAck)
}

::google::protobuf::uint8* HandshakeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.HandshakeAck)
  // @@protoc_insertion_point(serialize_to_array_end:message.HandshakeAck)
  return target;
}

int HandshakeAck::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HandshakeAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HandshakeAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeAck::MergeFrom(const HandshakeAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void HandshakeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeAck::CopyFrom(const HandshakeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeAck::IsInitialized() const {

  return true;
}

void HandshakeAck::Swap(HandshakeAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandshakeAck::InternalSwap(HandshakeAck* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandshakeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeAck_descriptor_;
  metadata.reflection = HandshakeAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HandshakeAck

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroup::CreateGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.CreateGroup)
}

void CreateGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateGroup::CreateGroup(const CreateGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.CreateGroup)
}

void CreateGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
}

CreateGroup::~CreateGroup() {
  // @@protoc_insertion_point(destructor:message.CreateGroup)
  SharedDtor();
}

void CreateGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroup_descriptor_;
}

const CreateGroup& CreateGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CreateGroup* CreateGroup::default_instance_ = NULL;

CreateGroup* CreateGroup::New(::google::protobuf::Arena* arena) const {
  CreateGroup* n = new CreateGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGroup::Clear() {
  groupid_ = GOOGLE_ULONGLONG(0);
}

bool CreateGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.CreateGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.CreateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.CreateGroup)
  return false;
#undef DO_
}

void CreateGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.CreateGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.CreateGroup)
}

::google::protobuf::uint8* CreateGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.CreateGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.CreateGroup)
  return target;
}

int CreateGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroup::MergeFrom(const CreateGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void CreateGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroup::CopyFrom(const CreateGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroup::IsInitialized() const {

  return true;
}

void CreateGroup::Swap(CreateGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroup::InternalSwap(CreateGroup* other) {
  std::swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroup_descriptor_;
  metadata.reflection = CreateGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroup

// optional uint64 groupId = 1;
void CreateGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CreateGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.CreateGroup.groupId)
  return groupid_;
}
 void CreateGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.CreateGroup.groupId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPlayer::kGroupIdFieldNumber;
const int AddPlayer::kPlayerIdFieldNumber;
const int AddPlayer::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPlayer::AddPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.AddPlayer)
}

void AddPlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddPlayer::AddPlayer(const AddPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.AddPlayer)
}

void AddPlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
}

AddPlayer::~AddPlayer() {
  // @@protoc_insertion_point(destructor:message.AddPlayer)
  SharedDtor();
}

void AddPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPlayer_descriptor_;
}

const AddPlayer& AddPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AddPlayer* AddPlayer::default_instance_ = NULL;

AddPlayer* AddPlayer::New(::google::protobuf::Arena* arena) const {
  AddPlayer* n = new AddPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPlayer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddPlayer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.AddPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 3;
      case 3: {
        if (tag == 24) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.AddPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.AddPlayer)
  return false;
#undef DO_
}

void AddPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.AddPlayer)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->canspeak(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.AddPlayer)
}

::google::protobuf::uint8* AddPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AddPlayer)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->canspeak(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.AddPlayer)
  return target;
}

int AddPlayer::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 canSpeak = 3;
  if (this->canspeak() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->canspeak());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddPlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPlayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPlayer::MergeFrom(const AddPlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.canspeak() != 0) {
    set_canspeak(from.canspeak());
  }
}

void AddPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayer::CopyFrom(const AddPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayer::IsInitialized() const {

  return true;
}

void AddPlayer::Swap(AddPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPlayer::InternalSwap(AddPlayer* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPlayer_descriptor_;
  metadata.reflection = AddPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddPlayer

// optional uint64 groupId = 1;
void AddPlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AddPlayer::groupid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayer.groupId)
  return groupid_;
}
 void AddPlayer::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayer.groupId)
}

// optional uint64 playerId = 2;
void AddPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AddPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayer.playerId)
  return playerid_;
}
 void AddPlayer::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayer.playerId)
}

// optional uint32 canSpeak = 3;
void AddPlayer::clear_canspeak() {
  canspeak_ = 0u;
}
 ::google::protobuf::uint32 AddPlayer::canspeak() const {
  // @@protoc_insertion_point(field_get:message.AddPlayer.canSpeak)
  return canspeak_;
}
 void AddPlayer::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayer.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPlayerAck::kGroupIdFieldNumber;
const int AddPlayerAck::kPlayerIdFieldNumber;
const int AddPlayerAck::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPlayerAck::AddPlayerAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.AddPlayerAck)
}

void AddPlayerAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddPlayerAck::AddPlayerAck(const AddPlayerAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.AddPlayerAck)
}

void AddPlayerAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  playerindex_ = 0u;
}

AddPlayerAck::~AddPlayerAck() {
  // @@protoc_insertion_point(destructor:message.AddPlayerAck)
  SharedDtor();
}

void AddPlayerAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPlayerAck_descriptor_;
}

const AddPlayerAck& AddPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AddPlayerAck* AddPlayerAck::default_instance_ = NULL;

AddPlayerAck* AddPlayerAck::New(::google::protobuf::Arena* arena) const {
  AddPlayerAck* n = new AddPlayerAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPlayerAck::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddPlayerAck*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.AddPlayerAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerIndex;
        break;
      }

      // optional uint32 playerIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_playerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.AddPlayerAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.AddPlayerAck)
  return false;
#undef DO_
}

void AddPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.AddPlayerAck)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 playerIndex = 3;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.AddPlayerAck)
}

::google::protobuf::uint8* AddPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AddPlayerAck)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 playerIndex = 3;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.AddPlayerAck)
  return target;
}

int AddPlayerAck::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 playerIndex = 3;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddPlayerAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPlayerAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPlayerAck::MergeFrom(const AddPlayerAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
}

void AddPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerAck::CopyFrom(const AddPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerAck::IsInitialized() const {

  return true;
}

void AddPlayerAck::Swap(AddPlayerAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPlayerAck::InternalSwap(AddPlayerAck* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  std::swap(playerindex_, other->playerindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPlayerAck_descriptor_;
  metadata.reflection = AddPlayerAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddPlayerAck

// optional uint64 groupId = 1;
void AddPlayerAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AddPlayerAck::groupid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayerAck.groupId)
  return groupid_;
}
 void AddPlayerAck::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayerAck.groupId)
}

// optional uint64 playerId = 2;
void AddPlayerAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AddPlayerAck::playerid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayerAck.playerId)
  return playerid_;
}
 void AddPlayerAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayerAck.playerId)
}

// optional uint32 playerIndex = 3;
void AddPlayerAck::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 AddPlayerAck::playerindex() const {
  // @@protoc_insertion_point(field_get:message.AddPlayerAck.playerIndex)
  return playerindex_;
}
 void AddPlayerAck::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayerAck.playerIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePlayer::kGroupIdFieldNumber;
const int RemovePlayer::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePlayer::RemovePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RemovePlayer)
}

void RemovePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RemovePlayer::RemovePlayer(const RemovePlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.RemovePlayer)
}

void RemovePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
}

RemovePlayer::~RemovePlayer() {
  // @@protoc_insertion_point(destructor:message.RemovePlayer)
  SharedDtor();
}

void RemovePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemovePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePlayer_descriptor_;
}

const RemovePlayer& RemovePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RemovePlayer* RemovePlayer::default_instance_ = NULL;

RemovePlayer* RemovePlayer::New(::google::protobuf::Arena* arena) const {
  RemovePlayer* n = new RemovePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovePlayer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RemovePlayer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(groupid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

}

bool RemovePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RemovePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.RemovePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RemovePlayer)
  return false;
#undef DO_
}

void RemovePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RemovePlayer)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.RemovePlayer)
}

::google::protobuf::uint8* RemovePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RemovePlayer)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.RemovePlayer)
  return target;
}

int RemovePlayer::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // optional uint64 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RemovePlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePlayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovePlayer::MergeFrom(const RemovePlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void RemovePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayer::CopyFrom(const RemovePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayer::IsInitialized() const {

  return true;
}

void RemovePlayer::Swap(RemovePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePlayer::InternalSwap(RemovePlayer* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemovePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePlayer_descriptor_;
  metadata.reflection = RemovePlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovePlayer

// optional uint64 groupId = 1;
void RemovePlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RemovePlayer::groupid() const {
  // @@protoc_insertion_point(field_get:message.RemovePlayer.groupId)
  return groupid_;
}
 void RemovePlayer::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.RemovePlayer.groupId)
}

// optional uint64 playerId = 2;
void RemovePlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RemovePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:message.RemovePlayer.playerId)
  return playerid_;
}
 void RemovePlayer::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.RemovePlayer.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyGroup::DestroyGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DestroyGroup)
}

void DestroyGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DestroyGroup::DestroyGroup(const DestroyGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.DestroyGroup)
}

void DestroyGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
}

DestroyGroup::~DestroyGroup() {
  // @@protoc_insertion_point(destructor:message.DestroyGroup)
  SharedDtor();
}

void DestroyGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyGroup_descriptor_;
}

const DestroyGroup& DestroyGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

DestroyGroup* DestroyGroup::default_instance_ = NULL;

DestroyGroup* DestroyGroup::New(::google::protobuf::Arena* arena) const {
  DestroyGroup* n = new DestroyGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyGroup::Clear() {
  groupid_ = GOOGLE_ULONGLONG(0);
}

bool DestroyGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DestroyGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 groupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DestroyGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DestroyGroup)
  return false;
#undef DO_
}

void DestroyGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DestroyGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.DestroyGroup)
}

::google::protobuf::uint8* DestroyGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DestroyGroup)
  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.DestroyGroup)
  return target;
}

int DestroyGroup::ByteSize() const {
  int total_size = 0;

  // optional uint64 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DestroyGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyGroup::MergeFrom(const DestroyGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void DestroyGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyGroup::CopyFrom(const DestroyGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyGroup::IsInitialized() const {

  return true;
}

void DestroyGroup::Swap(DestroyGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyGroup::InternalSwap(DestroyGroup* other) {
  std::swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyGroup_descriptor_;
  metadata.reflection = DestroyGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyGroup

// optional uint64 groupId = 1;
void DestroyGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DestroyGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.DestroyGroup.groupId)
  return groupid_;
}
 void DestroyGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.DestroyGroup.groupId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdjustPlayerAttr::kPlayerIdFieldNumber;
const int AdjustPlayerAttr::kCanSpeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdjustPlayerAttr::AdjustPlayerAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.AdjustPlayerAttr)
}

void AdjustPlayerAttr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdjustPlayerAttr::AdjustPlayerAttr(const AdjustPlayerAttr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.AdjustPlayerAttr)
}

void AdjustPlayerAttr::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  canspeak_ = 0u;
}

AdjustPlayerAttr::~AdjustPlayerAttr() {
  // @@protoc_insertion_point(destructor:message.AdjustPlayerAttr)
  SharedDtor();
}

void AdjustPlayerAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdjustPlayerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdjustPlayerAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdjustPlayerAttr_descriptor_;
}

const AdjustPlayerAttr& AdjustPlayerAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AdjustPlayerAttr* AdjustPlayerAttr::default_instance_ = NULL;

AdjustPlayerAttr* AdjustPlayerAttr::New(::google::protobuf::Arena* arena) const {
  AdjustPlayerAttr* n = new AdjustPlayerAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdjustPlayerAttr::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdjustPlayerAttr*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, canspeak_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdjustPlayerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.AdjustPlayerAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canSpeak;
        break;
      }

      // optional uint32 canSpeak = 2;
      case 2: {
        if (tag == 16) {
         parse_canSpeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canspeak_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.AdjustPlayerAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.AdjustPlayerAttr)
  return false;
#undef DO_
}

void AdjustPlayerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.AdjustPlayerAttr)
  // optional uint64 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint32 canSpeak = 2;
  if (this->canspeak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->canspeak(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.AdjustPlayerAttr)
}

::google::protobuf::uint8* AdjustPlayerAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AdjustPlayerAttr)
  // optional uint64 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint32 canSpeak = 2;
  if (this->canspeak() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->canspeak(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.AdjustPlayerAttr)
  return target;
}

int AdjustPlayerAttr::ByteSize() const {
  int total_size = 0;

  // optional uint64 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 canSpeak = 2;
  if (this->canspeak() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->canspeak());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdjustPlayerAttr::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdjustPlayerAttr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdjustPlayerAttr>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdjustPlayerAttr::MergeFrom(const AdjustPlayerAttr& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.canspeak() != 0) {
    set_canspeak(from.canspeak());
  }
}

void AdjustPlayerAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustPlayerAttr::CopyFrom(const AdjustPlayerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustPlayerAttr::IsInitialized() const {

  return true;
}

void AdjustPlayerAttr::Swap(AdjustPlayerAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdjustPlayerAttr::InternalSwap(AdjustPlayerAttr* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(canspeak_, other->canspeak_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdjustPlayerAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdjustPlayerAttr_descriptor_;
  metadata.reflection = AdjustPlayerAttr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdjustPlayerAttr

// optional uint64 playerId = 1;
void AdjustPlayerAttr::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AdjustPlayerAttr::playerid() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.playerId)
  return playerid_;
}
 void AdjustPlayerAttr::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.playerId)
}

// optional uint32 canSpeak = 2;
void AdjustPlayerAttr::clear_canspeak() {
  canspeak_ = 0u;
}
 ::google::protobuf::uint32 AdjustPlayerAttr::canspeak() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.canSpeak)
  return canspeak_;
}
 void AdjustPlayerAttr::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.canSpeak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kHandshakeFieldNumber;
const int Request::kCreateGroupFieldNumber;
const int Request::kAddPlayerFieldNumber;
const int Request::kRemovePlayerFieldNumber;
const int Request::kDestroyGroupFieldNumber;
const int Request::kAdjustPlayerAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  handshake_ = const_cast< ::message::Handshake*>(&::message::Handshake::default_instance());
  creategroup_ = const_cast< ::message::CreateGroup*>(&::message::CreateGroup::default_instance());
  addplayer_ = const_cast< ::message::AddPlayer*>(&::message::AddPlayer::default_instance());
  removeplayer_ = const_cast< ::message::RemovePlayer*>(&::message::RemovePlayer::default_instance());
  destroygroup_ = const_cast< ::message::DestroyGroup*>(&::message::DestroyGroup::default_instance());
  adjustplayerattr_ = const_cast< ::message::AdjustPlayerAttr*>(&::message::AdjustPlayerAttr::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  handshake_ = NULL;
  creategroup_ = NULL;
  addplayer_ = NULL;
  removeplayer_ = NULL;
  destroygroup_ = NULL;
  adjustplayerattr_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:message.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete handshake_;
    delete creategroup_;
    delete addplayer_;
    delete removeplayer_;
    delete destroygroup_;
    delete adjustplayerattr_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
  if (GetArenaNoVirtual() == NULL && handshake_ != NULL) delete handshake_;
  handshake_ = NULL;
  if (GetArenaNoVirtual() == NULL && creategroup_ != NULL) delete creategroup_;
  creategroup_ = NULL;
  if (GetArenaNoVirtual() == NULL && addplayer_ != NULL) delete addplayer_;
  addplayer_ = NULL;
  if (GetArenaNoVirtual() == NULL && removeplayer_ != NULL) delete removeplayer_;
  removeplayer_ = NULL;
  if (GetArenaNoVirtual() == NULL && destroygroup_ != NULL) delete destroygroup_;
  destroygroup_ = NULL;
  if (GetArenaNoVirtual() == NULL && adjustplayerattr_ != NULL) delete adjustplayerattr_;
  adjustplayerattr_ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.Handshake handshake = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createGroup;
        break;
      }

      // optional .message.CreateGroup createGroup = 2;
      case 2: {
        if (tag == 18) {
         parse_createGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creategroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_addPlayer;
        break;
      }

      // optional .message.AddPlayer addPlayer = 3;
      case 3: {
        if (tag == 26) {
         parse_addPlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_removePlayer;
        break;
      }

      // optional .message.RemovePlayer removePlayer = 4;
      case 4: {
        if (tag == 34) {
         parse_removePlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_removeplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destroyGroup;
        break;
      }

      // optional .message.DestroyGroup destroyGroup = 5;
      case 5: {
        if (tag == 42) {
         parse_destroyGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroygroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adjustPlayerAttr;
        break;
      }

      // optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
      case 6: {
        if (tag == 50) {
         parse_adjustPlayerAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjustplayerattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Request)
  // optional .message.Handshake handshake = 1;
  if (this->has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->handshake_, output);
  }

  // optional .message.CreateGroup createGroup = 2;
  if (this->has_creategroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creategroup_, output);
  }

  // optional .message.AddPlayer addPlayer = 3;
  if (this->has_addplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->addplayer_, output);
  }

  // optional .message.RemovePlayer removePlayer = 4;
  if (this->has_removeplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->removeplayer_, output);
  }

  // optional .message.DestroyGroup destroyGroup = 5;
  if (this->has_destroygroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->destroygroup_, output);
  }

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
  if (this->has_adjustplayerattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->adjustplayerattr_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Request)
  // optional .message.Handshake handshake = 1;
  if (this->has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->handshake_, target);
  }

  // optional .message.CreateGroup createGroup = 2;
  if (this->has_creategroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->creategroup_, target);
  }

  // optional .message.AddPlayer addPlayer = 3;
  if (this->has_addplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->addplayer_, target);
  }

  // optional .message.RemovePlayer removePlayer = 4;
  if (this->has_removeplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->removeplayer_, target);
  }

  // optional .message.DestroyGroup destroyGroup = 5;
  if (this->has_destroygroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->destroygroup_, target);
  }

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
  if (this->has_adjustplayerattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->adjustplayerattr_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  // optional .message.Handshake handshake = 1;
  if (this->has_handshake()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->handshake_);
  }

  // optional .message.CreateGroup createGroup = 2;
  if (this->has_creategroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creategroup_);
  }

  // optional .message.AddPlayer addPlayer = 3;
  if (this->has_addplayer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addplayer_);
  }

  // optional .message.RemovePlayer removePlayer = 4;
  if (this->has_removeplayer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->removeplayer_);
  }

  // optional .message.DestroyGroup destroyGroup = 5;
  if (this->has_destroygroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->destroygroup_);
  }

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
  if (this->has_adjustplayerattr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adjustplayerattr_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_handshake()) {
    mutable_handshake()->::message::Handshake::MergeFrom(from.handshake());
  }
  if (from.has_creategroup()) {
    mutable_creategroup()->::message::CreateGroup::MergeFrom(from.creategroup());
  }
  if (from.has_addplayer()) {
    mutable_addplayer()->::message::AddPlayer::MergeFrom(from.addplayer());
  }
  if (from.has_removeplayer()) {
    mutable_removeplayer()->::message::RemovePlayer::MergeFrom(from.removeplayer());
  }
  if (from.has_destroygroup()) {
    mutable_destroygroup()->::message::DestroyGroup::MergeFrom(from.destroygroup());
  }
  if (from.has_adjustplayerattr()) {
    mutable_adjustplayerattr()->::message::AdjustPlayerAttr::MergeFrom(from.adjustplayerattr());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(handshake_, other->handshake_);
  std::swap(creategroup_, other->creategroup_);
  std::swap(addplayer_, other->addplayer_);
  std::swap(removeplayer_, other->removeplayer_);
  std::swap(destroygroup_, other->destroygroup_);
  std::swap(adjustplayerattr_, other->adjustplayerattr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .message.Handshake handshake = 1;
bool Request::has_handshake() const {
  return !_is_default_instance_ && handshake_ != NULL;
}
void Request::clear_handshake() {
  if (GetArenaNoVirtual() == NULL && handshake_ != NULL) delete handshake_;
  handshake_ = NULL;
}
const ::message::Handshake& Request::handshake() const {
  // @@protoc_insertion_point(field_get:message.Request.handshake)
  return handshake_ != NULL ? *handshake_ : *default_instance_->handshake_;
}
::message::Handshake* Request::mutable_handshake() {
  
  if (handshake_ == NULL) {
    handshake_ = new ::message::Handshake;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.handshake)
  return handshake_;
}
::message::Handshake* Request::release_handshake() {
  
  ::message::Handshake* temp = handshake_;
  handshake_ = NULL;
  return temp;
}
void Request::set_allocated_handshake(::message::Handshake* handshake) {
  delete handshake_;
  handshake_ = handshake;
  if (handshake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.handshake)
}

// optional .message.CreateGroup createGroup = 2;
bool Request::has_creategroup() const {
  return !_is_default_instance_ && creategroup_ != NULL;
}
void Request::clear_creategroup() {
  if (GetArenaNoVirtual() == NULL && creategroup_ != NULL) delete creategroup_;
  creategroup_ = NULL;
}
const ::message::CreateGroup& Request::creategroup() const {
  // @@protoc_insertion_point(field_get:message.Request.createGroup)
  return creategroup_ != NULL ? *creategroup_ : *default_instance_->creategroup_;
}
::message::CreateGroup* Request::mutable_creategroup() {
  
  if (creategroup_ == NULL) {
    creategroup_ = new ::message::CreateGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.createGroup)
  return creategroup_;
}
::message::CreateGroup* Request::release_creategroup() {
  
  ::message::CreateGroup* temp = creategroup_;
  creategroup_ = NULL;
  return temp;
}
void Request::set_allocated_creategroup(::message::CreateGroup* creategroup) {
  delete creategroup_;
  creategroup_ = creategroup;
  if (creategroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.createGroup)
}

// optional .message.AddPlayer addPlayer = 3;
bool Request::has_addplayer() const {
  return !_is_default_instance_ && addplayer_ != NULL;
}
void Request::clear_addplayer() {
  if (GetArenaNoVirtual() == NULL && addplayer_ != NULL) delete addplayer_;
  addplayer_ = NULL;
}
const ::message::AddPlayer& Request::addplayer() const {
  // @@protoc_insertion_point(field_get:message.Request.addPlayer)
  return addplayer_ != NULL ? *addplayer_ : *default_instance_->addplayer_;
}
::message::AddPlayer* Request::mutable_addplayer() {
  
  if (addplayer_ == NULL) {
    addplayer_ = new ::message::AddPlayer;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.addPlayer)
  return addplayer_;
}
::message::AddPlayer* Request::release_addplayer() {
  
  ::message::AddPlayer* temp = addplayer_;
  addplayer_ = NULL;
  return temp;
}
void Request::set_allocated_addplayer(::message::AddPlayer* addplayer) {
  delete addplayer_;
  addplayer_ = addplayer;
  if (addplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.addPlayer)
}

// optional .message.RemovePlayer removePlayer = 4;
bool Request::has_removeplayer() const {
  return !_is_default_instance_ && removeplayer_ != NULL;
}
void Request::clear_removeplayer() {
  if (GetArenaNoVirtual() == NULL && removeplayer_ != NULL) delete removeplayer_;
  removeplayer_ = NULL;
}
const ::message::RemovePlayer& Request::removeplayer() const {
  // @@protoc_insertion_point(field_get:message.Request.removePlayer)
  return removeplayer_ != NULL ? *removeplayer_ : *default_instance_->removeplayer_;
}
::message::RemovePlayer* Request::mutable_removeplayer() {
  
  if (removeplayer_ == NULL) {
    removeplayer_ = new ::message::RemovePlayer;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.removePlayer)
  return removeplayer_;
}
::message::RemovePlayer* Request::release_removeplayer() {
  
  ::message::RemovePlayer* temp = removeplayer_;
  removeplayer_ = NULL;
  return temp;
}
void Request::set_allocated_removeplayer(::message::RemovePlayer* removeplayer) {
  delete removeplayer_;
  removeplayer_ = removeplayer;
  if (removeplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.removePlayer)
}

// optional .message.DestroyGroup destroyGroup = 5;
bool Request::has_destroygroup() const {
  return !_is_default_instance_ && destroygroup_ != NULL;
}
void Request::clear_destroygroup() {
  if (GetArenaNoVirtual() == NULL && destroygroup_ != NULL) delete destroygroup_;
  destroygroup_ = NULL;
}
const ::message::DestroyGroup& Request::destroygroup() const {
  // @@protoc_insertion_point(field_get:message.Request.destroyGroup)
  return destroygroup_ != NULL ? *destroygroup_ : *default_instance_->destroygroup_;
}
::message::DestroyGroup* Request::mutable_destroygroup() {
  
  if (destroygroup_ == NULL) {
    destroygroup_ = new ::message::DestroyGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.destroyGroup)
  return destroygroup_;
}
::message::DestroyGroup* Request::release_destroygroup() {
  
  ::message::DestroyGroup* temp = destroygroup_;
  destroygroup_ = NULL;
  return temp;
}
void Request::set_allocated_destroygroup(::message::DestroyGroup* destroygroup) {
  delete destroygroup_;
  destroygroup_ = destroygroup;
  if (destroygroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.destroyGroup)
}

// optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
bool Request::has_adjustplayerattr() const {
  return !_is_default_instance_ && adjustplayerattr_ != NULL;
}
void Request::clear_adjustplayerattr() {
  if (GetArenaNoVirtual() == NULL && adjustplayerattr_ != NULL) delete adjustplayerattr_;
  adjustplayerattr_ = NULL;
}
const ::message::AdjustPlayerAttr& Request::adjustplayerattr() const {
  // @@protoc_insertion_point(field_get:message.Request.adjustPlayerAttr)
  return adjustplayerattr_ != NULL ? *adjustplayerattr_ : *default_instance_->adjustplayerattr_;
}
::message::AdjustPlayerAttr* Request::mutable_adjustplayerattr() {
  
  if (adjustplayerattr_ == NULL) {
    adjustplayerattr_ = new ::message::AdjustPlayerAttr;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.adjustPlayerAttr)
  return adjustplayerattr_;
}
::message::AdjustPlayerAttr* Request::release_adjustplayerattr() {
  
  ::message::AdjustPlayerAttr* temp = adjustplayerattr_;
  adjustplayerattr_ = NULL;
  return temp;
}
void Request::set_allocated_adjustplayerattr(::message::AdjustPlayerAttr* adjustplayerattr) {
  delete adjustplayerattr_;
  adjustplayerattr_ = adjustplayerattr;
  if (adjustplayerattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.adjustPlayerAttr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCodeFieldNumber;
const int Response::kErrMsgFieldNumber;
const int Response::kHandshakeAckFieldNumber;
const int Response::kAddPlayerAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  handshakeack_ = const_cast< ::message::HandshakeAck*>(&::message::HandshakeAck::default_instance());
  addplayerack_ = const_cast< ::message::AddPlayerAck*>(&::message::AddPlayerAck::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handshakeack_ = NULL;
  addplayerack_ = NULL;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:message.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete handshakeack_;
    delete addplayerack_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
  code_ = 0;
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handshakeack_ != NULL) delete handshakeack_;
  handshakeack_ = NULL;
  if (GetArenaNoVirtual() == NULL && addplayerack_ != NULL) delete addplayerack_;
  addplayerack_ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.ACK Code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::message::ACK >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ErrMsg;
        break;
      }

      // optional string ErrMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_ErrMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.Response.ErrMsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_handshakeAck;
        break;
      }

      // optional .message.HandshakeAck handshakeAck = 3;
      case 3: {
        if (tag == 26) {
         parse_handshakeAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshakeack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addPlayerAck;
        break;
      }

      // optional .message.AddPlayerAck addPlayerAck = 4;
      case 4: {
        if (tag == 34) {
         parse_addPlayerAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addplayerack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Response)
  // optional .message.ACK Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string ErrMsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Response.ErrMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional .message.HandshakeAck handshakeAck = 3;
  if (this->has_handshakeack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->handshakeack_, output);
  }

  // optional .message.AddPlayerAck addPlayerAck = 4;
  if (this->has_addplayerack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->addplayerack_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Response)
  // optional .message.ACK Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string ErrMsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.Response.ErrMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional .message.HandshakeAck handshakeAck = 3;
  if (this->has_handshakeack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->handshakeack_, target);
  }

  // optional .message.AddPlayerAck addPlayerAck = 4;
  if (this->has_addplayerack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->addplayerack_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // optional .message.ACK Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // optional string ErrMsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // optional .message.HandshakeAck handshakeAck = 3;
  if (this->has_handshakeack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->handshakeack_);
  }

  // optional .message.AddPlayerAck addPlayerAck = 4;
  if (this->has_addplayerack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addplayerack_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_handshakeack()) {
    mutable_handshakeack()->::message::HandshakeAck::MergeFrom(from.handshakeack());
  }
  if (from.has_addplayerack()) {
    mutable_addplayerack()->::message::AddPlayerAck::MergeFrom(from.addplayerack());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(code_, other->code_);
  errmsg_.Swap(&other->errmsg_);
  std::swap(handshakeack_, other->handshakeack_);
  std::swap(addplayerack_, other->addplayerack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .message.ACK Code = 1;
void Response::clear_code() {
  code_ = 0;
}
 ::message::ACK Response::code() const {
  // @@protoc_insertion_point(field_get:message.Response.Code)
  return static_cast< ::message::ACK >(code_);
}
 void Response::set_code(::message::ACK value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:message.Response.Code)
}

// optional string ErrMsg = 2;
void Response::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::errmsg() const {
  // @@protoc_insertion_point(field_get:message.Response.ErrMsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Response.ErrMsg)
}
 void Response::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Response.ErrMsg)
}
 void Response::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Response.ErrMsg)
}
 ::std::string* Response::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:message.Response.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_errmsg() {
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:message.Response.ErrMsg)
}

// optional .message.HandshakeAck handshakeAck = 3;
bool Response::has_handshakeack() const {
  return !_is_default_instance_ && handshakeack_ != NULL;
}
void Response::clear_handshakeack() {
  if (GetArenaNoVirtual() == NULL && handshakeack_ != NULL) delete handshakeack_;
  handshakeack_ = NULL;
}
const ::message::HandshakeAck& Response::handshakeack() const {
  // @@protoc_insertion_point(field_get:message.Response.handshakeAck)
  return handshakeack_ != NULL ? *handshakeack_ : *default_instance_->handshakeack_;
}
::message::HandshakeAck* Response::mutable_handshakeack() {
  
  if (handshakeack_ == NULL) {
    handshakeack_ = new ::message::HandshakeAck;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.handshakeAck)
  return handshakeack_;
}
::message::HandshakeAck* Response::release_handshakeack() {
  
  ::message::HandshakeAck* temp = handshakeack_;
  handshakeack_ = NULL;
  return temp;
}
void Response::set_allocated_handshakeack(::message::HandshakeAck* handshakeack) {
  delete handshakeack_;
  handshakeack_ = handshakeack;
  if (handshakeack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.handshakeAck)
}

// optional .message.AddPlayerAck addPlayerAck = 4;
bool Response::has_addplayerack() const {
  return !_is_default_instance_ && addplayerack_ != NULL;
}
void Response::clear_addplayerack() {
  if (GetArenaNoVirtual() == NULL && addplayerack_ != NULL) delete addplayerack_;
  addplayerack_ = NULL;
}
const ::message::AddPlayerAck& Response::addplayerack() const {
  // @@protoc_insertion_point(field_get:message.Response.addPlayerAck)
  return addplayerack_ != NULL ? *addplayerack_ : *default_instance_->addplayerack_;
}
::message::AddPlayerAck* Response::mutable_addplayerack() {
  
  if (addplayerack_ == NULL) {
    addplayerack_ = new ::message::AddPlayerAck;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.addPlayerAck)
  return addplayerack_;
}
::message::AddPlayerAck* Response::release_addplayerack() {
  
  ::message::AddPlayerAck* temp = addplayerack_;
  addplayerack_ = NULL;
  return temp;
}
void Response::set_allocated_addplayerack(::message::AddPlayerAck* addplayerack) {
  delete addplayerack_;
  addplayerack_ = addplayerack;
  if (addplayerack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.addPlayerAck)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlMessage::kReqFieldNumber;
const int ControlMessage::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlMessage::ControlMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.ControlMessage)
}

void ControlMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  req_ = const_cast< ::message::Request*>(&::message::Request::default_instance());
  res_ = const_cast< ::message::Response*>(&::message::Response::default_instance());
}

ControlMessage::ControlMessage(const ControlMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.ControlMessage)
}

void ControlMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  req_ = NULL;
  res_ = NULL;
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:message.ControlMessage)
  SharedDtor();
}

void ControlMessage::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
    delete res_;
  }
}

void ControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlMessage_descriptor_;
}

const ControlMessage& ControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ControlMessage* ControlMessage::default_instance_ = NULL;

ControlMessage* ControlMessage::New(::google::protobuf::Arena* arena) const {
  ControlMessage* n = new ControlMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
  if (GetArenaNoVirtual() == NULL && res_ != NULL) delete res_;
  res_ = NULL;
}

bool ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.ControlMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.Request req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional .message.Response res = 2;
      case 2: {
        if (tag == 18) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.ControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.ControlMessage)
  return false;
#undef DO_
}

void ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.ControlMessage)
  // optional .message.Request req = 1;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->req_, output);
  }

  // optional .message.Response res = 2;
  if (this->has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.ControlMessage)
}

::google::protobuf::uint8* ControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ControlMessage)
  // optional .message.Request req = 1;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->req_, target);
  }

  // optional .message.Response res = 2;
  if (this->has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->res_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.ControlMessage)
  return target;
}

int ControlMessage::ByteSize() const {
  int total_size = 0;

  // optional .message.Request req = 1;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  // optional .message.Response res = 2;
  if (this->has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControlMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlMessage::MergeFrom(const ControlMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_req()) {
    mutable_req()->::message::Request::MergeFrom(from.req());
  }
  if (from.has_res()) {
    mutable_res()->::message::Response::MergeFrom(from.res());
  }
}

void ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {

  return true;
}

void ControlMessage::Swap(ControlMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlMessage::InternalSwap(ControlMessage* other) {
  std::swap(req_, other->req_);
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlMessage_descriptor_;
  metadata.reflection = ControlMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlMessage

// optional .message.Request req = 1;
bool ControlMessage::has_req() const {
  return !_is_default_instance_ && req_ != NULL;
}
void ControlMessage::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::message::Request& ControlMessage::req() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.req)
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
::message::Request* ControlMessage::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::message::Request;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.req)
  return req_;
}
::message::Request* ControlMessage::release_req() {
  
  ::message::Request* temp = req_;
  req_ = NULL;
  return temp;
}
void ControlMessage::set_allocated_req(::message::Request* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.req)
}

// optional .message.Response res = 2;
bool ControlMessage::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
void ControlMessage::clear_res() {
  if (GetArenaNoVirtual() == NULL && res_ != NULL) delete res_;
  res_ = NULL;
}
const ::message::Response& ControlMessage::res() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
::message::Response* ControlMessage::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::message::Response;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.res)
  return res_;
}
::message::Response* ControlMessage::release_res() {
  
  ::message::Response* temp = res_;
  res_ = NULL;
  return temp;
}
void ControlMessage::set_allocated_res(::message::Response* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayRequestConnect::kPlayerIndexFieldNumber;
const int PlayRequestConnect::kPlayerIDFieldNumber;
const int PlayRequestConnect::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayRequestConnect::PlayRequestConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.PlayRequestConnect)
}

void PlayRequestConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayRequestConnect::PlayRequestConnect(const PlayRequestConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.PlayRequestConnect)
}

void PlayRequestConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerindex_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
}

PlayRequestConnect::~PlayRequestConnect() {
  // @@protoc_insertion_point(destructor:message.PlayRequestConnect)
  SharedDtor();
}

void PlayRequestConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayRequestConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayRequestConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayRequestConnect_descriptor_;
}

const PlayRequestConnect& PlayRequestConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PlayRequestConnect* PlayRequestConnect::default_instance_ = NULL;

PlayRequestConnect* PlayRequestConnect::New(::google::protobuf::Arena* arena) const {
  PlayRequestConnect* n = new PlayRequestConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayRequestConnect::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayRequestConnect*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayRequestConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.PlayRequestConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerID;
        break;
      }

      // optional uint64 PlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // optional uint64 GroupID = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.PlayRequestConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.PlayRequestConnect)
  return false;
#undef DO_
}

void PlayRequestConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.PlayRequestConnect)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint64 GroupID = 3;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.PlayRequestConnect)
}

::google::protobuf::uint8* PlayRequestConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayRequestConnect)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint64 GroupID = 3;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.PlayRequestConnect)
  return target;
}

int PlayRequestConnect::ByteSize() const {
  int total_size = 0;

  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint64 GroupID = 3;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayRequestConnect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayRequestConnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayRequestConnect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayRequestConnect::MergeFrom(const PlayRequestConnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void PlayRequestConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayRequestConnect::CopyFrom(const PlayRequestConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayRequestConnect::IsInitialized() const {

  return true;
}

void PlayRequestConnect::Swap(PlayRequestConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayRequestConnect::InternalSwap(PlayRequestConnect* other) {
  std::swap(playerindex_, other->playerindex_);
  std::swap(playerid_, other->playerid_);
  std::swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayRequestConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayRequestConnect_descriptor_;
  metadata.reflection = PlayRequestConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayRequestConnect

// optional uint32 PlayerIndex = 1;
void PlayRequestConnect::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 PlayRequestConnect::playerindex() const {
  // @@protoc_insertion_point(field_get:message.PlayRequestConnect.PlayerIndex)
  return playerindex_;
}
 void PlayRequestConnect::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.PlayRequestConnect.PlayerIndex)
}

// optional uint64 PlayerID = 2;
void PlayRequestConnect::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayRequestConnect::playerid() const {
  // @@protoc_insertion_point(field_get:message.PlayRequestConnect.PlayerID)
  return playerid_;
}
 void PlayRequestConnect::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayRequestConnect.PlayerID)
}

// optional uint64 GroupID = 3;
void PlayRequestConnect::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayRequestConnect::groupid() const {
  // @@protoc_insertion_point(field_get:message.PlayRequestConnect.GroupID)
  return groupid_;
}
 void PlayRequestConnect::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayRequestConnect.GroupID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestConnectAck::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestConnectAck::PlayerRequestConnectAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.PlayerRequestConnectAck)
}

void PlayerRequestConnectAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerRequestConnectAck::PlayerRequestConnectAck(const PlayerRequestConnectAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.PlayerRequestConnectAck)
}

void PlayerRequestConnectAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  code_ = 0;
}

PlayerRequestConnectAck::~PlayerRequestConnectAck() {
  // @@protoc_insertion_point(destructor:message.PlayerRequestConnectAck)
  SharedDtor();
}

void PlayerRequestConnectAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRequestConnectAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestConnectAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRequestConnectAck_descriptor_;
}

const PlayerRequestConnectAck& PlayerRequestConnectAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PlayerRequestConnectAck* PlayerRequestConnectAck::default_instance_ = NULL;

PlayerRequestConnectAck* PlayerRequestConnectAck::New(::google::protobuf::Arena* arena) const {
  PlayerRequestConnectAck* n = new PlayerRequestConnectAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestConnectAck::Clear() {
  code_ = 0;
}

bool PlayerRequestConnectAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.PlayerRequestConnectAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.VOICE_ACK Code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::message::VOICE_ACK >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.PlayerRequestConnectAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.PlayerRequestConnectAck)
  return false;
#undef DO_
}

void PlayerRequestConnectAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.PlayerRequestConnectAck)
  // optional .message.VOICE_ACK Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.PlayerRequestConnectAck)
}

::google::protobuf::uint8* PlayerRequestConnectAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayerRequestConnectAck)
  // optional .message.VOICE_ACK Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.PlayerRequestConnectAck)
  return target;
}

int PlayerRequestConnectAck::ByteSize() const {
  int total_size = 0;

  // optional .message.VOICE_ACK Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestConnectAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerRequestConnectAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestConnectAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRequestConnectAck::MergeFrom(const PlayerRequestConnectAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void PlayerRequestConnectAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestConnectAck::CopyFrom(const PlayerRequestConnectAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestConnectAck::IsInitialized() const {

  return true;
}

void PlayerRequestConnectAck::Swap(PlayerRequestConnectAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestConnectAck::InternalSwap(PlayerRequestConnectAck* other) {
  std::swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestConnectAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRequestConnectAck_descriptor_;
  metadata.reflection = PlayerRequestConnectAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerRequestConnectAck

// optional .message.VOICE_ACK Code = 1;
void PlayerRequestConnectAck::clear_code() {
  code_ = 0;
}
 ::message::VOICE_ACK PlayerRequestConnectAck::code() const {
  // @@protoc_insertion_point(field_get:message.PlayerRequestConnectAck.Code)
  return static_cast< ::message::VOICE_ACK >(code_);
}
 void PlayerRequestConnectAck::set_code(::message::VOICE_ACK value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerRequestConnectAck.Code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceData::kPlayerIndexFieldNumber;
const int VoiceData::kPlayerIDFieldNumber;
const int VoiceData::kFrameIndexFieldNumber;
const int VoiceData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceData::VoiceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VoiceData)
}

void VoiceData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoiceData::VoiceData(const VoiceData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VoiceData)
}

void VoiceData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerindex_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  frameindex_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VoiceData::~VoiceData() {
  // @@protoc_insertion_point(destructor:message.VoiceData)
  SharedDtor();
}

void VoiceData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VoiceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceData_descriptor_;
}

const VoiceData& VoiceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

VoiceData* VoiceData::default_instance_ = NULL;

VoiceData* VoiceData::New(::google::protobuf::Arena* arena) const {
  VoiceData* n = new VoiceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoiceData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, frameindex_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VoiceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VoiceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerID;
        break;
      }

      // optional uint64 PlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FrameIndex;
        break;
      }

      // optional uint32 FrameIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_FrameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Data;
        break;
      }

      // optional bytes Data = 4;
      case 4: {
        if (tag == 34) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VoiceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VoiceData)
  return false;
#undef DO_
}

void VoiceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VoiceData)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 FrameIndex = 3;
  if (this->frameindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frameindex(), output);
  }

  // optional bytes Data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.VoiceData)
}

::google::protobuf::uint8* VoiceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VoiceData)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint32 FrameIndex = 3;
  if (this->frameindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frameindex(), target);
  }

  // optional bytes Data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.VoiceData)
  return target;
}

int VoiceData::ByteSize() const {
  int total_size = 0;

  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // optional uint32 FrameIndex = 3;
  if (this->frameindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frameindex());
  }

  // optional bytes Data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoiceData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceData::MergeFrom(const VoiceData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.frameindex() != 0) {
    set_frameindex(from.frameindex());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void VoiceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceData::CopyFrom(const VoiceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceData::IsInitialized() const {

  return true;
}

void VoiceData::Swap(VoiceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceData::InternalSwap(VoiceData* other) {
  std::swap(playerindex_, other->playerindex_);
  std::swap(playerid_, other->playerid_);
  std::swap(frameindex_, other->frameindex_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceData_descriptor_;
  metadata.reflection = VoiceData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceData

// optional uint32 PlayerIndex = 1;
void VoiceData::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 VoiceData::playerindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.PlayerIndex)
  return playerindex_;
}
 void VoiceData::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.PlayerIndex)
}

// optional uint64 PlayerID = 2;
void VoiceData::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 VoiceData::playerid() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.PlayerID)
  return playerid_;
}
 void VoiceData::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.PlayerID)
}

// optional uint32 FrameIndex = 3;
void VoiceData::clear_frameindex() {
  frameindex_ = 0u;
}
 ::google::protobuf::uint32 VoiceData::frameindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.FrameIndex)
  return frameindex_;
}
 void VoiceData::set_frameindex(::google::protobuf::uint32 value) {
  
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.FrameIndex)
}

// optional bytes Data = 4;
void VoiceData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VoiceData::data() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoiceData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VoiceData.Data)
}
 void VoiceData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VoiceData.Data)
}
 void VoiceData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VoiceData.Data)
}
 ::std::string* VoiceData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:message.VoiceData.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VoiceData::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoiceData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:message.VoiceData.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceHeartbeat::kPlayerIndexFieldNumber;
const int VoiceHeartbeat::kPlayerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceHeartbeat::VoiceHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VoiceHeartbeat)
}

void VoiceHeartbeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoiceHeartbeat::VoiceHeartbeat(const VoiceHeartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VoiceHeartbeat)
}

void VoiceHeartbeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerindex_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
}

VoiceHeartbeat::~VoiceHeartbeat() {
  // @@protoc_insertion_point(destructor:message.VoiceHeartbeat)
  SharedDtor();
}

void VoiceHeartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoiceHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceHeartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceHeartbeat_descriptor_;
}

const VoiceHeartbeat& VoiceHeartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

VoiceHeartbeat* VoiceHeartbeat::default_instance_ = NULL;

VoiceHeartbeat* VoiceHeartbeat::New(::google::protobuf::Arena* arena) const {
  VoiceHeartbeat* n = new VoiceHeartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceHeartbeat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoiceHeartbeat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, playerindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool VoiceHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VoiceHeartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerID;
        break;
      }

      // optional uint64 PlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VoiceHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VoiceHeartbeat)
  return false;
#undef DO_
}

void VoiceHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VoiceHeartbeat)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:message.VoiceHeartbeat)
}

::google::protobuf::uint8* VoiceHeartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VoiceHeartbeat)
  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.VoiceHeartbeat)
  return target;
}

int VoiceHeartbeat::ByteSize() const {
  int total_size = 0;

  // optional uint32 PlayerIndex = 1;
  if (this->playerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerindex());
  }

  // optional uint64 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoiceHeartbeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceHeartbeat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceHeartbeat::MergeFrom(const VoiceHeartbeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.playerindex() != 0) {
    set_playerindex(from.playerindex());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void VoiceHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceHeartbeat::CopyFrom(const VoiceHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceHeartbeat::IsInitialized() const {

  return true;
}

void VoiceHeartbeat::Swap(VoiceHeartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceHeartbeat::InternalSwap(VoiceHeartbeat* other) {
  std::swap(playerindex_, other->playerindex_);
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceHeartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceHeartbeat_descriptor_;
  metadata.reflection = VoiceHeartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceHeartbeat

// optional uint32 PlayerIndex = 1;
void VoiceHeartbeat::clear_playerindex() {
  playerindex_ = 0u;
}
 ::google::protobuf::uint32 VoiceHeartbeat::playerindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceHeartbeat.PlayerIndex)
  return playerindex_;
}
 void VoiceHeartbeat::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceHeartbeat.PlayerIndex)
}

// optional uint64 PlayerID = 2;
void VoiceHeartbeat::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 VoiceHeartbeat::playerid() const {
  // @@protoc_insertion_point(field_get:message.VoiceHeartbeat.PlayerID)
  return playerid_;
}
 void VoiceHeartbeat::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceHeartbeat.PlayerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceMessage::kPlayerRequestConnectFieldNumber;
const int VoiceMessage::kPlayerRequestConnectAckFieldNumber;
const int VoiceMessage::kVoiceDataFieldNumber;
const int VoiceMessage::kVoiceHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceMessage::VoiceMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.VoiceMessage)
}

void VoiceMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  playerrequestconnect_ = const_cast< ::message::PlayRequestConnect*>(&::message::PlayRequestConnect::default_instance());
  playerrequestconnectack_ = const_cast< ::message::PlayerRequestConnectAck*>(&::message::PlayerRequestConnectAck::default_instance());
  voicedata_ = const_cast< ::message::VoiceData*>(&::message::VoiceData::default_instance());
  voiceheartbeat_ = const_cast< ::message::VoiceHeartbeat*>(&::message::VoiceHeartbeat::default_instance());
}

VoiceMessage::VoiceMessage(const VoiceMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.VoiceMessage)
}

void VoiceMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  playerrequestconnect_ = NULL;
  playerrequestconnectack_ = NULL;
  voicedata_ = NULL;
  voiceheartbeat_ = NULL;
}

VoiceMessage::~VoiceMessage() {
  // @@protoc_insertion_point(destructor:message.VoiceMessage)
  SharedDtor();
}

void VoiceMessage::SharedDtor() {
  if (this != default_instance_) {
    delete playerrequestconnect_;
    delete playerrequestconnectack_;
    delete voicedata_;
    delete voiceheartbeat_;
  }
}

void VoiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceMessage_descriptor_;
}

const VoiceMessage& VoiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

VoiceMessage* VoiceMessage::default_instance_ = NULL;

VoiceMessage* VoiceMessage::New(::google::protobuf::Arena* arena) const {
  VoiceMessage* n = new VoiceMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceMessage::Clear() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnect_ != NULL) delete playerrequestconnect_;
  playerrequestconnect_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerrequestconnectack_ != NULL) delete playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
  if (GetArenaNoVirtual() == NULL && voicedata_ != NULL) delete voicedata_;
  voicedata_ = NULL;
  if (GetArenaNoVirtual() == NULL && voiceheartbeat_ != NULL) delete voiceheartbeat_;
  voiceheartbeat_ = NULL;
}

bool VoiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.VoiceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.PlayRequestConnect playerRequestConnect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrequestconnect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerRequestConnectAck;
        break;
      }

      // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
      case 2: {
        if (tag == 18) {
         parse_playerRequestConnectAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrequestconnectack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voiceData;
        break;
      }

      // optional .message.VoiceData voiceData = 3;
      case 3: {
        if (tag == 26) {
         parse_voiceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voicedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_voiceHeartbeat;
        break;
      }

      // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
      case 4: {
        if (tag == 34) {
         parse_voiceHeartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voiceheartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.VoiceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.VoiceMessage)
  return false;
#undef DO_
}

void VoiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.VoiceMessage)
  // optional .message.PlayRequestConnect playerRequestConnect = 1;
  if (this->has_playerrequestconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playerrequestconnect_, output);
  }

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  if (this->has_playerrequestconnectack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerrequestconnectack_, output);
  }

  // optional .message.VoiceData voiceData = 3;
  if (this->has_voicedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->voicedata_, output);
  }

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  if (this->has_voiceheartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->voiceheartbeat_, output);
  }

  // @@protoc_insertion_point(serialize_end:message.VoiceMessage)
}

::google::protobuf::uint8* VoiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VoiceMessage)
  // optional .message.PlayRequestConnect playerRequestConnect = 1;
  if (this->has_playerrequestconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->playerrequestconnect_, target);
  }

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  if (this->has_playerrequestconnectack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->playerrequestconnectack_, target);
  }

  // optional .message.VoiceData voiceData = 3;
  if (this->has_voicedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->voicedata_, target);
  }

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  if (this->has_voiceheartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->voiceheartbeat_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:message.VoiceMessage)
  return target;
}

int VoiceMessage::ByteSize() const {
  int total_size = 0;

  // optional .message.PlayRequestConnect playerRequestConnect = 1;
  if (this->has_playerrequestconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerrequestconnect_);
  }

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  if (this->has_playerrequestconnectack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerrequestconnectack_);
  }

  // optional .message.VoiceData voiceData = 3;
  if (this->has_voicedata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voicedata_);
  }

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  if (this->has_voiceheartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voiceheartbeat_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoiceMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceMessage::MergeFrom(const VoiceMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_playerrequestconnect()) {
    mutable_playerrequestconnect()->::message::PlayRequestConnect::MergeFrom(from.playerrequestconnect());
  }
  if (from.has_playerrequestconnectack()) {
    mutable_playerrequestconnectack()->::message::PlayerRequestConnectAck::MergeFrom(from.playerrequestconnectack());
  }
  if (from.has_voicedata()) {
    mutable_voicedata()->::message::VoiceData::MergeFrom(from.voicedata());
  }
  if (from.has_voiceheartbeat()) {
    mutable_voiceheartbeat()->::message::VoiceHeartbeat::MergeFrom(from.voiceheartbeat());
  }
}

void VoiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceMessage::CopyFrom(const VoiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceMessage::IsInitialized() const {

  return true;
}

void VoiceMessage::Swap(VoiceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceMessage::InternalSwap(VoiceMessage* other) {
  std::swap(playerrequestconnect_, other->playerrequestconnect_);
  std::swap(playerrequestconnectack_, other->playerrequestconnectack_);
  std::swap(voicedata_, other->voicedata_);
  std::swap(voiceheartbeat_, other->voiceheartbeat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceMessage_descriptor_;
  metadata.reflection = VoiceMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceMessage

// optional .message.PlayRequestConnect playerRequestConnect = 1;
bool VoiceMessage::has_playerrequestconnect() const {
  return !_is_default_instance_ && playerrequestconnect_ != NULL;
}
void VoiceMessage::clear_playerrequestconnect() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnect_ != NULL) delete playerrequestconnect_;
  playerrequestconnect_ = NULL;
}
const ::message::PlayRequestConnect& VoiceMessage::playerrequestconnect() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.playerRequestConnect)
  return playerrequestconnect_ != NULL ? *playerrequestconnect_ : *default_instance_->playerrequestconnect_;
}
::message::PlayRequestConnect* VoiceMessage::mutable_playerrequestconnect() {
  
  if (playerrequestconnect_ == NULL) {
    playerrequestconnect_ = new ::message::PlayRequestConnect;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.playerRequestConnect)
  return playerrequestconnect_;
}
::message::PlayRequestConnect* VoiceMessage::release_playerrequestconnect() {
  
  ::message::PlayRequestConnect* temp = playerrequestconnect_;
  playerrequestconnect_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_playerrequestconnect(::message::PlayRequestConnect* playerrequestconnect) {
  delete playerrequestconnect_;
  playerrequestconnect_ = playerrequestconnect;
  if (playerrequestconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.playerRequestConnect)
}

// optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
bool VoiceMessage::has_playerrequestconnectack() const {
  return !_is_default_instance_ && playerrequestconnectack_ != NULL;
}
void VoiceMessage::clear_playerrequestconnectack() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnectack_ != NULL) delete playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
}
const ::message::PlayerRequestConnectAck& VoiceMessage::playerrequestconnectack() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.playerRequestConnectAck)
  return playerrequestconnectack_ != NULL ? *playerrequestconnectack_ : *default_instance_->playerrequestconnectack_;
}
::message::PlayerRequestConnectAck* VoiceMessage::mutable_playerrequestconnectack() {
  
  if (playerrequestconnectack_ == NULL) {
    playerrequestconnectack_ = new ::message::PlayerRequestConnectAck;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.playerRequestConnectAck)
  return playerrequestconnectack_;
}
::message::PlayerRequestConnectAck* VoiceMessage::release_playerrequestconnectack() {
  
  ::message::PlayerRequestConnectAck* temp = playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_playerrequestconnectack(::message::PlayerRequestConnectAck* playerrequestconnectack) {
  delete playerrequestconnectack_;
  playerrequestconnectack_ = playerrequestconnectack;
  if (playerrequestconnectack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.playerRequestConnectAck)
}

// optional .message.VoiceData voiceData = 3;
bool VoiceMessage::has_voicedata() const {
  return !_is_default_instance_ && voicedata_ != NULL;
}
void VoiceMessage::clear_voicedata() {
  if (GetArenaNoVirtual() == NULL && voicedata_ != NULL) delete voicedata_;
  voicedata_ = NULL;
}
const ::message::VoiceData& VoiceMessage::voicedata() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.voiceData)
  return voicedata_ != NULL ? *voicedata_ : *default_instance_->voicedata_;
}
::message::VoiceData* VoiceMessage::mutable_voicedata() {
  
  if (voicedata_ == NULL) {
    voicedata_ = new ::message::VoiceData;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.voiceData)
  return voicedata_;
}
::message::VoiceData* VoiceMessage::release_voicedata() {
  
  ::message::VoiceData* temp = voicedata_;
  voicedata_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_voicedata(::message::VoiceData* voicedata) {
  delete voicedata_;
  voicedata_ = voicedata;
  if (voicedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.voiceData)
}

// optional .message.VoiceHeartbeat voiceHeartbeat = 4;
bool VoiceMessage::has_voiceheartbeat() const {
  return !_is_default_instance_ && voiceheartbeat_ != NULL;
}
void VoiceMessage::clear_voiceheartbeat() {
  if (GetArenaNoVirtual() == NULL && voiceheartbeat_ != NULL) delete voiceheartbeat_;
  voiceheartbeat_ = NULL;
}
const ::message::VoiceHeartbeat& VoiceMessage::voiceheartbeat() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.voiceHeartbeat)
  return voiceheartbeat_ != NULL ? *voiceheartbeat_ : *default_instance_->voiceheartbeat_;
}
::message::VoiceHeartbeat* VoiceMessage::mutable_voiceheartbeat() {
  
  if (voiceheartbeat_ == NULL) {
    voiceheartbeat_ = new ::message::VoiceHeartbeat;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.voiceHeartbeat)
  return voiceheartbeat_;
}
::message::VoiceHeartbeat* VoiceMessage::release_voiceheartbeat() {
  
  ::message::VoiceHeartbeat* temp = voiceheartbeat_;
  voiceheartbeat_ = NULL;
  return temp;
}
void VoiceMessage::set_allocated_voiceheartbeat(::message::VoiceHeartbeat* voiceheartbeat) {
  delete voiceheartbeat_;
  voiceheartbeat_ = voiceheartbeat;
  if (voiceheartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.voiceHeartbeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
