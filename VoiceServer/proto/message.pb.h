// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class AddPlayer;
class AddPlayerAck;
class AdjustPlayerAttr;
class ControlMessage;
class CreateGroup;
class DestroyGroup;
class Handshake;
class HandshakeAck;
class PlayRequestConnect;
class PlayerRequestConnectAck;
class RemovePlayer;
class Request;
class Response;
class VoiceData;
class VoiceHeartbeat;
class VoiceMessage;

enum CONST {
  CONST_VALUE = 0,
  MAX_PACKET_SIZE = 1024,
  MAX_VOICE_PACKET_SIZE = 1024,
  CONST_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CONST_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CONST_IsValid(int value);
const CONST CONST_MIN = CONST_VALUE;
const CONST CONST_MAX = MAX_PACKET_SIZE;
const int CONST_ARRAYSIZE = CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* CONST_descriptor();
inline const ::std::string& CONST_Name(CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    CONST_descriptor(), value);
}
inline bool CONST_Parse(
    const ::std::string& name, CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CONST>(
    CONST_descriptor(), name, value);
}
enum MSG {
  NONE = 0,
  HANDSHAKE = 1,
  HANDSHAKE_ACK = 2,
  CREATE_GROUP = 3,
  ADD_PLAYER = 4,
  ADD_PLAYER_ACK = 5,
  REMOVE_PLAYER = 6,
  DESTROY_GROUP = 7,
  ADJUST_PLAYER_ATTR = 8,
  ADJUST_GROUP_ATTR = 9,
  MSG_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MSG_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MSG_IsValid(int value);
const MSG MSG_MIN = NONE;
const MSG MSG_MAX = ADJUST_GROUP_ATTR;
const int MSG_ARRAYSIZE = MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_descriptor();
inline const ::std::string& MSG_Name(MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_descriptor(), value);
}
inline bool MSG_Parse(
    const ::std::string& name, MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG>(
    MSG_descriptor(), name, value);
}
enum ACK {
  OK = 0,
  HANDSHAKE_FAILED = 1,
  ADD_PLAYER_FAILED = 2,
  ACK_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ACK_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ACK_IsValid(int value);
const ACK ACK_MIN = OK;
const ACK ACK_MAX = ADD_PLAYER_FAILED;
const int ACK_ARRAYSIZE = ACK_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACK_descriptor();
inline const ::std::string& ACK_Name(ACK value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACK_descriptor(), value);
}
inline bool ACK_Parse(
    const ::std::string& name, ACK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACK>(
    ACK_descriptor(), name, value);
}
enum VOICE_MSG {
  VOICE_MSG_NONE = 0,
  REQEUST_CONNECT = 1,
  REQEUST_CONNECT_ACK = 2,
  VOICE_DATA = 3,
  VOICE_HEARTBEAT = 4,
  VOICE_MSG_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VOICE_MSG_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VOICE_MSG_IsValid(int value);
const VOICE_MSG VOICE_MSG_MIN = VOICE_MSG_NONE;
const VOICE_MSG VOICE_MSG_MAX = VOICE_HEARTBEAT;
const int VOICE_MSG_ARRAYSIZE = VOICE_MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* VOICE_MSG_descriptor();
inline const ::std::string& VOICE_MSG_Name(VOICE_MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    VOICE_MSG_descriptor(), value);
}
inline bool VOICE_MSG_Parse(
    const ::std::string& name, VOICE_MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VOICE_MSG>(
    VOICE_MSG_descriptor(), name, value);
}
enum VOICE_ACK {
  VOICE_OK = 0,
  VOICE_ACK_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VOICE_ACK_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VOICE_ACK_IsValid(int value);
const VOICE_ACK VOICE_ACK_MIN = VOICE_OK;
const VOICE_ACK VOICE_ACK_MAX = VOICE_OK;
const int VOICE_ACK_ARRAYSIZE = VOICE_ACK_MAX + 1;

const ::google::protobuf::EnumDescriptor* VOICE_ACK_descriptor();
inline const ::std::string& VOICE_ACK_Name(VOICE_ACK value) {
  return ::google::protobuf::internal::NameOfEnum(
    VOICE_ACK_descriptor(), value);
}
inline bool VOICE_ACK_Parse(
    const ::std::string& name, VOICE_ACK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VOICE_ACK>(
    VOICE_ACK_descriptor(), name, value);
}
// ===================================================================

class Handshake : public ::google::protobuf::Message {
 public:
  Handshake();
  virtual ~Handshake();

  Handshake(const Handshake& from);

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handshake& default_instance();

  void Swap(Handshake* other);

  // implements Message ----------------------------------------------

  inline Handshake* New() const { return New(NULL); }

  Handshake* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Handshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ProductKey = 2;
  void clear_productkey();
  static const int kProductKeyFieldNumber = 2;
  const ::std::string& productkey() const;
  void set_productkey(const ::std::string& value);
  void set_productkey(const char* value);
  void set_productkey(const char* value, size_t size);
  ::std::string* mutable_productkey();
  ::std::string* release_productkey();
  void set_allocated_productkey(::std::string* productkey);

  // @@protoc_insertion_point(class_scope:message.Handshake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr productkey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Handshake* default_instance_;
};
// -------------------------------------------------------------------

class HandshakeAck : public ::google::protobuf::Message {
 public:
  HandshakeAck();
  virtual ~HandshakeAck();

  HandshakeAck(const HandshakeAck& from);

  inline HandshakeAck& operator=(const HandshakeAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandshakeAck& default_instance();

  void Swap(HandshakeAck* other);

  // implements Message ----------------------------------------------

  inline HandshakeAck* New() const { return New(NULL); }

  HandshakeAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandshakeAck& from);
  void MergeFrom(const HandshakeAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandshakeAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:message.HandshakeAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static HandshakeAck* default_instance_;
};
// -------------------------------------------------------------------

class CreateGroup : public ::google::protobuf::Message {
 public:
  CreateGroup();
  virtual ~CreateGroup();

  CreateGroup(const CreateGroup& from);

  inline CreateGroup& operator=(const CreateGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroup& default_instance();

  void Swap(CreateGroup* other);

  // implements Message ----------------------------------------------

  inline CreateGroup* New() const { return New(NULL); }

  CreateGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGroup& from);
  void MergeFrom(const CreateGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.CreateGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 groupid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CreateGroup* default_instance_;
};
// -------------------------------------------------------------------

class AddPlayer : public ::google::protobuf::Message {
 public:
  AddPlayer();
  virtual ~AddPlayer();

  AddPlayer(const AddPlayer& from);

  inline AddPlayer& operator=(const AddPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPlayer& default_instance();

  void Swap(AddPlayer* other);

  // implements Message ----------------------------------------------

  inline AddPlayer* New() const { return New(NULL); }

  AddPlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPlayer& from);
  void MergeFrom(const AddPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // optional uint64 playerId = 2;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 canSpeak = 3;
  void clear_canspeak();
  static const int kCanSpeakFieldNumber = 3;
  ::google::protobuf::uint32 canspeak() const;
  void set_canspeak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.AddPlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 canspeak_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AddPlayer* default_instance_;
};
// -------------------------------------------------------------------

class AddPlayerAck : public ::google::protobuf::Message {
 public:
  AddPlayerAck();
  virtual ~AddPlayerAck();

  AddPlayerAck(const AddPlayerAck& from);

  inline AddPlayerAck& operator=(const AddPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPlayerAck& default_instance();

  void Swap(AddPlayerAck* other);

  // implements Message ----------------------------------------------

  inline AddPlayerAck* New() const { return New(NULL); }

  AddPlayerAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPlayerAck& from);
  void MergeFrom(const AddPlayerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddPlayerAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // optional uint64 playerId = 2;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 playerIndex = 3;
  void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 3;
  ::google::protobuf::uint32 playerindex() const;
  void set_playerindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.AddPlayerAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 playerindex_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AddPlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class RemovePlayer : public ::google::protobuf::Message {
 public:
  RemovePlayer();
  virtual ~RemovePlayer();

  RemovePlayer(const RemovePlayer& from);

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePlayer& default_instance();

  void Swap(RemovePlayer* other);

  // implements Message ----------------------------------------------

  inline RemovePlayer* New() const { return New(NULL); }

  RemovePlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePlayer& from);
  void MergeFrom(const RemovePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemovePlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // optional uint64 playerId = 2;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.RemovePlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 playerid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RemovePlayer* default_instance_;
};
// -------------------------------------------------------------------

class DestroyGroup : public ::google::protobuf::Message {
 public:
  DestroyGroup();
  virtual ~DestroyGroup();

  DestroyGroup(const DestroyGroup& from);

  inline DestroyGroup& operator=(const DestroyGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyGroup& default_instance();

  void Swap(DestroyGroup* other);

  // implements Message ----------------------------------------------

  inline DestroyGroup* New() const { return New(NULL); }

  DestroyGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DestroyGroup& from);
  void MergeFrom(const DestroyGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DestroyGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.DestroyGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 groupid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static DestroyGroup* default_instance_;
};
// -------------------------------------------------------------------

class AdjustPlayerAttr : public ::google::protobuf::Message {
 public:
  AdjustPlayerAttr();
  virtual ~AdjustPlayerAttr();

  AdjustPlayerAttr(const AdjustPlayerAttr& from);

  inline AdjustPlayerAttr& operator=(const AdjustPlayerAttr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdjustPlayerAttr& default_instance();

  void Swap(AdjustPlayerAttr* other);

  // implements Message ----------------------------------------------

  inline AdjustPlayerAttr* New() const { return New(NULL); }

  AdjustPlayerAttr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdjustPlayerAttr& from);
  void MergeFrom(const AdjustPlayerAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdjustPlayerAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 canSpeak = 2;
  void clear_canspeak();
  static const int kCanSpeakFieldNumber = 2;
  ::google::protobuf::uint32 canspeak() const;
  void set_canspeak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.AdjustPlayerAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 canspeak_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AdjustPlayerAttr* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .message.Handshake handshake = 1;
  bool has_handshake() const;
  void clear_handshake();
  static const int kHandshakeFieldNumber = 1;
  const ::message::Handshake& handshake() const;
  ::message::Handshake* mutable_handshake();
  ::message::Handshake* release_handshake();
  void set_allocated_handshake(::message::Handshake* handshake);

  // optional .message.CreateGroup createGroup = 2;
  bool has_creategroup() const;
  void clear_creategroup();
  static const int kCreateGroupFieldNumber = 2;
  const ::message::CreateGroup& creategroup() const;
  ::message::CreateGroup* mutable_creategroup();
  ::message::CreateGroup* release_creategroup();
  void set_allocated_creategroup(::message::CreateGroup* creategroup);

  // optional .message.AddPlayer addPlayer = 3;
  bool has_addplayer() const;
  void clear_addplayer();
  static const int kAddPlayerFieldNumber = 3;
  const ::message::AddPlayer& addplayer() const;
  ::message::AddPlayer* mutable_addplayer();
  ::message::AddPlayer* release_addplayer();
  void set_allocated_addplayer(::message::AddPlayer* addplayer);

  // optional .message.RemovePlayer removePlayer = 4;
  bool has_removeplayer() const;
  void clear_removeplayer();
  static const int kRemovePlayerFieldNumber = 4;
  const ::message::RemovePlayer& removeplayer() const;
  ::message::RemovePlayer* mutable_removeplayer();
  ::message::RemovePlayer* release_removeplayer();
  void set_allocated_removeplayer(::message::RemovePlayer* removeplayer);

  // optional .message.DestroyGroup destroyGroup = 5;
  bool has_destroygroup() const;
  void clear_destroygroup();
  static const int kDestroyGroupFieldNumber = 5;
  const ::message::DestroyGroup& destroygroup() const;
  ::message::DestroyGroup* mutable_destroygroup();
  ::message::DestroyGroup* release_destroygroup();
  void set_allocated_destroygroup(::message::DestroyGroup* destroygroup);

  // optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
  bool has_adjustplayerattr() const;
  void clear_adjustplayerattr();
  static const int kAdjustPlayerAttrFieldNumber = 6;
  const ::message::AdjustPlayerAttr& adjustplayerattr() const;
  ::message::AdjustPlayerAttr* mutable_adjustplayerattr();
  ::message::AdjustPlayerAttr* release_adjustplayerattr();
  void set_allocated_adjustplayerattr(::message::AdjustPlayerAttr* adjustplayerattr);

  // @@protoc_insertion_point(class_scope:message.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::message::Handshake* handshake_;
  ::message::CreateGroup* creategroup_;
  ::message::AddPlayer* addplayer_;
  ::message::RemovePlayer* removeplayer_;
  ::message::DestroyGroup* destroygroup_;
  ::message::AdjustPlayerAttr* adjustplayerattr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .message.ACK Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::message::ACK code() const;
  void set_code(::message::ACK value);

  // optional string ErrMsg = 2;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // optional .message.HandshakeAck handshakeAck = 3;
  bool has_handshakeack() const;
  void clear_handshakeack();
  static const int kHandshakeAckFieldNumber = 3;
  const ::message::HandshakeAck& handshakeack() const;
  ::message::HandshakeAck* mutable_handshakeack();
  ::message::HandshakeAck* release_handshakeack();
  void set_allocated_handshakeack(::message::HandshakeAck* handshakeack);

  // optional .message.AddPlayerAck addPlayerAck = 4;
  bool has_addplayerack() const;
  void clear_addplayerack();
  static const int kAddPlayerAckFieldNumber = 4;
  const ::message::AddPlayerAck& addplayerack() const;
  ::message::AddPlayerAck* mutable_addplayerack();
  ::message::AddPlayerAck* release_addplayerack();
  void set_allocated_addplayerack(::message::AddPlayerAck* addplayerack);

  // @@protoc_insertion_point(class_scope:message.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::message::HandshakeAck* handshakeack_;
  ::message::AddPlayerAck* addplayerack_;
  int code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ControlMessage : public ::google::protobuf::Message {
 public:
  ControlMessage();
  virtual ~ControlMessage();

  ControlMessage(const ControlMessage& from);

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlMessage& default_instance();

  void Swap(ControlMessage* other);

  // implements Message ----------------------------------------------

  inline ControlMessage* New() const { return New(NULL); }

  ControlMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlMessage& from);
  void MergeFrom(const ControlMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .message.Request req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  const ::message::Request& req() const;
  ::message::Request* mutable_req();
  ::message::Request* release_req();
  void set_allocated_req(::message::Request* req);

  // optional .message.Response res = 2;
  bool has_res() const;
  void clear_res();
  static const int kResFieldNumber = 2;
  const ::message::Response& res() const;
  ::message::Response* mutable_res();
  ::message::Response* release_res();
  void set_allocated_res(::message::Response* res);

  // @@protoc_insertion_point(class_scope:message.ControlMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::message::Request* req_;
  ::message::Response* res_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ControlMessage* default_instance_;
};
// -------------------------------------------------------------------

class PlayRequestConnect : public ::google::protobuf::Message {
 public:
  PlayRequestConnect();
  virtual ~PlayRequestConnect();

  PlayRequestConnect(const PlayRequestConnect& from);

  inline PlayRequestConnect& operator=(const PlayRequestConnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayRequestConnect& default_instance();

  void Swap(PlayRequestConnect* other);

  // implements Message ----------------------------------------------

  inline PlayRequestConnect* New() const { return New(NULL); }

  PlayRequestConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayRequestConnect& from);
  void MergeFrom(const PlayRequestConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayRequestConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PlayerIndex = 1;
  void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  ::google::protobuf::uint32 playerindex() const;
  void set_playerindex(::google::protobuf::uint32 value);

  // optional uint64 PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint64 GroupID = 3;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.PlayRequestConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerindex_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static PlayRequestConnect* default_instance_;
};
// -------------------------------------------------------------------

class PlayerRequestConnectAck : public ::google::protobuf::Message {
 public:
  PlayerRequestConnectAck();
  virtual ~PlayerRequestConnectAck();

  PlayerRequestConnectAck(const PlayerRequestConnectAck& from);

  inline PlayerRequestConnectAck& operator=(const PlayerRequestConnectAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestConnectAck& default_instance();

  void Swap(PlayerRequestConnectAck* other);

  // implements Message ----------------------------------------------

  inline PlayerRequestConnectAck* New() const { return New(NULL); }

  PlayerRequestConnectAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRequestConnectAck& from);
  void MergeFrom(const PlayerRequestConnectAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerRequestConnectAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .message.VOICE_ACK Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::message::VOICE_ACK code() const;
  void set_code(::message::VOICE_ACK value);

  // @@protoc_insertion_point(class_scope:message.PlayerRequestConnectAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static PlayerRequestConnectAck* default_instance_;
};
// -------------------------------------------------------------------

class VoiceData : public ::google::protobuf::Message {
 public:
  VoiceData();
  virtual ~VoiceData();

  VoiceData(const VoiceData& from);

  inline VoiceData& operator=(const VoiceData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceData& default_instance();

  void Swap(VoiceData* other);

  // implements Message ----------------------------------------------

  inline VoiceData* New() const { return New(NULL); }

  VoiceData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoiceData& from);
  void MergeFrom(const VoiceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoiceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PlayerIndex = 1;
  void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  ::google::protobuf::uint32 playerindex() const;
  void set_playerindex(::google::protobuf::uint32 value);

  // optional uint64 PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // optional uint32 FrameIndex = 3;
  void clear_frameindex();
  static const int kFrameIndexFieldNumber = 3;
  ::google::protobuf::uint32 frameindex() const;
  void set_frameindex(::google::protobuf::uint32 value);

  // optional bytes Data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:message.VoiceData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 playerindex_;
  ::google::protobuf::uint32 frameindex_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static VoiceData* default_instance_;
};
// -------------------------------------------------------------------

class VoiceHeartbeat : public ::google::protobuf::Message {
 public:
  VoiceHeartbeat();
  virtual ~VoiceHeartbeat();

  VoiceHeartbeat(const VoiceHeartbeat& from);

  inline VoiceHeartbeat& operator=(const VoiceHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceHeartbeat& default_instance();

  void Swap(VoiceHeartbeat* other);

  // implements Message ----------------------------------------------

  inline VoiceHeartbeat* New() const { return New(NULL); }

  VoiceHeartbeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoiceHeartbeat& from);
  void MergeFrom(const VoiceHeartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoiceHeartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PlayerIndex = 1;
  void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  ::google::protobuf::uint32 playerindex() const;
  void set_playerindex(::google::protobuf::uint32 value);

  // optional uint64 PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.VoiceHeartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 playerindex_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static VoiceHeartbeat* default_instance_;
};
// -------------------------------------------------------------------

class VoiceMessage : public ::google::protobuf::Message {
 public:
  VoiceMessage();
  virtual ~VoiceMessage();

  VoiceMessage(const VoiceMessage& from);

  inline VoiceMessage& operator=(const VoiceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceMessage& default_instance();

  void Swap(VoiceMessage* other);

  // implements Message ----------------------------------------------

  inline VoiceMessage* New() const { return New(NULL); }

  VoiceMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoiceMessage& from);
  void MergeFrom(const VoiceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoiceMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .message.PlayRequestConnect playerRequestConnect = 1;
  bool has_playerrequestconnect() const;
  void clear_playerrequestconnect();
  static const int kPlayerRequestConnectFieldNumber = 1;
  const ::message::PlayRequestConnect& playerrequestconnect() const;
  ::message::PlayRequestConnect* mutable_playerrequestconnect();
  ::message::PlayRequestConnect* release_playerrequestconnect();
  void set_allocated_playerrequestconnect(::message::PlayRequestConnect* playerrequestconnect);

  // optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
  bool has_playerrequestconnectack() const;
  void clear_playerrequestconnectack();
  static const int kPlayerRequestConnectAckFieldNumber = 2;
  const ::message::PlayerRequestConnectAck& playerrequestconnectack() const;
  ::message::PlayerRequestConnectAck* mutable_playerrequestconnectack();
  ::message::PlayerRequestConnectAck* release_playerrequestconnectack();
  void set_allocated_playerrequestconnectack(::message::PlayerRequestConnectAck* playerrequestconnectack);

  // optional .message.VoiceData voiceData = 3;
  bool has_voicedata() const;
  void clear_voicedata();
  static const int kVoiceDataFieldNumber = 3;
  const ::message::VoiceData& voicedata() const;
  ::message::VoiceData* mutable_voicedata();
  ::message::VoiceData* release_voicedata();
  void set_allocated_voicedata(::message::VoiceData* voicedata);

  // optional .message.VoiceHeartbeat voiceHeartbeat = 4;
  bool has_voiceheartbeat() const;
  void clear_voiceheartbeat();
  static const int kVoiceHeartbeatFieldNumber = 4;
  const ::message::VoiceHeartbeat& voiceheartbeat() const;
  ::message::VoiceHeartbeat* mutable_voiceheartbeat();
  ::message::VoiceHeartbeat* release_voiceheartbeat();
  void set_allocated_voiceheartbeat(::message::VoiceHeartbeat* voiceheartbeat);

  // @@protoc_insertion_point(class_scope:message.VoiceMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::message::PlayRequestConnect* playerrequestconnect_;
  ::message::PlayerRequestConnectAck* playerrequestconnectack_;
  ::message::VoiceData* voicedata_;
  ::message::VoiceHeartbeat* voiceheartbeat_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static VoiceMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Handshake

// optional string ProductKey = 2;
inline void Handshake::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handshake::productkey() const {
  // @@protoc_insertion_point(field_get:message.Handshake.ProductKey)
  return productkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_productkey(const ::std::string& value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Handshake.ProductKey)
}
inline void Handshake::set_productkey(const char* value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Handshake.ProductKey)
}
inline void Handshake::set_productkey(const char* value, size_t size) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Handshake.ProductKey)
}
inline ::std::string* Handshake::mutable_productkey() {
  
  // @@protoc_insertion_point(field_mutable:message.Handshake.ProductKey)
  return productkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handshake::release_productkey() {
  
  return productkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_allocated_productkey(::std::string* productkey) {
  if (productkey != NULL) {
    
  } else {
    
  }
  productkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:message.Handshake.ProductKey)
}

// -------------------------------------------------------------------

// HandshakeAck

// -------------------------------------------------------------------

// CreateGroup

// optional uint64 groupId = 1;
inline void CreateGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.CreateGroup.groupId)
  return groupid_;
}
inline void CreateGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.CreateGroup.groupId)
}

// -------------------------------------------------------------------

// AddPlayer

// optional uint64 groupId = 1;
inline void AddPlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddPlayer::groupid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayer.groupId)
  return groupid_;
}
inline void AddPlayer::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayer.groupId)
}

// optional uint64 playerId = 2;
inline void AddPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayer.playerId)
  return playerid_;
}
inline void AddPlayer::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayer.playerId)
}

// optional uint32 canSpeak = 3;
inline void AddPlayer::clear_canspeak() {
  canspeak_ = 0u;
}
inline ::google::protobuf::uint32 AddPlayer::canspeak() const {
  // @@protoc_insertion_point(field_get:message.AddPlayer.canSpeak)
  return canspeak_;
}
inline void AddPlayer::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayer.canSpeak)
}

// -------------------------------------------------------------------

// AddPlayerAck

// optional uint64 groupId = 1;
inline void AddPlayerAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddPlayerAck::groupid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayerAck.groupId)
  return groupid_;
}
inline void AddPlayerAck::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayerAck.groupId)
}

// optional uint64 playerId = 2;
inline void AddPlayerAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddPlayerAck::playerid() const {
  // @@protoc_insertion_point(field_get:message.AddPlayerAck.playerId)
  return playerid_;
}
inline void AddPlayerAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayerAck.playerId)
}

// optional uint32 playerIndex = 3;
inline void AddPlayerAck::clear_playerindex() {
  playerindex_ = 0u;
}
inline ::google::protobuf::uint32 AddPlayerAck::playerindex() const {
  // @@protoc_insertion_point(field_get:message.AddPlayerAck.playerIndex)
  return playerindex_;
}
inline void AddPlayerAck::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.AddPlayerAck.playerIndex)
}

// -------------------------------------------------------------------

// RemovePlayer

// optional uint64 groupId = 1;
inline void RemovePlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RemovePlayer::groupid() const {
  // @@protoc_insertion_point(field_get:message.RemovePlayer.groupId)
  return groupid_;
}
inline void RemovePlayer::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.RemovePlayer.groupId)
}

// optional uint64 playerId = 2;
inline void RemovePlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RemovePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:message.RemovePlayer.playerId)
  return playerid_;
}
inline void RemovePlayer::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.RemovePlayer.playerId)
}

// -------------------------------------------------------------------

// DestroyGroup

// optional uint64 groupId = 1;
inline void DestroyGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DestroyGroup::groupid() const {
  // @@protoc_insertion_point(field_get:message.DestroyGroup.groupId)
  return groupid_;
}
inline void DestroyGroup::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.DestroyGroup.groupId)
}

// -------------------------------------------------------------------

// AdjustPlayerAttr

// optional uint64 playerId = 1;
inline void AdjustPlayerAttr::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AdjustPlayerAttr::playerid() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.playerId)
  return playerid_;
}
inline void AdjustPlayerAttr::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.playerId)
}

// optional uint32 canSpeak = 2;
inline void AdjustPlayerAttr::clear_canspeak() {
  canspeak_ = 0u;
}
inline ::google::protobuf::uint32 AdjustPlayerAttr::canspeak() const {
  // @@protoc_insertion_point(field_get:message.AdjustPlayerAttr.canSpeak)
  return canspeak_;
}
inline void AdjustPlayerAttr::set_canspeak(::google::protobuf::uint32 value) {
  
  canspeak_ = value;
  // @@protoc_insertion_point(field_set:message.AdjustPlayerAttr.canSpeak)
}

// -------------------------------------------------------------------

// Request

// optional .message.Handshake handshake = 1;
inline bool Request::has_handshake() const {
  return !_is_default_instance_ && handshake_ != NULL;
}
inline void Request::clear_handshake() {
  if (GetArenaNoVirtual() == NULL && handshake_ != NULL) delete handshake_;
  handshake_ = NULL;
}
inline const ::message::Handshake& Request::handshake() const {
  // @@protoc_insertion_point(field_get:message.Request.handshake)
  return handshake_ != NULL ? *handshake_ : *default_instance_->handshake_;
}
inline ::message::Handshake* Request::mutable_handshake() {
  
  if (handshake_ == NULL) {
    handshake_ = new ::message::Handshake;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.handshake)
  return handshake_;
}
inline ::message::Handshake* Request::release_handshake() {
  
  ::message::Handshake* temp = handshake_;
  handshake_ = NULL;
  return temp;
}
inline void Request::set_allocated_handshake(::message::Handshake* handshake) {
  delete handshake_;
  handshake_ = handshake;
  if (handshake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.handshake)
}

// optional .message.CreateGroup createGroup = 2;
inline bool Request::has_creategroup() const {
  return !_is_default_instance_ && creategroup_ != NULL;
}
inline void Request::clear_creategroup() {
  if (GetArenaNoVirtual() == NULL && creategroup_ != NULL) delete creategroup_;
  creategroup_ = NULL;
}
inline const ::message::CreateGroup& Request::creategroup() const {
  // @@protoc_insertion_point(field_get:message.Request.createGroup)
  return creategroup_ != NULL ? *creategroup_ : *default_instance_->creategroup_;
}
inline ::message::CreateGroup* Request::mutable_creategroup() {
  
  if (creategroup_ == NULL) {
    creategroup_ = new ::message::CreateGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.createGroup)
  return creategroup_;
}
inline ::message::CreateGroup* Request::release_creategroup() {
  
  ::message::CreateGroup* temp = creategroup_;
  creategroup_ = NULL;
  return temp;
}
inline void Request::set_allocated_creategroup(::message::CreateGroup* creategroup) {
  delete creategroup_;
  creategroup_ = creategroup;
  if (creategroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.createGroup)
}

// optional .message.AddPlayer addPlayer = 3;
inline bool Request::has_addplayer() const {
  return !_is_default_instance_ && addplayer_ != NULL;
}
inline void Request::clear_addplayer() {
  if (GetArenaNoVirtual() == NULL && addplayer_ != NULL) delete addplayer_;
  addplayer_ = NULL;
}
inline const ::message::AddPlayer& Request::addplayer() const {
  // @@protoc_insertion_point(field_get:message.Request.addPlayer)
  return addplayer_ != NULL ? *addplayer_ : *default_instance_->addplayer_;
}
inline ::message::AddPlayer* Request::mutable_addplayer() {
  
  if (addplayer_ == NULL) {
    addplayer_ = new ::message::AddPlayer;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.addPlayer)
  return addplayer_;
}
inline ::message::AddPlayer* Request::release_addplayer() {
  
  ::message::AddPlayer* temp = addplayer_;
  addplayer_ = NULL;
  return temp;
}
inline void Request::set_allocated_addplayer(::message::AddPlayer* addplayer) {
  delete addplayer_;
  addplayer_ = addplayer;
  if (addplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.addPlayer)
}

// optional .message.RemovePlayer removePlayer = 4;
inline bool Request::has_removeplayer() const {
  return !_is_default_instance_ && removeplayer_ != NULL;
}
inline void Request::clear_removeplayer() {
  if (GetArenaNoVirtual() == NULL && removeplayer_ != NULL) delete removeplayer_;
  removeplayer_ = NULL;
}
inline const ::message::RemovePlayer& Request::removeplayer() const {
  // @@protoc_insertion_point(field_get:message.Request.removePlayer)
  return removeplayer_ != NULL ? *removeplayer_ : *default_instance_->removeplayer_;
}
inline ::message::RemovePlayer* Request::mutable_removeplayer() {
  
  if (removeplayer_ == NULL) {
    removeplayer_ = new ::message::RemovePlayer;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.removePlayer)
  return removeplayer_;
}
inline ::message::RemovePlayer* Request::release_removeplayer() {
  
  ::message::RemovePlayer* temp = removeplayer_;
  removeplayer_ = NULL;
  return temp;
}
inline void Request::set_allocated_removeplayer(::message::RemovePlayer* removeplayer) {
  delete removeplayer_;
  removeplayer_ = removeplayer;
  if (removeplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.removePlayer)
}

// optional .message.DestroyGroup destroyGroup = 5;
inline bool Request::has_destroygroup() const {
  return !_is_default_instance_ && destroygroup_ != NULL;
}
inline void Request::clear_destroygroup() {
  if (GetArenaNoVirtual() == NULL && destroygroup_ != NULL) delete destroygroup_;
  destroygroup_ = NULL;
}
inline const ::message::DestroyGroup& Request::destroygroup() const {
  // @@protoc_insertion_point(field_get:message.Request.destroyGroup)
  return destroygroup_ != NULL ? *destroygroup_ : *default_instance_->destroygroup_;
}
inline ::message::DestroyGroup* Request::mutable_destroygroup() {
  
  if (destroygroup_ == NULL) {
    destroygroup_ = new ::message::DestroyGroup;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.destroyGroup)
  return destroygroup_;
}
inline ::message::DestroyGroup* Request::release_destroygroup() {
  
  ::message::DestroyGroup* temp = destroygroup_;
  destroygroup_ = NULL;
  return temp;
}
inline void Request::set_allocated_destroygroup(::message::DestroyGroup* destroygroup) {
  delete destroygroup_;
  destroygroup_ = destroygroup;
  if (destroygroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.destroyGroup)
}

// optional .message.AdjustPlayerAttr adjustPlayerAttr = 6;
inline bool Request::has_adjustplayerattr() const {
  return !_is_default_instance_ && adjustplayerattr_ != NULL;
}
inline void Request::clear_adjustplayerattr() {
  if (GetArenaNoVirtual() == NULL && adjustplayerattr_ != NULL) delete adjustplayerattr_;
  adjustplayerattr_ = NULL;
}
inline const ::message::AdjustPlayerAttr& Request::adjustplayerattr() const {
  // @@protoc_insertion_point(field_get:message.Request.adjustPlayerAttr)
  return adjustplayerattr_ != NULL ? *adjustplayerattr_ : *default_instance_->adjustplayerattr_;
}
inline ::message::AdjustPlayerAttr* Request::mutable_adjustplayerattr() {
  
  if (adjustplayerattr_ == NULL) {
    adjustplayerattr_ = new ::message::AdjustPlayerAttr;
  }
  // @@protoc_insertion_point(field_mutable:message.Request.adjustPlayerAttr)
  return adjustplayerattr_;
}
inline ::message::AdjustPlayerAttr* Request::release_adjustplayerattr() {
  
  ::message::AdjustPlayerAttr* temp = adjustplayerattr_;
  adjustplayerattr_ = NULL;
  return temp;
}
inline void Request::set_allocated_adjustplayerattr(::message::AdjustPlayerAttr* adjustplayerattr) {
  delete adjustplayerattr_;
  adjustplayerattr_ = adjustplayerattr;
  if (adjustplayerattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Request.adjustPlayerAttr)
}

// -------------------------------------------------------------------

// Response

// optional .message.ACK Code = 1;
inline void Response::clear_code() {
  code_ = 0;
}
inline ::message::ACK Response::code() const {
  // @@protoc_insertion_point(field_get:message.Response.Code)
  return static_cast< ::message::ACK >(code_);
}
inline void Response::set_code(::message::ACK value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:message.Response.Code)
}

// optional string ErrMsg = 2;
inline void Response::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::errmsg() const {
  // @@protoc_insertion_point(field_get:message.Response.ErrMsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Response.ErrMsg)
}
inline void Response::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Response.ErrMsg)
}
inline void Response::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Response.ErrMsg)
}
inline ::std::string* Response::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:message.Response.ErrMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_errmsg() {
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:message.Response.ErrMsg)
}

// optional .message.HandshakeAck handshakeAck = 3;
inline bool Response::has_handshakeack() const {
  return !_is_default_instance_ && handshakeack_ != NULL;
}
inline void Response::clear_handshakeack() {
  if (GetArenaNoVirtual() == NULL && handshakeack_ != NULL) delete handshakeack_;
  handshakeack_ = NULL;
}
inline const ::message::HandshakeAck& Response::handshakeack() const {
  // @@protoc_insertion_point(field_get:message.Response.handshakeAck)
  return handshakeack_ != NULL ? *handshakeack_ : *default_instance_->handshakeack_;
}
inline ::message::HandshakeAck* Response::mutable_handshakeack() {
  
  if (handshakeack_ == NULL) {
    handshakeack_ = new ::message::HandshakeAck;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.handshakeAck)
  return handshakeack_;
}
inline ::message::HandshakeAck* Response::release_handshakeack() {
  
  ::message::HandshakeAck* temp = handshakeack_;
  handshakeack_ = NULL;
  return temp;
}
inline void Response::set_allocated_handshakeack(::message::HandshakeAck* handshakeack) {
  delete handshakeack_;
  handshakeack_ = handshakeack;
  if (handshakeack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.handshakeAck)
}

// optional .message.AddPlayerAck addPlayerAck = 4;
inline bool Response::has_addplayerack() const {
  return !_is_default_instance_ && addplayerack_ != NULL;
}
inline void Response::clear_addplayerack() {
  if (GetArenaNoVirtual() == NULL && addplayerack_ != NULL) delete addplayerack_;
  addplayerack_ = NULL;
}
inline const ::message::AddPlayerAck& Response::addplayerack() const {
  // @@protoc_insertion_point(field_get:message.Response.addPlayerAck)
  return addplayerack_ != NULL ? *addplayerack_ : *default_instance_->addplayerack_;
}
inline ::message::AddPlayerAck* Response::mutable_addplayerack() {
  
  if (addplayerack_ == NULL) {
    addplayerack_ = new ::message::AddPlayerAck;
  }
  // @@protoc_insertion_point(field_mutable:message.Response.addPlayerAck)
  return addplayerack_;
}
inline ::message::AddPlayerAck* Response::release_addplayerack() {
  
  ::message::AddPlayerAck* temp = addplayerack_;
  addplayerack_ = NULL;
  return temp;
}
inline void Response::set_allocated_addplayerack(::message::AddPlayerAck* addplayerack) {
  delete addplayerack_;
  addplayerack_ = addplayerack;
  if (addplayerack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.Response.addPlayerAck)
}

// -------------------------------------------------------------------

// ControlMessage

// optional .message.Request req = 1;
inline bool ControlMessage::has_req() const {
  return !_is_default_instance_ && req_ != NULL;
}
inline void ControlMessage::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::message::Request& ControlMessage::req() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.req)
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::message::Request* ControlMessage::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::message::Request;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.req)
  return req_;
}
inline ::message::Request* ControlMessage::release_req() {
  
  ::message::Request* temp = req_;
  req_ = NULL;
  return temp;
}
inline void ControlMessage::set_allocated_req(::message::Request* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.req)
}

// optional .message.Response res = 2;
inline bool ControlMessage::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
inline void ControlMessage::clear_res() {
  if (GetArenaNoVirtual() == NULL && res_ != NULL) delete res_;
  res_ = NULL;
}
inline const ::message::Response& ControlMessage::res() const {
  // @@protoc_insertion_point(field_get:message.ControlMessage.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::message::Response* ControlMessage::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::message::Response;
  }
  // @@protoc_insertion_point(field_mutable:message.ControlMessage.res)
  return res_;
}
inline ::message::Response* ControlMessage::release_res() {
  
  ::message::Response* temp = res_;
  res_ = NULL;
  return temp;
}
inline void ControlMessage::set_allocated_res(::message::Response* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.ControlMessage.res)
}

// -------------------------------------------------------------------

// PlayRequestConnect

// optional uint32 PlayerIndex = 1;
inline void PlayRequestConnect::clear_playerindex() {
  playerindex_ = 0u;
}
inline ::google::protobuf::uint32 PlayRequestConnect::playerindex() const {
  // @@protoc_insertion_point(field_get:message.PlayRequestConnect.PlayerIndex)
  return playerindex_;
}
inline void PlayRequestConnect::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.PlayRequestConnect.PlayerIndex)
}

// optional uint64 PlayerID = 2;
inline void PlayRequestConnect::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayRequestConnect::playerid() const {
  // @@protoc_insertion_point(field_get:message.PlayRequestConnect.PlayerID)
  return playerid_;
}
inline void PlayRequestConnect::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayRequestConnect.PlayerID)
}

// optional uint64 GroupID = 3;
inline void PlayRequestConnect::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayRequestConnect::groupid() const {
  // @@protoc_insertion_point(field_get:message.PlayRequestConnect.GroupID)
  return groupid_;
}
inline void PlayRequestConnect::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayRequestConnect.GroupID)
}

// -------------------------------------------------------------------

// PlayerRequestConnectAck

// optional .message.VOICE_ACK Code = 1;
inline void PlayerRequestConnectAck::clear_code() {
  code_ = 0;
}
inline ::message::VOICE_ACK PlayerRequestConnectAck::code() const {
  // @@protoc_insertion_point(field_get:message.PlayerRequestConnectAck.Code)
  return static_cast< ::message::VOICE_ACK >(code_);
}
inline void PlayerRequestConnectAck::set_code(::message::VOICE_ACK value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerRequestConnectAck.Code)
}

// -------------------------------------------------------------------

// VoiceData

// optional uint32 PlayerIndex = 1;
inline void VoiceData::clear_playerindex() {
  playerindex_ = 0u;
}
inline ::google::protobuf::uint32 VoiceData::playerindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.PlayerIndex)
  return playerindex_;
}
inline void VoiceData::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.PlayerIndex)
}

// optional uint64 PlayerID = 2;
inline void VoiceData::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoiceData::playerid() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.PlayerID)
  return playerid_;
}
inline void VoiceData::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.PlayerID)
}

// optional uint32 FrameIndex = 3;
inline void VoiceData::clear_frameindex() {
  frameindex_ = 0u;
}
inline ::google::protobuf::uint32 VoiceData::frameindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.FrameIndex)
  return frameindex_;
}
inline void VoiceData::set_frameindex(::google::protobuf::uint32 value) {
  
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceData.FrameIndex)
}

// optional bytes Data = 4;
inline void VoiceData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoiceData::data() const {
  // @@protoc_insertion_point(field_get:message.VoiceData.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VoiceData.Data)
}
inline void VoiceData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VoiceData.Data)
}
inline void VoiceData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VoiceData.Data)
}
inline ::std::string* VoiceData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:message.VoiceData.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoiceData::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:message.VoiceData.Data)
}

// -------------------------------------------------------------------

// VoiceHeartbeat

// optional uint32 PlayerIndex = 1;
inline void VoiceHeartbeat::clear_playerindex() {
  playerindex_ = 0u;
}
inline ::google::protobuf::uint32 VoiceHeartbeat::playerindex() const {
  // @@protoc_insertion_point(field_get:message.VoiceHeartbeat.PlayerIndex)
  return playerindex_;
}
inline void VoiceHeartbeat::set_playerindex(::google::protobuf::uint32 value) {
  
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceHeartbeat.PlayerIndex)
}

// optional uint64 PlayerID = 2;
inline void VoiceHeartbeat::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoiceHeartbeat::playerid() const {
  // @@protoc_insertion_point(field_get:message.VoiceHeartbeat.PlayerID)
  return playerid_;
}
inline void VoiceHeartbeat::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.VoiceHeartbeat.PlayerID)
}

// -------------------------------------------------------------------

// VoiceMessage

// optional .message.PlayRequestConnect playerRequestConnect = 1;
inline bool VoiceMessage::has_playerrequestconnect() const {
  return !_is_default_instance_ && playerrequestconnect_ != NULL;
}
inline void VoiceMessage::clear_playerrequestconnect() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnect_ != NULL) delete playerrequestconnect_;
  playerrequestconnect_ = NULL;
}
inline const ::message::PlayRequestConnect& VoiceMessage::playerrequestconnect() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.playerRequestConnect)
  return playerrequestconnect_ != NULL ? *playerrequestconnect_ : *default_instance_->playerrequestconnect_;
}
inline ::message::PlayRequestConnect* VoiceMessage::mutable_playerrequestconnect() {
  
  if (playerrequestconnect_ == NULL) {
    playerrequestconnect_ = new ::message::PlayRequestConnect;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.playerRequestConnect)
  return playerrequestconnect_;
}
inline ::message::PlayRequestConnect* VoiceMessage::release_playerrequestconnect() {
  
  ::message::PlayRequestConnect* temp = playerrequestconnect_;
  playerrequestconnect_ = NULL;
  return temp;
}
inline void VoiceMessage::set_allocated_playerrequestconnect(::message::PlayRequestConnect* playerrequestconnect) {
  delete playerrequestconnect_;
  playerrequestconnect_ = playerrequestconnect;
  if (playerrequestconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.playerRequestConnect)
}

// optional .message.PlayerRequestConnectAck playerRequestConnectAck = 2;
inline bool VoiceMessage::has_playerrequestconnectack() const {
  return !_is_default_instance_ && playerrequestconnectack_ != NULL;
}
inline void VoiceMessage::clear_playerrequestconnectack() {
  if (GetArenaNoVirtual() == NULL && playerrequestconnectack_ != NULL) delete playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
}
inline const ::message::PlayerRequestConnectAck& VoiceMessage::playerrequestconnectack() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.playerRequestConnectAck)
  return playerrequestconnectack_ != NULL ? *playerrequestconnectack_ : *default_instance_->playerrequestconnectack_;
}
inline ::message::PlayerRequestConnectAck* VoiceMessage::mutable_playerrequestconnectack() {
  
  if (playerrequestconnectack_ == NULL) {
    playerrequestconnectack_ = new ::message::PlayerRequestConnectAck;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.playerRequestConnectAck)
  return playerrequestconnectack_;
}
inline ::message::PlayerRequestConnectAck* VoiceMessage::release_playerrequestconnectack() {
  
  ::message::PlayerRequestConnectAck* temp = playerrequestconnectack_;
  playerrequestconnectack_ = NULL;
  return temp;
}
inline void VoiceMessage::set_allocated_playerrequestconnectack(::message::PlayerRequestConnectAck* playerrequestconnectack) {
  delete playerrequestconnectack_;
  playerrequestconnectack_ = playerrequestconnectack;
  if (playerrequestconnectack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.playerRequestConnectAck)
}

// optional .message.VoiceData voiceData = 3;
inline bool VoiceMessage::has_voicedata() const {
  return !_is_default_instance_ && voicedata_ != NULL;
}
inline void VoiceMessage::clear_voicedata() {
  if (GetArenaNoVirtual() == NULL && voicedata_ != NULL) delete voicedata_;
  voicedata_ = NULL;
}
inline const ::message::VoiceData& VoiceMessage::voicedata() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.voiceData)
  return voicedata_ != NULL ? *voicedata_ : *default_instance_->voicedata_;
}
inline ::message::VoiceData* VoiceMessage::mutable_voicedata() {
  
  if (voicedata_ == NULL) {
    voicedata_ = new ::message::VoiceData;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.voiceData)
  return voicedata_;
}
inline ::message::VoiceData* VoiceMessage::release_voicedata() {
  
  ::message::VoiceData* temp = voicedata_;
  voicedata_ = NULL;
  return temp;
}
inline void VoiceMessage::set_allocated_voicedata(::message::VoiceData* voicedata) {
  delete voicedata_;
  voicedata_ = voicedata;
  if (voicedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.voiceData)
}

// optional .message.VoiceHeartbeat voiceHeartbeat = 4;
inline bool VoiceMessage::has_voiceheartbeat() const {
  return !_is_default_instance_ && voiceheartbeat_ != NULL;
}
inline void VoiceMessage::clear_voiceheartbeat() {
  if (GetArenaNoVirtual() == NULL && voiceheartbeat_ != NULL) delete voiceheartbeat_;
  voiceheartbeat_ = NULL;
}
inline const ::message::VoiceHeartbeat& VoiceMessage::voiceheartbeat() const {
  // @@protoc_insertion_point(field_get:message.VoiceMessage.voiceHeartbeat)
  return voiceheartbeat_ != NULL ? *voiceheartbeat_ : *default_instance_->voiceheartbeat_;
}
inline ::message::VoiceHeartbeat* VoiceMessage::mutable_voiceheartbeat() {
  
  if (voiceheartbeat_ == NULL) {
    voiceheartbeat_ = new ::message::VoiceHeartbeat;
  }
  // @@protoc_insertion_point(field_mutable:message.VoiceMessage.voiceHeartbeat)
  return voiceheartbeat_;
}
inline ::message::VoiceHeartbeat* VoiceMessage::release_voiceheartbeat() {
  
  ::message::VoiceHeartbeat* temp = voiceheartbeat_;
  voiceheartbeat_ = NULL;
  return temp;
}
inline void VoiceMessage::set_allocated_voiceheartbeat(::message::VoiceHeartbeat* voiceheartbeat) {
  delete voiceheartbeat_;
  voiceheartbeat_ = voiceheartbeat;
  if (voiceheartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.VoiceMessage.voiceHeartbeat)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::CONST>() {
  return ::message::CONST_descriptor();
}
template <> struct is_proto_enum< ::message::MSG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::MSG>() {
  return ::message::MSG_descriptor();
}
template <> struct is_proto_enum< ::message::ACK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::ACK>() {
  return ::message::ACK_descriptor();
}
template <> struct is_proto_enum< ::message::VOICE_MSG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::VOICE_MSG>() {
  return ::message::VOICE_MSG_descriptor();
}
template <> struct is_proto_enum< ::message::VOICE_ACK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::VOICE_ACK>() {
  return ::message::VOICE_ACK_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
